{"version":3,"sources":["../src/constants/env.constants.ts","../src/global/A-Feature/A-Feature.types.ts","../src/global/A-Meta/A-Meta.class.ts","../src/global/A-Component/A-Component.meta.ts","../src/global/A-Container/A-Container.class.ts","../src/global/A-Container/A-Container.meta.ts","../src/helpers/A_Formatter.helper.ts","../src/helpers/A_Identity.helper.ts","../src/global/A-Error/A_Error.constants.ts","../src/global/A-Error/A_Error.class.ts","../src/global/ASEID/ASEID.error.ts","../src/global/ASEID/ASEID.class.ts","../src/global/A-Entity/A-Entity.error.ts","../src/global/A-Entity/A-Entity.class.ts","../src/global/A-Entity/A-Entity.meta.ts","../src/global/A-Fragment/A-Fragment.class.ts","../src/helpers/A_Common.helper.ts","../src/global/A-Scope/A-Scope.error.ts","../src/global/A-Scope/A-Scope.class.ts","../src/global/A-Caller/A_Caller.error.ts","../src/global/A-Caller/A_Caller.class.ts","../src/helpers/A_TypeGuards.helper.ts","../src/global/A-Feature/A-Feature.error.ts","../src/global/A-Feature/A-Feature-Define.decorator.ts","../src/global/A-Feature/A-Feature-Extend.decorator.ts","../src/global/A-Stage/A-Stage.types.ts","../src/global/A-Stage/A-Stage.error.ts","../src/global/A-Stage/A-Stage.class.ts","../src/global/A-StepManager/A-StepManager.error.ts","../src/global/A-StepManager/A-StepManager.class.ts","../src/global/A-Feature/A-Feature.class.ts","../src/global/A-Component/A-Component.class.ts","../src/global/A-Context/A-Context.error.ts","../src/global/A-Context/A-Context.class.ts","../src/global/A-Abstraction/A-Abstraction.error.ts","../src/global/A-Abstraction/A-Abstraction-Extend.decorator.ts","../src/global/A-Abstraction/A-Abstraction.class.ts","../src/global/A-Concept/A-Concept.class.ts","../src/global/A-Concept/A-Concept.meta.ts","../src/global/A-Dependency/A-Dependency.error.ts","../src/global/A-Dependency/A-Dependency-Default.decorator.ts","../src/global/A-Dependency/A-Dependency-Load.decorator.ts","../src/global/A-Dependency/A-Dependency-Require.decorator.ts","../src/global/A-Dependency/A-Dependency.class.ts","../src/global/A-Inject/A-Inject.error.ts","../src/global/A-Inject/A-Inject.decorator.ts"],"names":["A_CONSTANTS__DEFAULT_ENV_VARIABLES","A_CONSTANTS__DEFAULT_ENV_VARIABLES_ARRAY","A_TYPES__FeatureState","_A_Meta","iterator","__name","meta","key","value","inheritedValue","name","results","regex","A_Meta","_A_ComponentMeta","handler","feature","steps","extensions","extension","abstraction","abstractions","injections","args","A_ComponentMeta","_A_Container","A_Context","config","scope","A_Feature","A_Container","_A_ContainerMeta","A_ContainerMeta","_A_FormatterHelper","str","match","letter","camelCase","A_FormatterHelper","_A_IdentityHelper","parts","time","random","id","timePart","randomPart","number","maxZeros","formattedNumber","A_IdentityHelper","A_CONSTANTS__ERROR_CODES","A_CONSTANTS__ERROR_DESCRIPTION","_A_Error","param1","param2","A_TypeGuards","error","ASEID","message","title","description","params","A_Error","_ASEID_Error","ASEID_Error","_ASEID","identity","concept","body","version","entity","idCandidate","shard","_A_Entity_Error","A_Entity_Error","_A_Entity","props","x","aseid","newEntity","serialized","A_Entity","_A_EntityMeta","A_EntityMeta","_A_Fragment","param","data","newName","cloned","acc","A_Fragment","_A_CommonHelper","resolve","childClass","parentClass","current","input","paths","result","removeProperties","target","currPath","currKey","path","pathKeys","item","source","visited","clone","component","UNKNOWN","ANONYMOUS","fnAny","objAny","A_CommonHelper","_A_ScopeError","A_ScopeError","_A_Scope","_components","_errors","_entities","ent","_fragments","fragment","parent","circularCheck","ctor","found","c","f","e","anotherScope","instructions","componentName","issuer","query","count","fragmentInstancePresented","resolvedArgs","arg","dependency","require","create","defaultArgs","newDependency","newComponent","el","A_Component","inheritanceChain","chain","A_Scope","_A_CallerError","A_CallerError","_A_Caller","A_Caller","_A_TypeGuards","instance","_A_FeatureError","A_FeatureError","A_Feature_Define","propertyKey","descriptor","metaKey","existedMeta","invoke","originalMethod","A_Feature_Extend","targetRegexp","behavior","before","after","override","include","exclude","throwOnError","buildTargetRegexp","existedDefinitions","existedMetaValue","existedIndex","includePart","excludePart","pattern","A_TYPES__A_Stage_Status","_A_StageError","A_StageError","_A_Stage","step","resolverConstructor","callArgs","targetScope","reject","wrappedError","A_Stage","_A_StepManagerError","A_StepManagerError","_A_StepsManager","entities","i","self","s","entityId","node","neighbor","A_StepsManager","_A_Feature","componentScope","template","stage","stageIndex","reason","_A_Component","_A_ContextError","A_ContextError","_A_Context","testEnvironment","importing","newScope","property","metaType","inheritMeta","callName","cmp","declaration","items","currentClass","other","otherClass","_A_AbstractionError","A_AbstractionError","A_Abstraction_Extend","setName","_A_Abstraction","container","A_Abstraction","_A_Concept","method","A_Concept","_A_ConceptMeta","containers","A_ConceptMeta","_A_DependencyError","A_DependencyError","A_Dependency_Default","methodName","parameterIndex","paramsArray","A_Dependency_Load","A_Dependency_Require","_A_Dependency","A_Dependency","_A_InjectError","A_InjectError","A_Inject"],"mappings":"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","file":"index.cjs","sourcesContent":["export const A_CONSTANTS__DEFAULT_ENV_VARIABLES = {\n    // ----------------------------------------------------------\n    // A-Concept Core Environment Variables\n    // ----------------------------------------------------------\n    // These environment variables are used by A-Concept core to configure the application\n    // ----------------------------------------------------------\n    /**\n     * Name of the application\n     * \n     * DEFAULT value is 'a-concept'\n     * \n     * [!] Provided name will be used for all aseids in the application by default\n     */\n    A_CONCEPT_NAME: 'A_CONCEPT_NAME',\n    /**\n     * Root scope of the application\n     * \n     * DEFAULT value is 'root'\n     * \n     * [!] Provided name will be used for all aseids in the application by default\n     */\n    A_CONCEPT_ROOT_SCOPE: 'A_CONCEPT_ROOT_SCOPE',\n    /**\n     * Environment of the application e.g. development, production, staging\n     */\n    A_CONCEPT_ENVIRONMENT: 'A_CONCEPT_ENVIRONMENT',\n    /**\n     * Root folder of the application\n     * [!] Automatically set by A-Concept when the application starts\n     */\n    A_CONCEPT_ROOT_FOLDER: 'A_CONCEPT_ROOT_FOLDER',\n    /**\n     * Allows to define a default error description for errors thrown without a description\n     */\n    A_ERROR_DEFAULT_DESCRIPTION: 'A_ERROR_DEFAULT_DESCRIPTION',\n} as const\n\n\n//should be an array\nexport type A_TYPES__ConceptENVVariables = (typeof A_CONSTANTS__DEFAULT_ENV_VARIABLES)[keyof typeof A_CONSTANTS__DEFAULT_ENV_VARIABLES][];\n\n\nexport const A_CONSTANTS__DEFAULT_ENV_VARIABLES_ARRAY = [\n    A_CONSTANTS__DEFAULT_ENV_VARIABLES.A_CONCEPT_NAME,\n    A_CONSTANTS__DEFAULT_ENV_VARIABLES.A_CONCEPT_ROOT_SCOPE,\n    A_CONSTANTS__DEFAULT_ENV_VARIABLES.A_CONCEPT_ENVIRONMENT,\n    A_CONSTANTS__DEFAULT_ENV_VARIABLES.A_CONCEPT_ROOT_FOLDER,\n\n    A_CONSTANTS__DEFAULT_ENV_VARIABLES.A_ERROR_DEFAULT_DESCRIPTION,\n] as const;\n\n","import { A_TYPES__A_StageStep, A_TYPES_StageExecutionBehavior } from \"../A-Stage/A-Stage.types\"\nimport { A_Fragment } from \"../A-Fragment/A-Fragment.class\"\nimport { A_Entity } from \"@adaas/a-concept/global/A-Entity/A-Entity.class\"\nimport { A_Container } from \"../A-Container/A-Container.class\"\nimport { A_Component } from \"../A-Component/A-Component.class\"\nimport { A_TYPES__Component_Constructor } from \"../A-Component/A-Component.types\"\nimport { A_TYPES__Container_Constructor } from \"../A-Container/A-Container.types\"\nimport { A_TYPES__Entity_Constructor } from \"../A-Entity/A-Entity.types\"\nimport { A_Feature } from \"./A-Feature.class\"\nimport { A_TYPES__Required } from \"@adaas/a-concept/types/A_Common.types\"\nimport { A_Scope } from \"../A-Scope/A-Scope.class\"\nimport { A_Stage } from \"../A-Stage/A-Stage.class\"\nimport { A_TYPES__Error_Init } from \"../A-Error/A_Error.types\"\n\n\n// ============================================================================\n// --------------------------- Primary Types ----------------------------------\n// ============================================================================\n/**\n * Feature constructor type\n * Uses the generic type T to specify the type of the feature\n */\nexport type A_TYPES__Feature_Constructor<T = A_Feature> = new (...args: any[]) => T;\n/**\n * Feature initialization type\n */\nexport type A_TYPES__Feature_Init<T extends A_TYPES__FeatureAvailableComponents = A_TYPES__FeatureAvailableComponents> = A_TYPES__Feature_InitWithComponent<T> | A_TYPES__Feature_InitWithTemplate<T>\n/**\n * Feature initialization type using component\n */\nexport type A_TYPES__Feature_InitWithComponent<T extends A_TYPES__FeatureAvailableComponents = A_TYPES__FeatureAvailableComponents> = {\n    /**\n     * Feature Name\n     */\n    name: string,\n    /**\n     * The component from where the feature is calling. It's important for proper scoping. \n     * Based on the component would be retrieved connected components, entities and containers.\n     * \n     * [!] Could be Container, Entity, Component or Command\n     */\n    component: T,\n\n    /**\n     * In case when Entity is not attached to the scope can be used to transparently show dependencies\n     * \n     * \n     */\n    scope?: A_Scope\n}\n/**\n * Feature initialization type using template\n */\nexport type A_TYPES__Feature_InitWithTemplate<T extends A_TYPES__FeatureAvailableComponents = A_TYPES__FeatureAvailableComponents> = {\n    /**\n     * Feature Name\n     */\n    name: string,\n    /**\n     * The scope from where to retrieve dependent components, entities and containers. \n     * \n     * [!] Important for proper scoping. \n     */\n    scope: A_Scope\n    /**\n     * The component from where the feature is calling. It's important for proper scoping. \n     * Based on the component would be retrieved connected components, entities and containers.\n     * \n     * [!] Could be Container, Entity, Component or Command\n     */\n    component?: T,\n    /**\n     * Optional Feature template to be used instead of building it from decorators\n     */\n    template: Array<A_TYPES__FeatureDefineDecoratorTemplateItem>\n}\n\n/**\n * Feature serialized type\n */\nexport type A_TYPES__Feature_Serialized = {}\n\n\n/**\n * Feature lifecycle states\n */\nexport enum A_TYPES__FeatureState {\n    /**\n     * The feature has been initialized\n     */\n    INITIALIZED = \"INITIALIZED\",\n    /**\n     * The feature is currently being processed\n     */\n    PROCESSING = \"PROCESSING\",\n    /**\n     * The feature has been completed\n     */\n    COMPLETED = \"COMPLETED\",\n    /**\n     * The feature has been interrupted\n     */\n    INTERRUPTED = \"INTERRUPTED\",\n    /**\n     * The feature has failed\n     */\n    FAILED = \"FAILED\"\n}\n\n// ===========================================================================\n// --------------------------- Error Types ------------------------------------\n// ===========================================================================\n\nexport type A_TYPES__FeatureError_Init = {\n    /**\n     * Stage where the error occurred\n     */\n    stage?: A_Stage\n\n} & A_TYPES__Error_Init\n\n\n\n// ===========================================================================-\n// --------------------------- Available Types -------------------------------\n// ===========================================================================\n\n/**\n * A list of component where features can be Defined\n * \n * [!] On this component Feature Definition is Available\n */\nexport type A_TYPES__FeatureAvailableComponents = InstanceType<A_TYPES__FeatureAvailableConstructors>\n/**\n * A list of constructors where features can be Defined\n * \n * [!] On this component Feature Definition is Available\n */\nexport type A_TYPES__FeatureAvailableConstructors = A_TYPES__Component_Constructor\n    | A_TYPES__Entity_Constructor\n    | A_TYPES__Container_Constructor\n\n\n\n// ===========================================================================\n// --------------------------- Decorator Types -------------------------------\n// ===========================================================================\n// ---------------------------------------------------------------------------\n// --------------------Feature Define Decorator Types-------------------------\n// ---------------------------------------------------------------------------\n/**\n * Indicates a type of Feature Define decorator\n */\nexport type A_TYPES__FeatureDefineDecoratorDescriptor =\n    TypedPropertyDescriptor<(...args: any[]) => any>\n    | TypedPropertyDescriptor<(...args: any[]) => any>\n    | TypedPropertyDescriptor<(...args: any[]) => Promise<any>>\n    | TypedPropertyDescriptor<(...args: any[]) => Promise<any>>\n/**\n * Describes additional configuration properties to be used in Feature Define decorator\n */\nexport type A_TYPES__FeatureDefineDecoratorConfig = {\n    /**\n     * Feature name\n     * \n     * [!] By default uses the method name\n     */\n    name: string,\n    /**\n     * Indicates a default behavior of the feature. If true the feature will be automatically attached to the execution.\n     * \n     * [!] Before feature execution the method itself will be called to prepare the feature template\n     * [!] Default is false\n     */\n    invoke: boolean,\n    /**\n     * Allows to add a default behavior or number of steps that will be part of the feature\n     */\n    template: Array<A_TYPES__FeatureDefineDecoratorTemplateItem>\n}\n/**\n * Describes a single template item used in Feature Define decorator\n */\nexport type A_TYPES__FeatureDefineDecoratorTemplateItem = A_TYPES__Required<Partial<A_TYPES__A_StageStep>, ['name', 'handler', 'component']>\n/**\n * Describes a target where Feature Define decorator can be applied\n * \n * [!] The feature can be defined on Container, Entity, Component or Command\n */\nexport type A_TYPES__FeatureDefineDecoratorTarget = A_Container\n    | A_Entity\n    | A_Component\n/**\n * A type of Meta information stored by Feature Define decorator\n * This information then uses by A-Context to build a proper feature template\n */\nexport type A_TYPES__FeatureDefineDecoratorMeta = {\n    /**\n     * Feature name\n     * mainly it's a unique combination of the class name and method name\n     */\n    name: string,\n    /**\n     * Actual method name in the class\n     */\n    handler: string,\n    /**\n     * Indicates a default behavior of the feature. If true the feature will be automatically attached to the execution.\n     * \n     * [!] Before feature execution the method itself will be called to prepare the feature template\n     * [!] Default is false\n     */\n    invoke: boolean,\n    /**\n     * Allows to add a default behavior or number of steps that will be part of the feature\n     */\n    template: Array<A_TYPES__A_StageStep>\n}\n// ---------------------------------------------------------------------------\n// --------------------Feature Extend Decorator Types-------------------------\n// ---------------------------------------------------------------------------\n/**\n * Descriptor type for A_Extend decorator\n */\nexport type A_TYPES__FeatureExtendDecoratorDescriptor =\n    TypedPropertyDescriptor<() => any>\n    | TypedPropertyDescriptor<(...args: any[]) => any>\n    | TypedPropertyDescriptor<(...args: any[]) => Promise<any>>\n    | TypedPropertyDescriptor<() => Promise<any>>\n/**\n * Target type for A_Extend decorator\n * \n * [!] Can be applied only on A-Components\n */\nexport type A_TYPES__FeatureExtendDecoratorTarget = A_Component\n\n/**\n * Configuration type for A_Extend decorator\n * \n * This is an INPUT parameter provided by the user\n */\nexport type A_TYPES__FeatureExtendDecoratorConfig = {\n    /**\n     * Name of the container Lifecycle method to be extended.\n     * \n     * [!] If not provided will be used the name of the method.\n     * [!!] If name contains \".\" dot it will be considered as a path to the method.\n     */\n    name: string,\n    /**\n     * Container class or container name uses to identify the proper container in case when the name is not unique.\n     * \n     * [!] If not provided will be applied to all containers with the same name.\n     * [!!] By default uses OR to join all provided items. If you need more complex Logic, please use Regexp instead\n     * \n     * [!!!] In case if you need to exclude some containers, entities or components, please use \"exclude\" property\n     * \n     * Example:\n     * \n     * ```ts\n     *  @A_Feature.Extend({\n     *      name: 'load',\n     *      scope: {\n     *          include: [A_Container1, A_Entity1],\n     *          exclude: [A_Component1]\n     *      }\n     *  })\n     * ```\n     */\n    scope: Array<A_TYPES__FeatureExtendDecoratorScopeItem> | Partial<A_TYPES__FeatureExtendDecoratorScopeConfig>,\n    /**\n     * The behavior of the method. \n     * In case its async it will be executed independently from the main thread.\n     * \n     * [!] However, in case of sync, it will be executed in the main thread.in the order of the declaration.\n     * \n     */\n    behavior: A_TYPES_StageExecutionBehavior\n    /**\n     * Allows to define the order of the execution of the method.\n     * \n     * [!] It applies for the following structure :'Component.methodName'\n     * [!] In case the method has circular dependencies it will Throw an error.\n     * \n     * Example:\n     * ```ts\n     *  @A_Feature.Extend({\n     *      name: 'load',\n     *      before: ['Component1.methodName', 'Component2.methodName2']\n     *  })\n     *  // OR\n     *  @A_Feature.Extend({\n     *      name: 'load',\n     *      before: /Component2\\..+/\n     *  })\n     * ```\n     */\n    before: Array<string> | RegExp\n\n    /**\n     * Allows to define the order of the execution of the method.\n     * \n     * [!] It applies for the following structure :'Component.methodName'\n     * [!] In case the method has circular dependencies it will Throw an error.\n     * \n     * Example:\n     * ```ts\n     *  @A_Feature.Extend({\n     *      name: 'load',\n     *      after: ['Component1.methodName', 'Component2.methodName2']\n     *  })\n     *  // OR\n     *  @A_Feature.Extend({\n     *      name: 'load',\n     *      after: /Component2\\..+/\n     *  })\n     * ```\n     * \n     */\n    after: Array<string> | RegExp\n    /**\n     * Indicates whether to throw an error if the step fails.\n     * \n     * [!] By default is true\n     */\n    throwOnError: boolean\n\n    /**\n     * Allows to override particular steps in the feature sequence by provided names [Component].[Method] or by regexp\n     */\n    override: Array<string> | RegExp\n}\n/**\n * Scope item that can be used in A_Extend decorator configuration\n */\nexport type A_TYPES__FeatureExtendDecoratorScopeConfig = {\n    /**\n     * A list of components, entities or containers to include in the scope of the extension\n     */\n    include?: Array<A_TYPES__FeatureExtendDecoratorScopeItem>,\n    /**\n     * A list of components, entities or containers to exclude from the scope of the extension\n     */\n    exclude?: Array<A_TYPES__FeatureExtendDecoratorScopeItem>\n}\n/**\n * A single item that can be used in scope configuration\n */\nexport type A_TYPES__FeatureExtendDecoratorScopeItem = A_TYPES__Container_Constructor\n    | A_TYPES__Entity_Constructor\n    | A_TYPES__Component_Constructor\n\n\n\n// =======================================================================\n// --------------------------META TYPES-----------------------------------\n// =======================================================================\n/**\n * Meta type for A_Extend decorator\n */\nexport type A_TYPES__FeatureExtendDecoratorMeta = {\n    /**\n     * Original Feature Extension name\n     * \n     * [!] could be string or regex\n     */\n    name: string,\n    /**\n     * Actual method name in the class\n     */\n    handler: string\n    /**\n     * The behavior of the method. \n     * In case its async it will be executed independently from the main thread.\n     * \n     * [!] However, in case of sync, it will be executed in the main thread.in the order of the declaration.\n     * \n     */\n    behavior: A_TYPES_StageExecutionBehavior\n    /**\n     * Allows to define the order of the execution of the method.\n     * \n     * [!] In case the method has circular dependencies it will Throw an error.\n     * \n     */\n    before: string\n    /**\n     * Allows to define the order of the execution of the method.\n     * \n     * [!] In case the method has circular dependencies it will Throw an error.\n     * \n     */\n    after: string\n    /**\n     * Indicates whether to throw an error if the step fails.\n     * \n     * [!] By default is true\n     */\n    throwOnError: boolean,\n    /**\n     * Allows to override particular steps in the feature sequence by provided names [Component].[Method] or by regexp\n     */\n    override: string\n}\n\n\n","/**\n * A Meta is an entity that stores all the metadata for the specific entity like container, component, feature, etc. \n * \n * [!] Meta can be different depending on the type of input data\n */\nexport class A_Meta<\n    _StorageItems extends Record<string, any> = any\n// _StorageItems extends Record<string, Map<string | Symbol, any> | Array<any> | A_TYPES__Dictionary<any>>\n> implements Iterable<[keyof _StorageItems, _StorageItems[keyof _StorageItems]]> {\n\n    protected meta: Map<keyof _StorageItems, _StorageItems[keyof _StorageItems]> = new Map();\n\n\n    /**\n     * Method to get the iterator for the meta object\n     * \n     * @returns \n     */\n    [Symbol.iterator](): Iterator<[keyof _StorageItems, _StorageItems[keyof _StorageItems]]> {\n        const iterator = this.meta.entries();\n        return {\n            next: () => iterator.next()\n        };\n    }\n\n\n\n    // ===================================================================================================\n    // ================================ META OPERATIONS ==================================================\n    // ===================================================================================================\n    /**\n     * Allows to replicate received meta object by replacing internal meta to the received one\n     * \n     * @param meta \n     * @returns \n     */\n    from(\n        meta: A_Meta<_StorageItems>\n    ): A_Meta<_StorageItems> {\n        this.meta = new Map(meta.meta);\n\n        return this;\n    }\n\n\n    /**\n     * Method to set values in the map\n     * \n     * @param key \n     * @param value \n     */\n    set<K extends keyof _StorageItems>(key: K, value: _StorageItems[K]) {\n\n        const inheritedValue = this.meta.get(key)\n            || Array.isArray(value)\n            ? []\n            : (value as any) instanceof Map\n                ? new Map()\n                : {};\n        const targetValue = this.meta.get(key)\n            || Array.isArray(value)\n            ? [\n                ...inheritedValue as any\n            ] : (value as any) instanceof Map\n                ? new Map(inheritedValue as any)\n                : { ...inheritedValue };\n\n        this.meta.set(key, value);\n\n    }\n\n\n\n    /**\n     * Method to get values from the map\n     * \n     * @param key \n     * @returns \n     */\n    get<K extends keyof _StorageItems>(key: K): _StorageItems[K] | undefined {\n        return this.meta.get(key) as _StorageItems[K];\n    }\n\n\n    /**\n     * Method to delete values from the map\n     * \n     * @param key \n     * @returns \n     */\n    delete(key: keyof _StorageItems): boolean {\n        return this.meta.delete(key);\n    }\n\n\n    /**\n     * Method to get the size of the map\n     * \n     * @returns \n     */\n    size(): number {\n        return this.meta.size;\n    }\n\n\n    /**\n     * This method is needed to convert the key to a regular expression and cover cases like: \n     * \n     * simple * e.g. \"a*\" instead of \"a.*\"\n     * \n     * simple ? e.g. \"a?\" instead of \"a.\"\n     * \n     * etc. \n     * \n     * @param key \n     * @returns \n     */\n    private convertToRegExp(key: string | RegExp): RegExp {\n        return key instanceof RegExp\n            ? key\n            : new RegExp(key);\n    }\n\n\n    /**\n     * Method to find values in the map by name.\n     * \n     * Converts the Key in Map to a regular expression and then compares to the name\n     * \n     * @param name \n     * @returns \n     */\n    find(name: string) {\n        const results: Array<[keyof _StorageItems, _StorageItems[keyof _StorageItems]]> = [];\n        for (const [key, value] of this.meta.entries()) {\n            if (this.convertToRegExp(String(key)).test(name)) {\n                results.push([key, value]);\n            }\n        }\n        return results;\n    }\n\n\n    /**\n     * Method to find values in the map by regular expression\n     * \n     * Compares Map Key to the input regular expression\n     * \n     * @param regex \n     * @returns \n     */\n    findByRegex(regex: RegExp): Array<[keyof _StorageItems, _StorageItems[keyof _StorageItems]]> {\n        const results: Array<[keyof _StorageItems, _StorageItems[keyof _StorageItems]]> = [];\n        for (const [key, value] of this.meta.entries()) {\n            if (regex.test(String(key))) {\n                results.push([key, value]);\n            }\n        }\n        return results;\n    }\n\n\n    /**\n     * Method to check if the map has a specific key\n     * \n     * @param key \n     * @returns \n     */\n    has(key: keyof _StorageItems): boolean {\n        return this.meta.has(key);\n    }\n\n\n    /**\n     * Method to get the size of the map\n     * \n     * @returns \n     */\n    entries(): IterableIterator<[keyof _StorageItems, _StorageItems[keyof _StorageItems]]> {\n        return this.meta.entries();\n    }\n\n\n    /**\n     * Method to clear the map\n     */\n    clear(): void {\n        this.meta.clear();\n    }\n\n\n    toArray(): Array<[keyof _StorageItems, _StorageItems[keyof _StorageItems]]> {\n        return Array.from(this.meta.entries());\n    }\n}","import { A_TYPES__A_InjectDecorator_Meta } from \"@adaas/a-concept/global/A-Inject/A-Inject.types\";\nimport { A_TYPES__ConceptAbstractionMeta } from \"../A-Concept/A-Concept.types\";\nimport { A_Meta } from \"../A-Meta/A-Meta.class\";\nimport { A_TYPES__ComponentMeta, A_TYPES__ComponentMetaExtension } from \"./A-Component.types\";\nimport { A_TYPES__ComponentMetaKey } from \"./A-Component.constants\";\nimport { A_TYPES__FeatureDefineDecoratorMeta } from \"../A-Feature/A-Feature.types\";\n\n\nexport class A_ComponentMeta extends A_Meta<A_TYPES__ComponentMeta> {\n\n    /**\n     * Allows to get all the injections for a given handler\n     * \n     * @param handler \n     * @returns \n     */\n    injections(\n        handler: string\n    ): A_TYPES__A_InjectDecorator_Meta {\n        const injections = this.get(A_TYPES__ComponentMetaKey.INJECTIONS);\n\n        const args = injections?.get(handler) || [];\n\n        return args;\n    }\n\n    /**\n     * Allows to get all the extensions for a given feature\n     * \n     * @param feature \n     * @returns \n     */\n    extensions(\n        feature: string\n    ): A_TYPES__ComponentMetaExtension[] {\n        const steps: A_TYPES__ComponentMetaExtension[] = [];\n\n        const extensions = this.get(A_TYPES__ComponentMetaKey.EXTENSIONS);\n\n        extensions\n            // returns all extensions that match the feature\n            ?.find(feature)\n            .forEach(([handler, extensions]) => {\n                extensions.forEach(extension => {\n                    steps.push({\n                        // component: constructor,\n                        name: extension.name,\n                        handler: extension.handler,\n                        behavior: extension.behavior,\n                        before: extension.before || '',\n                        after: extension.after || '',\n                        throwOnError: extension.throwOnError || true,\n                        override:''\n                    });\n\n                });\n            });\n\n\n        return steps;\n    }\n\n    /**\n     * Returns all features defined in the Component\n     * \n     * @returns \n     */\n    features(): Array<A_TYPES__FeatureDefineDecoratorMeta> {\n\n        const features = this.get(A_TYPES__ComponentMetaKey.FEATURES);\n\n        return features?.toArray()\n            // returns all extensions that match the feature\n            .map(([, feature]) => feature) || [];\n    }\n\n    /**\n     * Returns a set of instructions to run proper methods in Component during A-Concept Stage\n     * \n     * @param stage \n     * @returns \n     */\n    abstractions(\n        abstraction: any\n    ): A_TYPES__ConceptAbstractionMeta[] {\n        const steps: A_TYPES__ConceptAbstractionMeta[] = [];\n\n        const abstractions = this.get(A_TYPES__ComponentMetaKey.ABSTRACTIONS);\n        const injections = this.get(A_TYPES__ComponentMetaKey.INJECTIONS);\n\n        abstractions\n            // returns all extensions that match the feature\n            ?.find(`CONCEPT_ABSTRACTION::${abstraction}`)\n            .forEach(([handler, extensions]) => {\n                extensions.forEach(extension => {\n                    const args = injections?.get(extension.handler) || [];\n\n                    steps.push({\n                        ...extension,\n                        // component: constructor,\n                        args,\n                    });\n\n                });\n            });\n\n\n        return steps;\n    }\n}","import { A_Context } from \"../A-Context/A-Context.class\";\nimport { A_Feature } from \"../A-Feature/A-Feature.class\";\nimport { A_Scope } from \"../A-Scope/A-Scope.class\";\nimport { A_TYPES__Container_Init } from \"./A-Container.types\";\n\n\n\nexport class A_Container {\n\n    /**\n     * Configuration of the container that will be used to run it.\n     */\n    protected readonly config!: Partial<A_TYPES__Container_Init>;\n    /**\n     * Name of the container\n     */\n    get name() {\n        return this.config?.name || this.constructor.name;\n    }\n    /**\n     * Returns the scope where the container is registered\n     */\n    get scope(): A_Scope {\n        return A_Context.scope(this);\n    }\n\n\n    /**\n     * This class should combine Components to achieve the goal withing Concept\n     * \n     * Container is a direct container that should be \"run\" to make Concept work. \n     * So because of that Container can be:\n     * - HTTP Server\n     * - BASH Script\n     * - Database Connection\n     * - Microservice\n     * - etc.\n     * \n     * @param config - Configuration of the container that will be used to run it.\n     */\n    constructor(\n        /**\n         * Configuration of the container that will be used to run it.\n         */\n        config: Partial<A_TYPES__Container_Init> = {}\n    ) {\n        this.config = config;\n\n        A_Context.allocate(this, this.config);\n    }\n\n\n    /**\n     * Calls the feature with the given name in the given scope\n     * \n     * [!] Note: This method creates a new instance of the feature every time it is called\n     * \n     * @param feature - the name of the feature to call\n     * @param scope  - the scope in which to call the feature\n     * @returns  - void\n     */\n    async call(\n        /**\n         * Name of the feature to call\n         */\n        feature: string,\n        /**\n         * scope in which the feature will be executed\n         */\n        scope?: A_Scope\n    ) {\n        const newFeature = new A_Feature({\n            name: feature,\n            component: this\n        });\n\n        return await newFeature.process(scope);\n    }\n}","import { A_TYPES__ContainerMeta, A_TYPES__ContainerMetaExtension, } from \"./A-Container.types\";\nimport { A_TYPES__A_InjectDecorator_Meta } from \"@adaas/a-concept/global/A-Inject/A-Inject.types\";\nimport { A_TYPES__ConceptAbstraction, A_TYPES__ConceptAbstractionMeta } from \"../A-Concept/A-Concept.types\";\nimport { A_Meta } from \"../A-Meta/A-Meta.class\";\nimport { A_TYPES__ContainerMetaKey } from \"./A-Container.constants\";\nimport { A_TYPES__FeatureDefineDecoratorMeta } from \"../A-Feature/A-Feature.types\";\nimport { A_TYPES__ConceptAbstractions } from \"../A-Concept/A-Concept.constants\";\n\n\n\nexport class A_ContainerMeta extends A_Meta<A_TYPES__ContainerMeta> {\n\n\n\n    /**\n     * Allows to get all the injections for a given handler\n     * \n     * @param handler \n     * @returns \n     */\n    injections(\n        handler: string\n    ): A_TYPES__A_InjectDecorator_Meta {\n        const injections = this.get(A_TYPES__ContainerMetaKey.INJECTIONS);\n\n        const args = injections?.get(handler) || [];\n\n        return args;\n    }\n\n    /**\n     * Returns all features defined in the Container\n     * \n     * @returns \n     */\n    features(): Array<A_TYPES__FeatureDefineDecoratorMeta> {\n\n        const features = this.get(A_TYPES__ContainerMetaKey.FEATURES);\n\n        return features?.toArray()\n            // returns all extensions that match the feature\n            .map(([, feature]) => feature) || [];\n    }\n\n    /**\n     * Returns a set of instructions to run proper methods in Container during A-Concept Stage\n     * \n     * @param stage \n     * @returns \n     */\n    abstractions(\n        abstraction: A_TYPES__ConceptAbstractions\n    ): A_TYPES__ConceptAbstractionMeta[] {\n        const steps: A_TYPES__ConceptAbstractionMeta[] = [];\n\n        const abstractions = this.get(A_TYPES__ContainerMetaKey.ABSTRACTIONS);\n        const injections = this.get(A_TYPES__ContainerMetaKey.INJECTIONS);\n\n        abstractions\n            // returns all extensions that match the feature\n            ?.find(`CONCEPT_ABSTRACTION::${abstraction}`)\n            .forEach(([handler, extensions]) => {\n                extensions.forEach(extension => {\n                    const args = injections?.get(extension.handler) || [];\n\n                    steps.push({\n                        ...extension,\n                        args,\n                    });\n\n                });\n            });\n\n\n        return steps;\n    }\n\n\n    /**\n     * Allows to get all the extensions for a given feature\n     * \n     * @param feature \n     * @returns \n     */\n    extensions(\n        feature: string\n    ): A_TYPES__ContainerMetaExtension[] {\n        const steps: A_TYPES__ContainerMetaExtension[] = [];\n\n        const extensions = this.get(A_TYPES__ContainerMetaKey.EXTENSIONS);\n\n        extensions\n            // returns all extensions that match the feature\n            ?.find(feature)\n            .forEach(([handler, extensions]) => {\n                extensions.forEach(extension => {\n                    steps.push({\n                        // component: constructor,\n                        name: extension.name,\n                        handler: extension.handler,\n                        behavior: extension.behavior,\n                        before: extension.before || '',\n                        after: extension.after || '',\n                        throwOnError: extension.throwOnError || true,\n                        override: ''\n\n                    });\n\n                });\n            });\n\n\n        return steps;\n    }\n\n}","\n/**\n * A_FormatterHelper\n * \n * Helper class for formatting strings into different cases.\n */\nexport class A_FormatterHelper {\n    /**\n     * Convert string to UPPER_SNAKE_CASE\n     * \n     * @param str \n     * @returns \n     */\n    static toUpperSnakeCase(str: string): string {\n        return str\n            .replace(/([a-z])([A-Z])/g, '$1_$2')  // Handle lowercase followed by uppercase\n            .replace(/[-\\s]([A-Z])/g, '_$1')      // Handle non-alphabetical followed by uppercase\n            .replace(/-/g, '_')\n            .toUpperCase();\n    }\n    /**\n     * Convert string to camelCase\n     * \n     * @param str \n     * @returns \n     */\n    static toCamelCase(str: string): string {\n        return str.toLowerCase().replace(/_([a-z])/g, (match, letter) => letter.toUpperCase());\n    }\n    /**\n     * Convert string to PascalCase\n     * \n     * @param str \n     * @returns \n     */\n    static toPascalCase(str: string): string {\n        const camelCase = this.toCamelCase(str);\n        return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n    }\n    /**\n     * Convert string to kebab-case\n     * \n     * @param str \n     * @returns \n     */\n    static toKebabCase(str: string): string {\n        return str\n            // 1. Replace all non-alphanumeric (underscore, dot, etc.) with a space\n            .replace(/[^a-zA-Z0-9]+/g, ' ')\n            // 2. Insert space before any uppercase preceded by lowercase or digit\n            .replace(/([a-z0-9])([A-Z])/g, '$1 $2')\n            // 3. Trim spaces at both ends and replace remaining spaces with dashes\n            .trim()\n            .replace(/\\s+/g, '-')\n            // 4. Lowercase everything\n            .toLowerCase();\n    }\n}","\nexport type A_ID_TYPES__TimeId_Parts = {\n    timestamp: Date;\n    random: string;\n}\n\n\nexport class A_IdentityHelper {\n    /**\n   * Generates a short, time-based unique ID.\n   * Encodes current time (ms since epoch) and random bits in base36.\n   * Example: \"mb4f1g-7f9a1c\"\n   */\n    static generateTimeId(\n        parts: A_ID_TYPES__TimeId_Parts = { timestamp: new Date(), random: Math.random().toString(36).slice(2, 8) }\n    ): string {\n        const time = parts.timestamp.getTime().toString(36); // base36-encoded timestamp\n        const random = parts.random; // use provided random string\n        return `${time}-${random}`;\n    }\n\n    /**\n     * Parses a short ID back into its parts.\n     * Returns an object with the original timestamp (as Date) and random string.\n     */\n    static parseTimeId(id: string): A_ID_TYPES__TimeId_Parts {\n        const [timePart, randomPart] = id.split('-');\n        const timestamp = new Date(parseInt(timePart, 36));\n        return { timestamp, random: randomPart };\n    }\n\n\n    /**\n     *  Format a number with leading zeros to a fixed length\n     * \n     * @param number \n     * @param maxZeros \n     * @returns \n     */\n    static formatWithLeadingZeros(number, maxZeros = 10) {\n        const formattedNumber = String(number).padStart(maxZeros + 1, '0');\n        return formattedNumber.slice(-maxZeros);\n    }\n\n    /**\n     * Remove leading zeros from a formatted number\n     */\n    static removeLeadingZeros(formattedNumber) {\n        return String(Number(formattedNumber)); // Convert to number and back to string to remove leading zeros\n    }\n\n\n}","\n\n\nexport const A_CONSTANTS__ERROR_CODES = {\n    UNEXPECTED_ERROR: 'A-Error Unexpected Error',\n    VALIDATION_ERROR: 'A-Error Validation Error',\n} as const;\n\n\n\nexport const A_CONSTANTS__ERROR_DESCRIPTION = 'If you see this error please let us know.'","import {\n    A_TYPES__Error_Init,\n    A_TYPES__Error_Serialized\n} from './A_Error.types';\nimport {\n    A_CONSTANTS__ERROR_CODES,\n    A_CONSTANTS__ERROR_DESCRIPTION\n} from './A_Error.constants';\nimport { A_FormatterHelper } from '@adaas/a-concept/helpers/A_Formatter.helper';\nimport { A_Context } from '../A-Context/A-Context.class';\nimport { A_TypeGuards } from '@adaas/a-concept/helpers/A_TypeGuards.helper';\nimport { ASEID } from '../ASEID/ASEID.class';\nimport { A_CONSTANTS__DEFAULT_ENV_VARIABLES } from '@adaas/a-concept/constants/env.constants';\n\n\nexport class A_Error<\n    _ConstructorType extends A_TYPES__Error_Init = A_TYPES__Error_Init,\n    _SerializedType extends A_TYPES__Error_Serialized = A_TYPES__Error_Serialized\n> extends Error {\n    // ====================================================================\n    // ================== Static A-Error Information ======================\n    // ====================================================================\n    /**\n     * Error Identifier that corresponds to the class name\n     */\n    static get entity(): string {\n        return A_FormatterHelper.toKebabCase(this.name);\n    }\n    /**\n     * DEFAULT Namespace of the error from environment variable A_CONCEPT_NAMESPACE\n     * \n     * [!] If environment variable is not set, it will default to 'a-concept'\n     */\n    static get concept(): string {\n        return A_Context.concept;\n    }\n    /**\n     * DEFAULT Scope of the entity from environment variable A_CONCEPT_DEFAULT_SCOPE\n     * \n     * [!] If environment variable is not set, it will default to 'core'\n     * [!] Scope is an application specific identifier that can be used to group entities together\n     * [!] e.g. 'default', 'core', 'public', 'internal', etc\n     */\n    static get scope(): string {\n        return A_Context.root.name;\n    }\n\n    // ====================================================================\n    // ================== Hidden A-Error Information ======================\n    // ====================================================================\n    /**\n     * ASEID of the error instance\n     */\n    protected _aseid!: ASEID;\n    /**\n     * Title of the error\n     */\n    protected _title!: string;\n    /**\n     * Possible Scope if needed to identify the error by it's execution environment\n     */\n    protected _scope?: string;\n    /**\n     * Unique code representing the type of error\n     */\n    protected _code?: string;\n    /**\n     * Detailed description of the error\n     */\n    protected _description?: string;\n    /**\n     * Original Error if any\n     */\n    protected _originalError?: Error | any\n    /**\n     * Link to the documentation or support page for the error\n     */\n    protected _link?: string;\n\n\n\n    /**\n     * A_Error is a custom error class for A_Concept framework.\n     * This error allows to have more structured error handling.\n     * Each error has a unique code, description and a link to the documentation.\n     * \n     * Example of usage: \n     * ```typescript\n     * \n     * // 1) all parameters will be used as provided\n     * throw new A_Error({\n     *    message: 'User not found',\n     *    code: 'USER_NOT_FOUND',\n     *    description: 'The user with the given ID was not found.',\n     *    link: 'https://support.adaas.org/error/USER_NOT_FOUND'\n     * });\n     * \n     * // or\n     * // 2) only message is provided, other parameters will be set to default values:\n     * //     - code: 'user-not-found' (kebab-case of the message)\n     * //     - description: 'User not found' (same as message)\n     * //     - link: Empty\n     * throw new A_Error('User not found');\n     * \n     * // or\n     * // 3) Provided Message and Description, other parameters will be set to default values:\n     * //     - code: 'user-not-found' (kebab-case of the message)\n     * //     - description: 'The user with the given ID was not found.' (as provided)\n     * //     - link: Empty\n     * throw new A_Error('User not found', 'The user with the given ID was not found.');\n     * \n     * \n     * ```\n     * [!] Note: The behavior of A_Error is similar to the A_Entity however it cannot have own A_Features.\n     * [!] Note: This class can be inherited to create custom error classes.\n     * \n     * @param message \n     */\n    constructor(\n        /**\n         * A_Error Constructor params\n         */\n        params: _ConstructorType\n    )\n    constructor(\n        /**\n         * Error message\n         */\n        message: string\n    )\n    constructor(\n        /**\n         * Original JS Error\n         */\n        error: Error\n    )\n    constructor(\n        /**\n         * Error message\n         */\n        title: string,\n        /**\n         * Detailed description of the error\n         */\n        description: string\n    )\n    constructor(\n        param1: _ConstructorType | Error | string | A_Error,\n        param2?: string\n    ) {\n        //  to prevent errors accumulation in the stack trace it returns the original error if provided param1 is A_Error\n        switch (true) {\n            case param1 instanceof A_Error:\n                return param1 as A_Error<_ConstructorType, _SerializedType>;\n\n            case param1 instanceof Error:\n                super(param1.message);\n                break;\n\n            case A_TypeGuards.isConstructorType<_ConstructorType>(param1) && 'description' in param1:\n                super(`[${param1.title}]: ${param1.description}`);\n                break;\n\n            case A_TypeGuards.isConstructorType<_ConstructorType>(param1) && !('description' in param1):\n                super(param1.title);\n                break;\n\n            case A_TypeGuards.isString(param1) && !param2:\n                super(param1);\n                break;\n\n            case A_TypeGuards.isString(param1) && !!param2:\n                super(`[${param1}]: ${param2}`);\n                break;\n\n            default:\n                throw new A_Error(\n                    A_CONSTANTS__ERROR_CODES.VALIDATION_ERROR,\n                    'Invalid parameters provided to A_Error constructor'\n                );\n        }\n\n        const initializer = this.getInitializer(param1, param2);\n        // the returned initializer is already bound to `this` (we used .bind(this)),\n        // so calling it will run the appropriate logic on this instance:\n        initializer.call(this, param1, param2);\n    }\n\n\n\n    // ====================================================================\n    // ================== Public A-Error Information ======================\n    // ====================================================================\n    /**\n     * Returns the ASEID of the error instance\n     */\n    get aseid(): ASEID {\n        return this._aseid;\n    }\n    /**\n     * Returns the title of the error\n     * \n     * Example: 'User not found', 'Validation error', 'Unauthorized access', etc.\n     * \n     * [!] Note: This title should be short and concise, less than 60 characters\n     * [!] Note: If title exceeds 60 characters, there would be an error thrown\n     * [!] Note: This title is intended to be human-readable and can be displayed in UI or logs\n     */\n    get title(): string {\n        return this._title;\n    }\n    /**\n     * Returns an Error message what is a brief title of the error\n     * \n     */\n    get message(): string {\n        return super.message;\n    }\n    /**\n     * Returns a unique code representing the type of error\n     * \n     * If code is not provided, it will generate a kebab-case of the message\n     * \n     * Example: 'validation-error', 'not-found', 'user-not-found', 'unauthorized' etc.\n     * \n     * [!] Note: It is recommended to use kebab-case for error codes\n     * [!] Note: If not provided would be used a kebab-case message of the error\n     */\n    get code(): string {\n        return this._code || A_FormatterHelper.toKebabCase(this.title);\n    }\n    /**\n     * Returns the type of the error which corresponds to the static entity of the class\n     * \n     * Example: 'a-error', 'validation-error', 'not-found-error', 'user-error', etc.\n     * \n     * Defaults to the kebab-case of the class name\n     * \n     * [!] Note: naming ad separation are fully dependent on the architecture of the application\n     * [!] Note: It is recommended to use kebab-case for error types\n     * [!] Note: This type is intended to group similar errors together\n     */\n    get type() {\n        return (this.constructor as typeof A_Error).entity;\n    }\n    /**\n     * Returns a link with possible documentation or support page for the error\n     * If link is not provided, it will generate a link based on the ASEID of the error that points to the A-Concept support page\n     * \n     * Example: https://adaas.support/a-concept/errors/{ASEID}\n     * \n     * [!] Note: ASEID is generated based on the static properties of the class (concept, scope, entity) and the code of the error\n     */\n    get link() {\n        if (this._link)\n            return this._link;\n\n        const url = new URL(`https://adaas.support/a-concept/errors/${this.aseid.toString()}`);\n\n        return url.toString();\n    }\n    /**\n     * The scope name of the error instance\n     * \n     * If scope is not provided, it will use the static scope of the class\n     * \n     * [!] Note: Scope is an application specific identifier that can be used to group entities together\n     * [!] e.g. 'default', 'core', 'public', 'internal', etc\n     */\n    get scope() {\n        return this._aseid.scope\n    }\n    /**\n     * A detailed description of the error\n     * If description is not provided, it will use the environment variable A_ERROR_DEFAULT_DESCRIPTION or a generic message\n     * \n     * Example: 'The user with the given ID was not found.', 'The provided data is invalid.', 'You do not have permission to access this resource.', etc.\n     * \n     * [!] Note: This description is intended to provide more context about the error and can be used for debugging or logging purposes\n     */\n    get description(): string {\n        return this._description || process.env[A_CONSTANTS__DEFAULT_ENV_VARIABLES.A_ERROR_DEFAULT_DESCRIPTION] || A_CONSTANTS__ERROR_DESCRIPTION;\n    }\n    /**\n     * Returns the original error if any\n     * \n     * This can be useful for debugging purposes to see the original stack trace or error message\n     * \n     * [!] Note: Original error is optional and may not be present in all cases\n     */\n    get originalError(): Error | any | undefined {\n        return this._originalError;\n    }\n\n\n\n    /**\n     * Determines which initializer method to use based on the type of the first parameter.\n     * \n     * @param param1 \n     * @returns\n     */\n    protected getInitializer(\n        param1: _ConstructorType | Error | string | any,\n        param2?: string\n    ): (param1: any, param2: any) => void | (() => void) {\n        switch (true) {\n            case A_TypeGuards.isString(param1) && !param2:\n                return this.fromMessage;\n\n            case A_TypeGuards.isString(param1) && !!param2:\n                return this.fromTitle;\n\n            case param1 instanceof Error:\n                return this.fromError;\n\n\n            case A_TypeGuards.isConstructorType<_ConstructorType>(param1):\n                return this.fromConstructor;\n\n            default: {\n                console.log('INVALID PARAMS PROVIDED TO A_ERROR CONSTRUCTOR: ', param1);\n\n                throw new A_Error(\n                    A_CONSTANTS__ERROR_CODES.VALIDATION_ERROR,\n                    'Invalid parameters provided to A_Error constructor'\n                );\n            }\n        }\n    }\n\n    /**\n     * Initializes the A_Error instance from a standard Error object.\n     * \n     * @param error \n     */\n    protected fromError(error: Error): void {\n        this._title = A_CONSTANTS__ERROR_CODES.UNEXPECTED_ERROR;\n\n        this._aseid = new ASEID({\n            concept: (this.constructor as typeof A_Error).concept,\n            scope: (this.constructor as typeof A_Error).scope,\n            entity: (this.constructor as typeof A_Error).entity,\n            id: this.code\n        });\n\n        this._originalError = error;\n    }\n    /**\n     * Initializes the A_Error instance from a message.\n     * \n     * @param title \n     * @param description \n     */\n    protected fromMessage(message: string): void {\n        this._title = A_CONSTANTS__ERROR_CODES.UNEXPECTED_ERROR;\n\n        this._aseid = new ASEID({\n            concept: (this.constructor as typeof A_Error).concept,\n            scope: this._scope || (this.constructor as typeof A_Error).scope,\n            entity: (this.constructor as typeof A_Error).entity,\n            id: this.code\n        });\n\n        this._link = undefined;\n        this._originalError = undefined;\n    }\n\n\n    fromTitle(title: string, description: string): void {\n        this.validateTitle(title);\n\n        this._title = title;\n        this._description = description;\n\n        this._aseid = new ASEID({\n            concept: (this.constructor as typeof A_Error).concept,\n            scope: this._scope || (this.constructor as typeof A_Error).scope,\n            entity: (this.constructor as typeof A_Error).entity,\n            id: this.code\n        });\n\n        this._link = undefined;\n        this._originalError = undefined;\n    }\n    /**\n     * Initializes the A_Error instance from a constructor parameters object.\n     * \n     * @param params \n     */\n    protected fromConstructor(params: _ConstructorType): void {\n        this.validateTitle(params.title);\n\n        this._title = params.title;\n        this._code = params.code;\n        this._scope = params.scope ? (A_TypeGuards.isScopeInstance(params.scope) ? params.scope.name : params.scope) : undefined;\n\n        this._aseid = new ASEID({\n            concept: (this.constructor as typeof A_Error).concept,\n            scope: this._scope || (this.constructor as typeof A_Error).scope,\n            entity: (this.constructor as typeof A_Error).entity,\n            id: this.code\n        });\n\n        this._description = params.description;\n        this._link = params.link;\n        this._originalError = params.originalError;\n    }\n\n    /**\n     * Serializes the A_Error instance to a plain object.\n     * \n     * \n     * @returns \n     */\n    toJSON(): _SerializedType {\n        return {\n            aseid: this.aseid.toString(),\n            title: this.title,\n            code: this.code,\n            type: this.type,\n            message: this.message,\n            link: this.link,\n            scope: this.scope,\n            description: this.description,\n            originalError: this.originalError?.message\n        } as _SerializedType;\n    }\n\n\n\n    // --------------------------------------------------------------------------\n    // ----------------------- PROTECTED HELPERS --------------------------------\n    // --------------------------------------------------------------------------\n    /**\n     * Checks if the provided title exceeds 60 characters.\n     * If it does, throws a validation A_Error.\n     * \n     * @param title \n     */\n    protected validateTitle(title: string) {\n        if (title.length > 60) {\n            throw new A_Error(\n                A_CONSTANTS__ERROR_CODES.VALIDATION_ERROR,\n                'A-Error title exceeds 60 characters limit.'\n            );\n        }\n        if (title.length === 0) {\n            throw new A_Error(\n                A_CONSTANTS__ERROR_CODES.VALIDATION_ERROR,\n                'A-Error title cannot be empty.'\n            );\n        }\n    }\n}\n\n\n\n\n\n// message = title + description for better printing in the console\n// description = detailed information about the error\n// code = kebabcase (title)\n\n","import { A_Error } from \"../A-Error/A_Error.class\";\n\n\n\nexport class ASEID_Error extends A_Error {\n\n\n    static readonly ASEIDInitializationError = 'ASEID Initialization Error';\n    \n    static readonly ASEIDValidationError = 'ASEID Validation Error';\n\n}","import {\n    A_TYPES__ASEID_Constructor,\n    A_TYPES__ASEID_JSON\n} from \"./ASEID.types\";\nimport { A_IdentityHelper } from \"@adaas/a-concept/helpers/A_Identity.helper\";\nimport { A_TypeGuards } from \"@adaas/a-concept/helpers/A_TypeGuards.helper\";\nimport { A_Context } from \"../A-Context/A-Context.class\";\nimport { ASEID_Error } from \"./ASEID.error\";\nimport { A_TYPES__Required } from \"@adaas/a-concept/types/A_Common.types\";\n\n\n\nexport class ASEID {\n\n\n    //==========================================================================\n    //============================= STATIC METHODS ===========================\n    //==========================================================================\n    /**\n     * ASEID Regular Expression\n     */\n    static readonly regexp: RegExp = new RegExp(`^[a-z|A-Z|0-9|-]+@[a-z|A-Z|0-9|\\-]+:[a-z|A-Z|0-9|\\-]+:[a-z|A-Z|0-9|\\\\.|-]+(@v[0-9|\\\\.]+|@lts)?$`)\n    /**\n     * Tests if the identity string is an ASEID\n     * \n     * @param identity \n     * @returns \n     */\n    static isASEID(identity: string): boolean {\n        return this.regexp.test(identity)\n    }\n\n\n\n    // ====================================================================\n    // ==================== Hidden ASEID Information ======================\n    // ====================================================================\n    /**\n     * Concept for the ASEID\n     * Generally it is the application name or code, should correspond to the concept where the entity is used\n     * Could be ID or ASEID\n     */\n    private _concept!: string;\n    /**\n     * Entity Scope the primary location of the resource \n     * Organization, or organization Unit\n     * Could be ID or ASEID\n     * \n     */\n    private _scope!: string\n    /**\n     * Entity Type the type of the resource\n     */\n    private _entity!: string\n    /**\n     * Entity ID the unique identifier of the resource\n     */\n    private _id!: string\n    /**\n     * Version of the entity (optional)\n     */\n    private _version?: string\n    /**\n     * Shard of the entity (optional)\n     */\n    private _shard?: string\n\n\n\n\n\n\n    /**\n     * ASEID is a structured identifier for entities in the A-Concept system. \n     * using the format:\n     *  A - A-Concept\n     *  S - System \n     *  E - Entity\n     *  I - Identifier\n     *  D - iDentifier\n     * \n     * Structure: CONCEPT_NAME + @ + SCOPE + : ENTITY_NAME + : + ID + @ + VERSION \n     * \n     * Example:\n     *  - root@core:usr:0000000001\n     * \n     * [!] Concept is optional, if not provided will be used the current concept name\n     * [!] Scope is optional, if not provided will be used the root scope of the current concept\n     * [!] Version is optional, if not provided will be considered as latest version\n     * \n     * @param aseid - ASEID string representation or ASEID components as object\n     */\n    constructor(\n        /**\n         * ASEID string representation\n         */\n        aseid: string\n    )\n    constructor(\n        /**\n         * ASEID components as object \n         */\n        props: A_TYPES__Required<Partial<A_TYPES__ASEID_Constructor>, ['id', 'entity']>\n    )\n    constructor(param1: string | A_TYPES__Required<Partial<A_TYPES__ASEID_Constructor>, ['id', 'entity']>) {\n        this.verifyInput(param1);\n\n        const initializer = this.getInitializer(param1);\n        // the returned initializer is already bound to `this` (we used .bind(this)),\n        // so calling it will run the appropriate logic on this instance:\n        initializer.call(this, param1);\n    }\n\n    /**\n     * Getters for ASEID components\n     */\n    get concept(): string {\n        return this._concept || A_Context.concept;\n    }\n    /**\n     * Get the scope of the ASEID\n     */\n    get scope(): string {\n        return this._scope || A_Context.root.name;\n    }\n    /**\n     * Get the entity of the ASEID\n     */\n    get entity(): string {\n        return this._entity;\n    }\n    /**\n     * Get the id of the ASEID\n     */\n    get id(): string {\n        return this._id;\n    }\n    /**\n     * Get the version of the ASEID (if any)\n     */\n    get version(): string | undefined {\n        return this._version;\n    }\n    /**\n     * Get the shard of the ASEID (if any)\n     */\n    get shard(): string | undefined {\n        return this._shard;\n    }\n\n    /**\n     * get Internal Initializer based on the type of the parameter provided\n     * \n     * @param param1 \n     * @returns \n     */\n    private getInitializer(\n        param1: string | A_TYPES__Required<Partial<A_TYPES__ASEID_Constructor>, ['id', 'entity']>\n    ): (param1: any) => void | (() => void) {\n        switch (true) {\n            case A_TypeGuards.isString(param1):\n                return this.fromString;\n\n            case A_TypeGuards.isObject<A_TYPES__ASEID_Constructor>(param1):\n                return this.fromObject;\n\n            default:\n                throw new ASEID_Error(\n                    ASEID_Error.ASEIDInitializationError,\n                    'Invalid parameters provided to ASEID constructor'\n                );\n        }\n    }\n\n\n    /**\n     * Initialize ASEID from string\n     * \n     * @param param1 \n     */\n    private fromString(param1: string) {\n        const [concept, body, version] = param1.split('@');\n        const [scope, entity, idCandidate] = body.split(':');\n\n        const shard = idCandidate.includes('.') ? idCandidate.split('.')[0] : undefined;\n        const id = idCandidate.includes('.') ? idCandidate.split('.')[1] : idCandidate;\n\n        this._concept = concept || A_Context.root.name;\n        this._scope = scope || A_Context.root.name;\n        this._entity = entity;\n        this._id = id;\n        this._version = version;\n        this._shard = shard;\n    }\n    /**\n     * Initialize ASEID from object\n     * \n     * @param param1 \n     */\n    private fromObject(param1: A_TYPES__Required<Partial<A_TYPES__ASEID_Constructor>, ['id', 'entity']>) {\n        this._concept = param1.concept\n            ? ASEID.isASEID(param1.concept)\n                ? new ASEID(param1.concept).id\n                : param1.concept\n            : A_Context.concept;\n\n        this._scope = param1.scope\n            ? A_TypeGuards.isNumber(param1.scope)\n                ? A_IdentityHelper.formatWithLeadingZeros(param1.scope) :\n                ASEID.isASEID(param1.scope)\n                    ? new ASEID(param1.scope).id\n                    : param1.scope\n            : A_Context.root.name\n\n        this._entity = param1.entity;\n\n        this._id = A_TypeGuards.isNumber(param1.id)\n            ? A_IdentityHelper.formatWithLeadingZeros(param1.id)\n            : param1.id;\n\n        this._version = param1.version;\n        this._shard = param1.shard;\n    }\n\n\n    /**\n     * String representation of the ASEID\n     * \n     * @returns \n     */\n    toString(): string {\n        return `${this.concept}@${this.scope}:${this.entity}:${this.shard ? (this.shard + '.' + this.id) : this.id}${this.version ? ('@' + this.version) : ''}`\n    }\n\n    /**\n     * JSON representation of the ASEID\n     * \n     * @returns \n     */\n    toJSON(): A_TYPES__ASEID_JSON {\n        return {\n            concept: this._concept,\n            scope: this._scope,\n            entity: this._entity,\n            id: this._id,\n            version: this._version,\n            shard: this._shard\n        }\n    }\n\n    // --------------------------------------------------------------------------\n    // ----------------------- PROTECTED HELPERS --------------------------------\n    // --------------------------------------------------------------------------\n\n\n    protected verifyInput(param1: string | A_TYPES__Required<Partial<A_TYPES__ASEID_Constructor>, ['id', 'entity']>) {\n\n        switch (true) {\n            // 1) check for string and validate it as ASEID\n            case A_TypeGuards.isString(param1) && !ASEID.isASEID(param1):\n                throw new ASEID_Error(ASEID_Error.ASEIDValidationError, 'Invalid ASEID format provided')\n\n            // 2) check for object and validate required fields\n            case A_TypeGuards.isObject<A_TYPES__ASEID_Constructor>(param1) && !param1.id:\n                throw new ASEID_Error(ASEID_Error.ASEIDValidationError, 'ASEID id is required')\n\n            // 3) check for object and validate required fields\n            case A_TypeGuards.isObject<A_TYPES__ASEID_Constructor>(param1) && !param1.entity:\n                throw new ASEID_Error(ASEID_Error.ASEIDValidationError, 'ASEID entity is required')\n\n        }\n    }\n}","import { A_Error } from \"../A-Error/A_Error.class\";\n\n\n\nexport class A_Entity_Error extends A_Error {\n\n    /**\n     * Error code for validation errors.\n     */\n    static readonly ValidationError = 'A-Entity Validation Error';\n\n}","import {\n    A_TYPES__Entity_Serialized,\n    A_TYPES__Entity_Init,\n    A_TYPES__IEntity,\n} from \"./A-Entity.types\";\nimport { A_Context } from \"../A-Context/A-Context.class\";\nimport { A_Scope } from \"../A-Scope/A-Scope.class\";\nimport { A_FormatterHelper } from \"@adaas/a-concept/helpers/A_Formatter.helper\";\nimport { ASEID } from \"../ASEID/ASEID.class\";\nimport { A_IdentityHelper } from \"@adaas/a-concept/helpers/A_Identity.helper\";\nimport { A_Entity_Error } from \"./A-Entity.error\";\nimport { A_Feature } from \"../A-Feature/A-Feature.class\";\n\n\n/**\n * A_Entity is another abstraction that describes all major participants in the system business logic.\n * Each Entity should have a clear definition and a clear set of responsibilities. \n * However, entity may hide some of its responsibilities behind the interface to prevent overload. \n * \n * Each entity should be connected to the ContextFragment (Scope) and should be able to communicate with other entities.\n */\nexport class A_Entity<\n    _ConstructorType extends A_TYPES__Entity_Init = A_TYPES__Entity_Init,\n    _SerializedType extends A_TYPES__Entity_Serialized = A_TYPES__Entity_Serialized\n>\n    implements A_TYPES__IEntity {\n\n    // ====================================================================\n    // ================== Static A-Entity Information ============================\n    // ====================================================================\n    /**\n     * Entity Identifier that corresponds to the class name\n     */\n    static get entity(): string {\n        return A_FormatterHelper.toKebabCase(this.name);\n    }\n    /**\n     * DEFAULT Concept Name (Application Name) of the entity from environment variable A_CONCEPT_NAME\n     * [!] If environment variable is not set, it will default to 'a-concept'\n     */\n    static get concept(): string {\n        return A_Context.concept;\n    }\n    /**\n     * DEFAULT Scope of the entity from environment variable A_CONCEPT_DEFAULT_SCOPE\n     * [!] If environment variable is not set, it will default to 'core'\n     * [!] Scope is an application specific identifier that can be used to group entities together\n     * [!] e.g. 'default', 'core', 'public', 'internal', etc\n     */\n    static get scope(): string {\n        return A_Context.root.name;\n    }\n\n\n\n    // ====================================================================\n    // ================== Instance A-Entity Information ====================\n    // ====================================================================\n\n    /**\n     * ASEID is an entity identifier that is unique across the system\n     * A - A_Concept or Application\n     * S - System or Scope\n     * E - Entity\n     * ID - Identifier\n     * \n     * [!] ASEID is immutable and should not be changed after the entity is created\n     * \n     * [!] ASEID is composed of the following parts:\n     * - concept: an application specific identifier from where the entity is coming from\n     * - scope: the scope of the entity from concept\n     * - entity: the name of the entity from concept\n     * - id: the unique identifier of the entity\n     *\n     * [!] For more information about ASEID, please refer to the ASEID class documentation]\n     */\n    aseid!: ASEID;\n\n\n\n    /**\n     * Create a new A_entity instance from Aseid String\n     * e.g. project@scope:entity:0000000001\n     * \n     * @param aseid \n     */\n    constructor(\n        /**\n         * ASEID string that represents the entity\n         */\n        aseid?: string\n    )\n    /**\n     * Create a new A_entity instance from Aseid instance\n     * e.g. new ASEID({concept: 'project', scope: 'default', entity: 'entity', id: '0000000001'})\n     * \n     * @param aseid \n     */\n    constructor(\n        /**\n         * ASEID instance that represents the entity\n         */\n        aseid: ASEID\n    )\n    /**\n     * Create a new A_entity instance from serialized object\n     * \n     * @param serialized \n     */\n    constructor(\n        /**\n         * Serialized object that represents the entity\n         */\n        serialized: _SerializedType\n    )\n    /**\n     * Create a new A_entity instance from constructor object\n     * \n     * @param newEntity \n     */\n    constructor(\n        /**\n         * Constructor object that represents the entity\n         */\n        newEntity?: _ConstructorType\n    )\n    constructor(props?: string | ASEID | _SerializedType | _ConstructorType) {\n\n        const initializer = this.getInitializer(props);\n        // the returned initializer is already bound to `this` (we used .bind(this)),\n        // so calling it will run the appropriate logic on this instance:\n        initializer.call(this, props);\n    }\n    // ====================================================================\n    // ================== DUPLICATED ASEID Getters ========================\n    // ====================================================================\n\n    /**\n     * Extracts the ID from the ASEID\n     * ID is the unique identifier of the entity\n     */\n    get id(): string | number {\n        return this.aseid.id;\n    }\n\n    // ====================================================================\n    // ================== Constructor Helpers =============================\n    // ====================================================================\n\n\n    // --- Type guards used to classify `props` properly ---\n    protected isStringASEID(x: unknown): x is string {\n        return typeof x === \"string\" && ASEID.isASEID(x);\n    }\n\n    protected isASEIDInstance(x: unknown): x is ASEID {\n        return x instanceof ASEID;\n    }\n\n    /**\n     * A \"serialized\" object is considered such if it is a non-null object \n     * and contains an \"aseid\" property (this mirrors your original check). \n     * \n     * @param x \n     * @returns \n     */\n    protected isSerializedObject(x: unknown): x is _SerializedType {\n        return !!x && typeof x === \"object\" && \"aseid\" in (x as object);\n    }\n\n    /**\n     * Constructor-style props = a plain object which does NOT contain \"aseid\".\n     * This is the \"create from provided fields\" case.\n     * \n     * @param x \n     * @returns \n     */\n    protected isConstructorProps(x: unknown): x is _ConstructorType {\n        return !!x && typeof x === \"object\" && !(\"aseid\" in (x as object));\n    }\n\n    /**\n     * Determines the appropriate initializer method based on the type of `props`.\n     * The method checks if `props` is:  \n     * 1) a string that matches ASEID format -> fromASEID\n     * 2) an ASEID instance -> fromASEID\n     * 3) a serialized object (has 'aseid') -> fromJSON\n     * 4) a plain object with no 'aseid' -> treat as constructor props -> fromNew\n     * \n     * [!] If `props` is undefined, it will call fromUndefined method\n     * \n     * If none of the above, it throws an error indicating incorrect constructor usage.\n     * \n     * \n     * To get a custom initializer, override this method in the child class.\n     * Example:\n     * ```typescript\n     * protected getInitializer(\n     *   props?: string | ASEID | _SerializedType | _ConstructorType\n     * ): (props: any) => void | (() => void) {\n     *   if('customField' in props) {\n     *       return this.fromCustomField.bind(this);\n     *   }\n     *   return super.getInitializer(props);\n     * }\n     * ```\n     * @param props\n     * @returns The appropriate initializer method\n     */\n    protected getInitializer(\n        props?: string | ASEID | _SerializedType | _ConstructorType\n    ): (props: any) => void | (() => void) {\n\n        if (!props) {\n            return this.fromUndefined\n        }\n\n        // 1) string that matches ASEID format -> fromASEID\n        if (this.isStringASEID(props)) {\n            return this.fromASEID as (p: string) => void;\n        }\n\n        // 2) ASEID instance -> fromASEID\n        if (this.isASEIDInstance(props)) {\n            return this.fromASEID as (p: ASEID) => void;\n        }\n\n        // 3) serialized object (has 'aseid') -> fromJSON\n        if (this.isSerializedObject(props)) {\n            return this.fromJSON as (p: _SerializedType) => void;\n        }\n\n        // 4) plain object with no 'aseid' -> treat as constructor props -> fromNew\n        if (this.isConstructorProps(props)) {\n            return this.fromNew as (p: _ConstructorType) => void;\n        }\n\n        // none of the above -> throw consistent error\n        throw new A_Entity_Error(A_Entity_Error.ValidationError, 'Unable to determine A-Entity constructor initialization method. Please check the provided parameters.');\n    }\n\n\n    /**\n     * Call a feature of the component with the provided scope\n     * \n     * [!] If the provided scope is not inherited from the entity scope, it will be inherited\n     * \n     * @param lifecycleMethod \n     * @param args \n     */\n    async call(\n        feature: string,\n        scope?: A_Scope\n    ) {\n        const newFeature = new A_Feature({\n            name: feature,\n            component: this,\n            scope\n        });\n\n        return await newFeature.process(scope);\n    }\n\n\n    // ====================================================================\n    // ================== Entity Base Methods =============================\n    // ====================================================================\n\n    /**\n     * The default method that can be called and extended to load entity data.\n     */\n    async load(\n        scope?: A_Scope,\n    ) {\n        return this.call('load', scope);\n    }\n\n    /**\n     * The default method that can be called and extended to destroy entity data.\n     */\n    async destroy(scope?: A_Scope) {\n        return this.call('destroy', scope);\n    }\n\n    /**\n     * The default method that can be called and extended to save entity data.\n     */\n    async save(scope?: A_Scope) {\n        return this.call('save', scope);\n    }\n\n\n\n    // ====================================================================\n    // ================== Entity Serialization ============================\n    // ====================================================================\n\n    /**\n     * Create a new entity from ASEID string or instance\n     * [!] Executed when the constructor is called with a string or ASEID instance that represents the ASEID\n     * [!] Executes By Default with new A_Entity('aseid-string') or new A_Entity(new ASEID(...)) if getInitializer has not been overridden\n     * \n     * @param aseid \n     */\n    fromASEID(aseid: string | ASEID): void {\n        if (aseid instanceof ASEID)\n            this.aseid = aseid;\n        else\n            this.aseid = new ASEID(aseid);\n    }\n\n    /**\n     * Handles the case when no props are provided to the constructor.\n     * This method can be overridden in child classes to set default values or perform specific initialization logic.\n     * By default, it does nothing.\n     * \n     * \n     * @returns \n     */\n    fromUndefined(): void {\n        this.aseid = new ASEID({\n            concept: (this.constructor as typeof A_Entity).concept,\n            scope: (this.constructor as typeof A_Entity).scope,\n            entity: (this.constructor as typeof A_Entity).entity,\n            id: A_IdentityHelper.generateTimeId()\n        });\n        return;\n    }\n\n    /**\n     * Create a new entity from constructor object\n     * [!] Executed when the constructor is called with an object that does not contain \"aseid\" property\n     * [!] Executes By Default with new A_Entity({}) if getInitializer has not been overridden\n     * \n     * @param newEntity \n     * @returns \n     */\n    fromNew(newEntity: _ConstructorType): void {\n        this.aseid = new ASEID({\n            concept: (this.constructor as typeof A_Entity).concept,\n            scope: (this.constructor as typeof A_Entity).scope,\n            entity: (this.constructor as typeof A_Entity).entity,\n            id: A_IdentityHelper.generateTimeId()\n        });\n\n        return;\n    }\n\n\n    /**\n     * Creates a new entity from serialized object\n     * \n     * [!] Executed when the constructor is called with an object that contains \"aseid\" property\n     * [!] Executes By Default with new A_Entity({ aseid: '...' }) if getInitializer has not been overridden\n     * \n     * \n     * @param serialized \n     * @returns \n     */\n    fromJSON(serialized: _SerializedType): void {\n        this.aseid = new ASEID(serialized.aseid);\n        return;\n    }\n\n\n\n    /**\n     * Converts the entity to a JSON object \n     * [!] This method should be extended in the child classes to include all properties of the entity\n     * [!] Includes aseid by default \n     * \n     * \n     * @returns \n     */\n    toJSON(): _SerializedType {\n        return {\n            aseid: this.aseid.toString()\n        } as _SerializedType;\n    }\n\n\n    /**\n     * Returns the string representation of the entity\n     * what is basically the ASEID string\n     * \n     * @returns \n     */\n    toString(): string {\n        return this.aseid ? this.aseid.toString() : this.constructor.name;\n    }\n}","import { A_Meta } from \"../A-Meta/A-Meta.class\";\nimport { A_TYPES__EntityMeta } from \"./A-Entity.types\";\nimport { A_TYPES__EntityMetaKey } from \"./A-Entity.constants\";\nimport { A_TYPES__FeatureDefineDecoratorMeta } from \"../A-Feature/A-Feature.types\";\n\n\nexport class A_EntityMeta extends A_Meta<A_TYPES__EntityMeta> {\n\n    /**\n     * Returns all features defined in the Container\n     * \n     * @returns \n     */\n    features(): Array<A_TYPES__FeatureDefineDecoratorMeta> {\n\n        const features = this.get(A_TYPES__EntityMetaKey.FEATURES);\n\n        return features?.toArray()\n            // returns all extensions that match the feature\n            .map(([, feature]) => feature) || [];\n    }\n\n}","import { A_TYPES__DeepPartial } from \"@adaas/a-concept/types/A_Common.types\";\nimport { A_Meta } from \"../A-Meta/A-Meta.class\";\nimport { A_TYPES__Fragment_Init, A_TYPES__Fragment_Serialized } from \"./A-Fragment.types\";\n\n\n/**\n * A_Fragment is a core architectural component that represents a singleton execution context\n * within the A-Concept framework. It serves as a shared memory container that can be passed\n * between Components, Entities, and Commands throughout the application pipeline.\n * \n * Key Features:\n * - Singleton pattern: Only one instance per fragment type per scope\n * - Meta storage: Built-in key-value storage for pipeline data\n * - Type-safe: Full TypeScript generics support for meta items and serialization\n * - Serializable: Can be converted to JSON for persistence or transmission\n * \n * @template _MetaItems - Type definition for the meta storage structure\n * @template _SerializedType - Type definition for the serialized output format\n * \n * @example\n * ```typescript\n * // Basic usage with typed meta\n * class UserFragment extends A_Fragment<{ userId: string; role: string }> {\n *   constructor() {\n *     super({ name: 'UserFragment' });\n *   }\n * }\n * \n * // Custom serialization\n * class SessionFragment extends A_Fragment<\n *   { sessionId: string; timestamp: number },\n *   { name: string; sessionData: string }\n * > {\n *   toJSON() {\n *     return {\n *       name: this.name,\n *       sessionData: `${this.get('sessionId')}-${this.get('timestamp')}`\n *     };\n *   }\n * }\n * ```\n */\nexport class A_Fragment<\n    _MetaItems extends Record<string, any> = any,\n    _SerializedType extends A_TYPES__Fragment_Serialized = A_TYPES__Fragment_Serialized & _MetaItems\n> {\n    /**\n     * The unique identifier/name for this fragment instance.\n     * Used for identification and debugging purposes.\n     */\n    protected _name: string;\n\n    /**\n     * Internal meta storage using A_Meta for type-safe key-value operations.\n     * This stores all the fragment's runtime data that can be accessed and modified\n     * throughout the execution pipeline.\n     */\n    protected _meta: A_Meta<_MetaItems> = new A_Meta<_MetaItems>();\n\n\n    /**\n     * Creates a new A_Fragment instance.\n     * \n     * A_Fragment implements the singleton pattern for execution contexts, allowing\n     * shared state management across different parts of the application pipeline.\n     * Each fragment serves as a memory container that can store typed data and be\n     * serialized for persistence or transmission.\n     * \n     * Key Benefits:\n     * - Centralized state management for related operations\n     * - Type-safe meta operations with full IntelliSense support\n     * - Serialization support for data persistence\n     * - Singleton pattern ensures consistent state within scope\n     * \n     * @param params - Initialization parameters\n     * @param params.name - Optional custom name for the fragment (defaults to class name)\n     * \n     * @example\n     * ```typescript\n     * const fragment = new A_Fragment<{ userId: string }>({ \n     *   name: 'UserSessionFragment' \n     * });\n     * fragment.set('userId', '12345');\n     * ```\n     */\n    constructor(params: Partial<A_TYPES__Fragment_Init> = {}) {\n        this._name = params.name || this.constructor.name;\n    }\n\n    /**\n     * Gets the fragment's unique name/identifier.\n     * \n     * @returns The fragment name\n     */\n    get name(): string {\n        return this._name;\n    }\n\n    /**\n     * Gets direct access to the underlying Meta object for advanced meta operations.\n     * \n     * Use this when you need to perform bulk operations or access Meta-specific methods.\n     * For simple get/set operations, prefer using the direct methods on the fragment.\n     * \n     * @returns The Meta instance containing the fragment's meta\n     * \n     * @example\n     * ```typescript\n     * const fragment = new A_Fragment<{ users: string[], count: number }>();\n     * \n     * // Advanced operations using meta\n     * fragment.meta.setMultiple({\n     *   users: ['alice', 'bob'],\n     *   count: 2\n     * });\n     * \n     * // Get all keys\n     * const keys = fragment.meta.keys();\n     * ```\n     */\n    get meta(): A_Meta<_MetaItems> {\n        return this._meta;\n    }\n\n    /**\n     * Checks if a specific meta key exists in the fragment.\n     * \n     * @param param - The key to check for existence\n     * @returns True if the key exists, false otherwise\n     * \n     * @example\n     * ```typescript\n     * if (fragment.has('userId')) {\n     *   console.log('User ID is set');\n     * }\n     * ```\n     */\n    has(param: keyof _MetaItems): boolean {\n        return this._meta.has(param);\n    }\n\n    /**\n     * Retrieves a value from the fragment's meta.\n     * \n     * @param param - The key to retrieve\n     * @returns The value associated with the key, or undefined if not found\n     * \n     * @example\n     * ```typescript\n     * const userId = fragment.get('userId');\n     * if (userId) {\n     *   console.log(`Current user: ${userId}`);\n     * }\n     * ```\n     */\n    get<K extends keyof _MetaItems>(param: K): _MetaItems[K] | undefined {\n        return this._meta.get(param);\n    }\n\n    /**\n     * Stores a value in the fragment's meta.\n     * \n     * @param param - The key to store the value under\n     * @param value - The value to store\n     * \n     * @example\n     * ```typescript\n     * fragment.set('userId', '12345');\n     * fragment.set('role', 'admin');\n     * ```\n     */\n    set<K extends keyof _MetaItems>(param: K, value: _MetaItems[K]): void {\n        this._meta.set(param, value);\n    }\n\n    /**\n     * Removes a specific key from the fragment's meta.\n     * \n     * @param param - The key to remove\n     * \n     * @example\n     * ```typescript\n     * fragment.drop('temporaryData');\n     * ```\n     */\n    drop(param: keyof _MetaItems): void {\n        this._meta.delete(param);\n    }\n\n    /**\n     * Clears all data from the fragment's meta.\n     * \n     * Use with caution as this will remove all stored data in the fragment.\n     * \n     * @example\n     * ```typescript\n     * fragment.clear(); // All meta data is now gone\n     * ```\n     */\n    clear(): void {\n        this._meta.clear();\n    }\n\n    /**\n     * Gets the number of items stored in the fragment's meta.\n     * \n     * @returns The count of stored meta items\n     * \n     * @example\n     * ```typescript\n     * console.log(`Fragment contains ${fragment.size()} items`);\n     * ```\n     */\n    size(): number {\n        return this._meta.size();\n    }\n\n    /**\n     * Gets all keys currently stored in the fragment's meta.\n     * \n     * @returns Array of all meta keys\n     * \n     * @example\n     * ```typescript\n     * const keys = fragment.keys();\n     * console.log('Stored keys:', keys);\n     * ```\n     */\n    keys(): (keyof _MetaItems)[] {\n        return this._meta.toArray().map(([key]) => key);\n    }\n\n    /**\n     * Sets multiple values at once in the fragment's meta.\n     * \n     * @param data - Object containing key-value pairs to set\n     * \n     * @example\n     * ```typescript\n     * fragment.setMultiple({\n     *   userId: '12345',\n     *   role: 'admin',\n     *   lastLogin: new Date()\n     * });\n     * ```\n     */\n    setMultiple(data: A_TYPES__DeepPartial<_MetaItems>): void {\n        Object.entries(data).forEach(([key, value]) => {\n            if (value !== undefined) {\n                this._meta.set(key as keyof _MetaItems, value);\n            }\n        });\n    }\n\n    /**\n     * Creates a shallow copy of the fragment with the same meta data.\n     * \n     * @param newName - Optional new name for the cloned fragment\n     * @returns A new fragment instance with copied meta\n     * \n     * @example\n     * ```typescript\n     * const original = new A_Fragment<{ data: string }>({ name: 'original' });\n     * original.set('data', 'test');\n     * \n     * const clone = original.clone('cloned');\n     * console.log(clone.get('data')); // 'test'\n     * ```\n     */\n    clone(newName?: string): A_Fragment<_MetaItems, _SerializedType> {\n        const cloned = new (this.constructor as any)({ \n            name: newName || `${this._name}_copy` \n        });\n        \n        // Copy all meta data\n        this._meta.toArray().forEach(([key, value]) => {\n            cloned.set(key, value);\n        });\n        \n        return cloned;\n    }\n\n\n    /**\n     * Serializes the fragment to a JSON-compatible object.\n     * \n     * This method combines the fragment's name with all meta data to create\n     * a serializable representation. The return type is determined by the\n     * _SerializedType generic parameter, allowing for custom serialization formats.\n     * \n     * @returns A serialized representation of the fragment\n     * \n     * @example\n     * ```typescript\n     * const fragment = new A_Fragment<{ userId: string, role: string }>({\n     *   name: 'UserFragment'\n     * });\n     * fragment.set('userId', '12345');\n     * fragment.set('role', 'admin');\n     * \n     * const json = fragment.toJSON();\n     * // Result: { name: 'UserFragment', userId: '12345', role: 'admin' }\n     * ```\n     */\n    toJSON(): _SerializedType {\n        const result = {\n            name: this.name,\n\n            ...this.meta.toArray().reduce((acc, [key, value]) => {\n                acc[key] = value;\n                return acc;\n            }, {} as _MetaItems)\n        };\n\n        return result as unknown as _SerializedType;\n    }\n}","import { A_TYPES__DeepPartial } from \"../types/A_Common.types\";\n\nexport class A_CommonHelper {\n\n    /**\n     * A simple promise that resolves immediately.\n     * Can be used in async functions to create a resolved promise.\n     */\n    static resolve() {\n        return new Promise<void>((resolve) => resolve());\n    }\n\n    /**\n     * Check if a class is inherited from another class\n     * \n     * @param childClass \n     * @param parentClass \n     * @returns \n     */\n    static isInheritedFrom(childClass: any, parentClass: any): boolean {\n        let current = childClass;\n\n        // Traverse the prototype chain\n        while (current) {\n            if (current === parentClass) {\n                return true;\n            }\n            current = Object.getPrototypeOf(current);\n        }\n        return false;\n    }\n\n    /**\n     *  Omit properties from an object or array with nested objects\n     * \n     * @param input \n     * @param paths \n     * @returns \n     */\n    static omitProperties<T, S extends string>(\n        input: T,\n        paths: string[]\n\n    ): Omit<T, S> {\n\n        // Deep clone the input object or array\n        const result = JSON.parse(JSON.stringify(input));\n\n        // Helper function to recursively remove properties\n        function removeProperties(target: Record<string, any> | any[], currPath: string[]) {\n            const currKey = currPath[0];\n            if (currPath.length === 1) {\n                // If current path has only one key, delete the property\n                delete target[currKey];\n            } else if (target[currKey] !== undefined && typeof target[currKey] === 'object') {\n                // If current key exists and is an object, recursively call removeProperties\n                removeProperties(target[currKey], currPath.slice(1));\n            }\n        }\n\n        // Iterate through each path and remove corresponding properties from the result\n        paths.forEach(path => {\n            const pathKeys = path.split('.');\n            removeProperties(result, pathKeys);\n        });\n\n        return result as Omit<T, S>;\n    }\n\n\n    static isObject(item: unknown): item is Record<string, any> {\n        return item !== null && typeof item === 'object' && !Array.isArray(item);\n    }\n\n    static deepMerge<T = any>(target: any, source: any, visited = new Map<any, any>()): T {\n        if (this.isObject(target) && this.isObject(source)) {\n            for (const key in source) {\n                if (this.isObject(source[key])) {\n                    if (!target[key]) {\n                        target[key] = {};\n                    }\n                    // Check if the source object has already been visited\n                    if (!visited.has(source[key])) {\n                        visited.set(source[key], {});\n                        this.deepMerge(target[key], source[key], visited);\n                    } else {\n                        target[key] = visited.get(source[key]);\n                    }\n                } else {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    }\n\n\n    static deepClone<T>(target: T): T {\n        // Check if the value is null or undefined\n        if (target === null || target === undefined) {\n            return target;\n        }\n\n        // Handle primitive types (string, number, boolean, etc.)\n        if (typeof target !== 'object') {\n            return target;\n        }\n\n        // Handle Date\n        if (target instanceof Date) {\n            return new Date(target.getTime()) as T;\n        }\n\n        // Handle Array\n        if (Array.isArray(target)) {\n            return target.map(item => this.deepClone(item)) as unknown as T;\n        }\n\n        // Handle Function\n        if (typeof target === 'function') {\n            return target;\n        }\n\n        // Handle Object\n        if (target instanceof Object) {\n            const clone = {} as T;\n            for (const key in target) {\n                if (target.hasOwnProperty(key)) {\n                    clone[key] = this.deepClone(target[key]);\n                }\n            }\n            return clone;\n        }\n\n        // For any other cases\n        throw new Error('Unable to clone the object. Unsupported type.');\n    }\n\n\n    static deepCloneAndMerge<T>(target: A_TYPES__DeepPartial<T>, source: T): T {\n        if (\n            (source === null || source === undefined) &&\n            (target === null || target === undefined))\n            return target;\n\n        // Check if the value is null or undefined\n        if ((target === null || target === undefined) &&\n            source\n        ) {\n            return this.deepClone(source);\n        }\n\n        // Handle primitive types (string, number, boolean, etc.)\n        if (typeof target !== 'object') {\n            return target\n        }\n\n\n        // Handle Date\n        if (target instanceof Date) {\n            return new Date(target.getTime()) as T;\n        }\n\n        // Handle Array\n        if (Array.isArray(target)) {\n            return target.map(item => this.deepCloneAndMerge(item, source)) as unknown as T;\n        }\n\n        // Handle Function\n        if (typeof target === 'function') {\n            return target;\n        }\n\n        // Handle Object\n        if (target instanceof Object) {\n            const clone = {} as T;\n            for (const key in target) {\n                if (\n                    source[key] !== null\n                    &&\n                    source[key] !== undefined\n                )\n                    clone[key] = this.deepCloneAndMerge(target[key as any], source[key]);\n                else\n                    clone[key as any] = this.deepClone(target[key]);\n            }\n\n            for (const key in source) {\n                if (\n                    target[key] !== undefined\n                    &&\n                    target[key] !== null\n                )\n                    clone[key] = this.deepCloneAndMerge(target[key], source[key]);\n                else\n                    clone[key] = this.deepClone(source[key]);\n            }\n            return clone;\n        }\n\n        // For any other cases\n        throw new Error('Unable to clone the object. Unsupported type.');\n    }\n\n    /**\n     * Get a readable name for a component (string, class, function, React element, instance, etc.)\n     *\n     * Covers:\n     * - string tags (\"div\")\n     * - symbols (Symbol.for('xxx'))\n     * - functions and classes (with name or displayName)\n     * - React elements (object with `type`)\n     * - component instances (constructor.name)\n     * - objects with custom toString returning meaningful info\n     *\n     * Falls back to sensible defaults (\"Unknown\" / \"Anonymous\").\n     */\n    static getComponentName(component: any): string {\n        const UNKNOWN = 'Unknown';\n        const ANONYMOUS = 'Anonymous';\n\n        if (component === null || component === undefined) {\n            return UNKNOWN;\n        }\n\n        // Strings (HTML tags or explicit names)\n        if (typeof component === 'string') {\n            return component || UNKNOWN;\n        }\n\n        // Symbols\n        if (typeof component === 'symbol') {\n            try {\n                return component.toString();\n            } catch {\n                return UNKNOWN;\n            }\n        }\n\n        // Arrays - try to derive from first element\n        if (Array.isArray(component)) {\n            if (component.length === 0) return UNKNOWN;\n            return this.getComponentName(component[0]);\n        }\n\n        // Functions and classes\n        if (typeof component === 'function') {\n            const fnAny = component as any;\n            // Common React convention\n            if (fnAny.displayName) return String(fnAny.displayName);\n            if (fnAny.name) return String(fnAny.name);\n\n            // Try to extract a name from source if possible\n            try {\n                const src = Function.prototype.toString.call(component);\n                // class Foo { ... } or function foo() { ... } or foo => ...\n                const match = src.match(/^(?:class\\s+([A-Za-z0-9_$]+)|function\\s+([A-Za-z0-9_$]+)|([A-Za-z0-9_$]+)\\s*=>)/);\n                if (match) {\n                    return match[1] || match[2] || match[3] || ANONYMOUS;\n                }\n            } catch {\n                // fallthrough\n            }\n            return ANONYMOUS;\n        }\n\n        // Objects (instances, React elements, plain objects)\n        if (typeof component === 'object') {\n            const objAny = component as any;\n\n            // React element: { type: ComponentOrString, props: ... }\n            if (objAny.type) {\n                return this.getComponentName(objAny.type);\n            }\n\n            // React forwardRef / memo wrappers often expose displayName\n            if (objAny.displayName) return String(objAny.displayName);\n            if (objAny.name) return String(objAny.name);\n\n            // Instance: use constructor name if available and not Object\n            if (objAny.constructor && objAny.constructor.name && objAny.constructor.name !== 'Object') {\n                return String(objAny.constructor.name);\n            }\n\n            // If object implements a meaningful toString, try it\n            try {\n                const s = objAny.toString();\n                if (typeof s === 'string' && s !== '[object Object]') {\n                    return s;\n                }\n            } catch {\n                // ignore\n            }\n\n            return ANONYMOUS;\n        }\n\n        // Fallback for other types\n        try {\n            return String(component);\n        } catch {\n            return UNKNOWN;\n        }\n    }\n}","import { A_Error } from \"../A-Error/A_Error.class\";\n\nexport class A_ScopeError extends A_Error {\n\n\n    static readonly InitializationError = 'A-Scope Initialization Error';\n\n    static readonly ConstructorError = 'Unable to construct A-Scope instance';\n\n    static readonly ResolutionError = 'A-Scope Resolution Error';\n\n    static readonly RegistrationError = 'A-Scope Registration Error';\n\n    static readonly CircularInheritanceError = 'A-Scope Circular Inheritance Error';\n\n}","import {\n    A_TYPES__ScopeConfig,\n    A_TYPES__Scope_Init,\n    A_TYPES__ScopeLinkedComponents,\n    A_TYPES__ScopeResolvableComponents,\n    A_TYPES__Scope_Constructor,\n    A_TYPES__ScopeLinkedConstructors\n} from './A-Scope.types'\nimport {\n    A_TYPES__A_InjectDecorator_EntityInjectionInstructions,\n    A_TYPES__A_InjectDecorator_EntityInjectionQuery,\n    A_TYPES__InjectableConstructors,\n    A_TYPES__InjectableTargets,\n} from \"@adaas/a-concept/global/A-Inject/A-Inject.types\";\nimport { A_Fragment } from \"../A-Fragment/A-Fragment.class\";\nimport { A_Context } from \"../A-Context/A-Context.class\";\nimport { A_Component } from \"../A-Component/A-Component.class\";\nimport { A_Entity } from \"../A-Entity/A-Entity.class\";\nimport { A_TypeGuards } from \"@adaas/a-concept/helpers/A_TypeGuards.helper\";\nimport { A_Error } from \"../A-Error/A_Error.class\";\nimport { A_FormatterHelper } from '@adaas/a-concept/helpers/A_Formatter.helper';\nimport { ASEID } from '../ASEID/ASEID.class';\nimport { A_CommonHelper } from '@adaas/a-concept/helpers/A_Common.helper';\nimport { A_TYPES__Entity_Constructor } from '../A-Entity/A-Entity.types';\nimport { A_ScopeError } from './A-Scope.error';\nimport { A_TYPES__Component_Constructor } from '../A-Component/A-Component.types';\nimport { A_TYPES__Fragment_Constructor } from '../A-Fragment/A-Fragment.types';\nimport { A_TYPES__Error_Constructor } from '../A-Error/A_Error.types';\nimport { A_TYPES__ComponentMetaKey } from '../A-Component/A-Component.constants';\n\n\n\n\nexport class A_Scope<\n    _ComponentType extends A_TYPES__Component_Constructor[] = A_TYPES__Component_Constructor[],\n    _ErrorType extends A_TYPES__Error_Constructor[] = A_TYPES__Error_Constructor[],\n    _EntityType extends A_TYPES__Entity_Constructor[] = A_TYPES__Entity_Constructor[],\n    _FragmentType extends A_Fragment[] = A_Fragment[],\n> {\n\n    /**\n     * Scope Name uses for identification and logging purposes\n     */\n    protected _name!: string;\n    /**\n     * Parent scope reference, used for inheritance of components, fragments, entities and commands\n     */\n    protected _parent?: A_Scope;\n\n    // ===========================================================================\n    // --------------------ALLowed Constructors--------------------------------\n    // ===========================================================================\n    /**\n     * A set of allowed components, A set of constructors that are allowed in the scope\n     *      \n     */\n    protected _allowedComponents = new Set<_ComponentType[number]>();\n    /**\n     * A set of allowed errors, A set of constructors that are allowed in the scope\n     */\n    protected _allowedErrors = new Set<_ErrorType[number]>();\n    /**\n     * A set of allowed entities, A set of constructors that are allowed in the scope\n     */\n    protected _allowedEntities = new Set<_EntityType[number]>();\n    /**\n     * A set of allowed fragments, A set of constructors that are allowed in the scope\n     */\n    protected _allowedFragments = new Set<A_TYPES__Fragment_Constructor<_FragmentType[number]>>();\n\n\n\n    // ===========================================================================\n    // --------------------Internal Storage--------------------------------\n    // ===========================================================================\n    /**\n     * Storage for the components, should be strong as components are unique per scope\n     */\n    protected _components: Map<_ComponentType[number], InstanceType<_ComponentType[number]>> = new Map();\n    /**\n     * Storage for the errors, should be strong as errors are unique per code\n     */\n    protected _errors: Map<string, InstanceType<_ErrorType[number]>> = new Map();\n    /**\n     * Storage for the entities, should be strong as entities are unique per aseid\n     */\n    protected _entities: Map<string, InstanceType<_EntityType[number]>> = new Map();\n    /**\n     * Storage for the fragments, should be weak as fragments are singletons per scope\n     */\n    protected _fragments: Map<A_TYPES__Fragment_Constructor<_FragmentType[number]>, _FragmentType[number]> = new Map();\n\n\n\n\n    // ===========================================================================\n    // --------------------Readonly Allowed Properties----------------------------\n    // ===========================================================================\n    /**\n     * Returns the name of the scope\n     */\n    get name() { return this._name }\n\n    /**\n     * Returns a list of Constructors for A-Components that are available in the scope\n     */\n    get allowedComponents() { return this._allowedComponents }\n    /**\n     * Returns a list of Constructors for A-Entities that are available in the scope\n     */\n    get allowedEntities() { return this._allowedEntities }\n    /**\n     * Returns a list of Constructors for A-Fragments that are available in the scope\n     */\n    get allowedFragments() { return this._allowedFragments }\n    /**\n     * Returns a list of Constructors for A-Errors that are available in the scope\n     */\n    get allowedErrors() { return this._allowedErrors }\n    // ===========================================================================\n    // --------------------Readonly Registered Properties--------------------------\n    // ===========================================================================\n    /**\n     * Returns an Array of entities registered in the scope\n     * \n     * [!] One entity per aseid\n     */\n    get entities(): Array<InstanceType<_EntityType[number]>> { return Array.from(this._entities.values()) }\n    /**\n     * Returns an Array of fragments registered in the scope\n     * \n     * [!] One fragment per scope\n     */\n    get fragments(): Array<_FragmentType[number]> { return Array.from(this._fragments.values()) }\n    /**\n     * Returns an Array of components registered in the scope\n     * \n     * [!] One component instance per scope\n     */\n    get components(): Array<InstanceType<_ComponentType[number]>> { return Array.from(this._components.values()) }\n    /**\n     * Returns an Array of errors registered in the scope\n     * \n     * [!] One error per code\n     */\n    get errors(): Array<InstanceType<_ErrorType[number]>> { return Array.from(this._errors.values()) }\n\n    /**\n     * Returns the parent scope of the current scope\n     * \n     * @param setValue \n     * @returns \n     */\n    get parent(): A_Scope | undefined {\n        return this._parent;\n    }\n    /**\n     * A_Scope refers to the visibility and accessibility of :\n     * - variables, \n     * - Components, \n     * - Context Fragments \n     * - Entities\n     * - and objects in different parts of your code. \n     * Scope determines where a particular piece of data (like a variable or function) \n     * can be accessed, modified, or referenced, and it plays a crucial role in avoiding naming collisions and ensuring data integrity. \n     * \n     * [!] The scope behavior is similar to tree structure where each scope can have a parent scope and inherit its components, fragments, entities and errors\n     * \n     * @param params \n     * @param config \n     */\n    constructor()\n    constructor(\n        /**\n         * A set of constructors that are allowed in the scope\n         */\n        params: Partial<A_TYPES__Scope_Init<_ComponentType, _ErrorType, _EntityType, _FragmentType>>,\n        /**\n         * Configuration options for the scope\n         */\n        config?: Partial<A_TYPES__ScopeConfig>\n    )\n    constructor(\n        param1?: Partial<A_TYPES__Scope_Init<_ComponentType, _ErrorType, _EntityType, _FragmentType>>,\n        param2?: Partial<A_TYPES__ScopeConfig>\n    ) {\n        const initializer = this.getInitializer(param1);\n        // the returned initializer is already bound to `this` (we used .bind(this)),\n        // so calling it will run the appropriate logic on this instance:\n        initializer.call(this, param1, param2);\n    }\n\n\n\n    /**\n     * Determines which initializer method to use based on the type of the first parameter.\n     * \n     * @param param1 \n     * @returns\n     */\n    protected getInitializer(\n        param1?: Partial<A_TYPES__Scope_Init<_ComponentType, _ErrorType, _EntityType, _FragmentType>>,\n        param2?: Partial<A_TYPES__ScopeConfig>\n    ): (param1: any, param2: any) => void | (() => void) {\n        switch (true) {\n            case !param1 && !param2: ;\n                return this.defaultInitialized;\n\n            case !!param1:\n                return this.defaultInitialized;\n            default:\n                throw new A_ScopeError(A_ScopeError.ConstructorError, 'Invalid parameters provided to A_Scope constructor');\n        }\n    }\n\n\n\n    protected defaultInitialized(\n        params: Partial<A_TYPES__Scope_Init<_ComponentType, _ErrorType, _EntityType, _FragmentType>> = {},\n        config: Partial<A_TYPES__ScopeConfig> = {}\n    ) {\n        this._name = params.name || this.constructor.name\n\n        this.initComponents(params.components);\n        this.initErrors(params.errors);\n        this.initFragments(params.fragments);\n        this.initEntities(params.entities);\n\n        if (config.parent) {\n            this._parent = config.parent;\n        }\n    }\n\n\n    //==========================================================================\n    // --------------------Scope Initialization Methods---------------------------\n    //==========================================================================\n\n    /**\n     * This method is used to initialize the components in the scope\n     * To save memory components are initialized only when they are requested\n     * \n     * This method only registers the component in the scope in case they are not registered yet\n     * \n     * @param _components \n     */\n    protected initComponents(_components?: _ComponentType) { _components?.forEach(this.register.bind(this)); }\n    /**\n     * This method is used to initialize the errors in the scope\n     * \n     * This method only registers the errors in the scope in case they are not registered yet\n     * \n     * @param _errors \n     */\n    protected initErrors(_errors?: _ErrorType) { _errors?.forEach(this.register.bind(this)); }\n    /**\n     * This method is used to initialize the entities in the scope\n     * \n     * This method only registers the entities in the scope in case they are not registered yet\n     * \n     * @param _entities \n     */\n    protected initEntities(_entities?: [\n        ..._EntityType,\n        ...InstanceType<_EntityType[number]>[]\n    ]) { _entities?.forEach(ent => this.register(ent as any)); }\n    /**\n     * This method is used to initialize the fragments in the scope\n     * \n     * This method only registers the fragments in the scope in case they are not registered yet\n     * \n     * @param _fragments \n     */\n    protected initFragments(_fragments?: _FragmentType) { _fragments?.forEach(this.register.bind(this)); }\n\n\n    // ==========================================================================\n    // --------------------Scope Public Methods-----------------------------------\n    // ==========================================================================\n    /**\n     * This method is used to destroy the scope and all its registered components, fragments and entities\n     * \n     * [!] This method deregisters all components, fragments and entities from the A-Context\n     * [!] This method also clears all internal registries and collections\n     */\n    destroy() {\n        this._components.forEach(component => A_Context.deregister(component));\n        this._fragments.forEach(fragment => A_Context.deregister(fragment));\n        this._entities.forEach(entity => A_Context.deregister(entity));\n\n        this._components.clear();\n        this._errors.clear();\n        this._fragments.clear();\n        this._entities.clear();\n\n        if (this.issuer()) {\n            A_Context.deallocate(this);\n        }\n    }\n\n\n    /**\n     * Returns the issuer of the scope, useful for debugging and tracking purposes\n     * \n     * Issuer can be:\n     * - A Container that allocated the scope\n     * - A Feature that allocated the scope\n     * \n     * [!] Note that the issuer is the direct allocator of the scope, so if a Container allocated a Feature that allocated the scope, the issuer will be the Feature\n     * \n     * @returns \n     */\n    issuer<T extends A_TYPES__ScopeLinkedComponents>(): T | undefined {\n        try {\n            return A_Context.issuer(this) as T;\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n\n\n    /**\n     * This method is used to inherit from a parent scope\n     * \n     * [!] This method checks for circular inheritance and throws an error if detected\n     * \n     * @param parent \n     * @returns \n     */\n    inherit(parent: A_Scope): A_Scope {\n        if (!parent)\n            throw new A_ScopeError(\n                A_ScopeError.InitializationError,\n                `Invalid parent scope provided`\n            );\n\n        if (parent === this)\n            throw new A_ScopeError(\n                A_ScopeError.CircularInheritanceError,\n                `Unable to inherit scope ${this.name} from itself`\n            );\n\n        if (parent === this._parent)\n            return this;\n\n        // Prevent circular inheritance\n        const circularCheck = this.checkCircularInheritance(parent);\n\n        if (circularCheck)\n            throw new A_ScopeError(\n                A_ScopeError.CircularInheritanceError,\n                `Circular inheritance detected: ${[...circularCheck, parent.name].join(' -> ')}`\n            );\n\n\n        this._parent = parent;\n        return this;\n    }\n\n\n    /**\n     * This method is used to check if the component is available in the scope\n     * \n     * [!] Note that this method checks for the component in the current scope and all parent scopes\n     * \n     * @param component \n     * @returns \n     */\n    has<T extends A_Component>(\n        /**\n         * Provide a component constructor to check if it's available in the scope\n         */\n        component: A_TYPES__Component_Constructor<T>\n    ): boolean\n    has<T extends A_Entity>(\n        /**\n         * Provide an entity constructor to check if it's available in the scope\n         * \n         * [!] Note that entities are unique per aseid, so this method checks if there's at least one entity of the provided type in the scope\n         */\n        entity: A_TYPES__Entity_Constructor<T>\n    ): boolean\n    has<T extends A_Fragment>(\n        /**\n         * Provide a fragment constructor to check if it's available in the scope\n         */\n        fragment: A_TYPES__Fragment_Constructor<T>\n    ): boolean\n    has<T extends A_Error>(\n        /**\n         * Provide an error constructor to check if it's available in the scope\n         */\n        error: A_TYPES__Error_Constructor<T>\n    ): boolean\n    has(\n        /**\n         * Provide a string to check if a component, entity or fragment with the provided name is available in the scope\n         */\n        constructor: string\n    ): boolean\n    has(\n        ctor: unknown\n    ): boolean {\n\n        let found = false;\n\n        switch (true) {\n            // 1) Check if it's a Scope. It's always true since it returns itself\n            case A_TypeGuards.isScopeConstructor(ctor):\n                return true;\n\n            // 2) Check by string name.  \n            case typeof ctor === 'string': {\n                // 2.1 Check if it's a component name\n                const possibleComponent = Array.from(this.allowedComponents).find(c => c.name === ctor);\n                if (possibleComponent) found = true;\n\n                // 2.2 Check if it's a fragment name\n                const possibleFragment = Array.from(this.allowedFragments).find(f => f.name === ctor);\n                if (possibleFragment) found = true;\n\n                // 2.3 Check if it's an entity name or entity static entity property\n                const possibleEntity = Array.from(this.allowedEntities).find(e => e.name === ctor);\n                if (possibleEntity) found = true;\n\n                // 2.4 Check if it's an error name\n                const possibleError = Array.from(this.allowedErrors).find(e => e.name === ctor);\n                if (possibleError) found = true;\n\n                // 2.5 If not found in current scope, check parent scope\n                if (!!this._parent)\n                    return this._parent.has(ctor);\n\n                return false;\n            }\n            // 3) Check if it's a Component\n            case A_TypeGuards.isComponentConstructor(ctor): {\n                found = this.isAllowedComponent(ctor)\n                    || !![...this.allowedComponents]\n                        .find(c => A_CommonHelper.isInheritedFrom(c, ctor));\n\n                break;\n            }\n            // 4) Check if it's an Entity\n            case A_TypeGuards.isEntityConstructor(ctor): {\n                found = this.isAllowedEntity(ctor)\n                    || !![...this.allowedEntities]\n                        .find(e => A_CommonHelper.isInheritedFrom(e, ctor));\n\n                break;\n            }\n            // 5) Check if it's a Fragment\n            case A_TypeGuards.isFragmentConstructor(ctor): {\n                found = this.isAllowedFragment(ctor)\n                    || !![...this.allowedFragments]\n                        .find(f => A_CommonHelper.isInheritedFrom(f, ctor));\n\n                break;\n            }\n\n            // 6) Check if it's an Error\n            case A_TypeGuards.isErrorConstructor(ctor): {\n                found = this.isAllowedError(ctor)\n                    || !![...this.allowedErrors]\n                        .find(e => A_CommonHelper.isInheritedFrom(e, ctor));\n\n                break;\n            }\n\n            // 7) Check scope issuer\n            case this.issuer()\n                && (this.issuer()!.constructor === ctor\n                    || A_CommonHelper.isInheritedFrom(this.issuer()!.constructor, ctor\n                    )\n                ): {\n                    found = true;\n                    break;\n                }\n        }\n\n        // 7) Check parent scope in case not found\n        if (!found && !!this._parent)\n            try {\n                return this._parent.has(ctor as any);\n            } catch (error) {\n                return false;\n            }\n\n\n        return found;\n    }\n\n\n    /**\n     * Merges two scopes into a new one\n     * \n     * [!] Notes: \n     *  - this method does NOT modify the existing scopes\n     *  - parent of the new scope will be the parent of the current scope or the parent of anotherScope (if exists)\n     * \n     * @param anotherScope \n     * @returns \n     */\n    merge(anotherScope: A_Scope): A_Scope {\n        const merged = new A_Scope(\n            {\n                name: `${this.name} + ${anotherScope.name}`,\n\n                components: [...this.allowedComponents, ...anotherScope.allowedComponents],\n                fragments: [...this.fragments, ...anotherScope.fragments],\n                entities: [\n                    ...this.entities, ...anotherScope.entities,\n                    ...this.allowedEntities, ...anotherScope.allowedEntities\n                ],\n            },\n            {\n                parent: this._parent || anotherScope._parent\n            }\n        );\n\n        return merged;\n    }\n\n\n    /**\n     * Allows to retrieve the constructor of the component or entity by its name\n     * \n     * [!] Notes:\n     * - In case of search for A-Entity please ensure that provided string corresponds to the static entity property of the class. [!] By default it's the kebab-case of the class name\n     * - In case of search for A_Component please ensure that provided string corresponds to the class name in PascalCase\n     * \n     * @param name \n     * @returns \n     */\n    resolveConstructor<T extends A_Entity>(\n        /**\n         * Provide the entity name or static entity property to retrieve its constructor\n         */\n        name: string\n    ): A_TYPES__Entity_Constructor<T>\n    resolveConstructor<T extends A_Component>(\n        /**\n         * Provide the component name in PascalCase to retrieve its constructor\n         */\n        name: string\n    ): A_TYPES__Component_Constructor<T>\n    resolveConstructor<T extends A_Fragment>(\n        /**\n         * Provide the fragment name in PascalCase to retrieve its constructor\n         */\n        name: string\n    ): A_TYPES__Fragment_Constructor<T>\n    resolveConstructor<T extends A_TYPES__ScopeResolvableComponents>(name: string): A_TYPES__Entity_Constructor<T> | A_TYPES__Component_Constructor<T> | A_TYPES__Fragment_Constructor<T> | undefined {\n        // 1) Check components\n        const component = Array.from(this.allowedComponents).find(\n            c => c.name === name\n                || c.name === A_FormatterHelper.toPascalCase(name)\n        );\n        if (component) return component as A_TYPES__Component_Constructor<T>;\n\n        // 2) Check entities\n        const entity = Array.from(this.allowedEntities).find(\n            e => e.name === name\n                || e.name === A_FormatterHelper.toPascalCase(name)\n                || (e as any).entity === name\n                || (e as any).entity === A_FormatterHelper.toKebabCase(name)\n        );\n        if (entity) return entity as A_TYPES__Entity_Constructor<T>;\n\n        // 3) Check fragments\n        const fragment = Array.from(this.allowedFragments).find(f => f.name === name\n            || f.name === A_FormatterHelper.toPascalCase(name)\n        );\n        if (fragment) return fragment as A_TYPES__Fragment_Constructor<T>;\n\n        // If not found in current scope, check parent scope\n        if (!!this._parent) {\n            return this._parent.resolveConstructor(name) as any;\n        }\n\n        return undefined;\n    }\n\n\n\n    /**\n     * This method allows to resolve/inject a component, fragment or entity from the scope\n     * Depending on the provided parameters it can resolve:\n     * - A single component/fragment/entity by its constructor or name\n     * - An array of components/fragments/entities by providing an array of constructors\n     * - An entity or an array of entities by providing the entity constructor and query instructions\n     * \n     * @param component \n     * @returns \n     */\n    resolve<T extends A_Component>(\n        /**\n         * Provide a component constructor to resolve its instance from the scope\n         */\n        component: A_TYPES__Component_Constructor<T>\n    ): T | undefined\n    resolve<T extends A_TYPES__Component_Constructor[]>(\n        /**\n         * Provide an array of component constructors to resolve their instances from the scope\n         */\n        components: [...T]\n    ): Array<InstanceType<T[number]>> | undefined\n    resolve<T extends A_Fragment>(\n        /**\n         * Provide a fragment constructor to resolve its instance from the scope\n         */\n        fragment: A_TYPES__Fragment_Constructor<T>\n    ): T | undefined\n    resolve<T extends A_TYPES__Fragment_Constructor[]>(\n        /**\n         * Provide an array of fragment constructors to resolve their instances from the scope\n         */\n        fragments: [...T]\n    ): Array<InstanceType<T[number]>> | undefined\n    resolve<T extends A_Entity>(\n        /**\n         * Provide an entity constructor to resolve its instance or an array of instances from the scope\n         */\n        entity: A_TYPES__Entity_Constructor<T>\n    ): T | undefined\n\n    resolve<T extends A_Entity>(\n        /**\n         * Provide an entity constructor to resolve its instance or an array of instances from the scope\n         */\n        entity: A_TYPES__Entity_Constructor<T>,\n        /**\n         * Provide optional instructions to find a specific entity or a set of entities\n         */\n        instructions: Partial<A_TYPES__A_InjectDecorator_EntityInjectionInstructions<T>>\n    ): Array<T>\n    resolve<T extends A_Scope>(\n        /**\n         * Uses only in case of resolving a single entity\n         * \n         * Provide an entity constructor to resolve its instance from the scope\n         */\n        scope: A_TYPES__Scope_Constructor<T>\n    ): T | undefined\n    resolve<T extends A_Error>(\n        /**\n         * Uses only in case of resolving a single entity\n         * \n         * Provide an entity constructor to resolve its instance from the scope\n         */\n        scope: A_TYPES__Error_Constructor<T>\n    ): T | undefined\n    resolve<T extends A_TYPES__ScopeResolvableComponents>(\n        constructorName: string\n    ): T | undefined\n    // base definition\n    resolve<T extends A_TYPES__ScopeResolvableComponents>(\n        /**\n         * Provide a component, fragment or entity constructor or an array of constructors to resolve its instance(s) from the scope\n         */\n        param1: A_TYPES__InjectableConstructors,\n\n    ): T | Array<T> | undefined\n    resolve<T extends A_TYPES__ScopeLinkedConstructors>(\n        /**\n         * Provide a component, fragment or entity constructor or an array of constructors to resolve its instance(s) from the scope\n         */\n        param1: InstanceType<T>,\n\n    ): T | Array<T> | undefined\n    resolve<T extends A_TYPES__ScopeResolvableComponents>(\n        /**\n         * Provide a component, fragment or entity constructor or an array of constructors to resolve its instance(s) from the scope\n         */\n        param1: A_TYPES__InjectableConstructors | Array<A_TYPES__InjectableConstructors>,\n        param2?: Partial<A_TYPES__A_InjectDecorator_EntityInjectionInstructions>\n    ): T | Array<T> | undefined {\n        switch (true) {\n            case A_TypeGuards.isArray(param1): {\n                return param1.map(c => {\n                    if (A_TypeGuards.isString(c))\n                        return this.resolveByName(c);\n                    else\n                        return this.resolveOnce(c, param2);\n                }).filter(Boolean) as Array<T>;\n            }\n\n            case A_TypeGuards.isFunction(param1): {\n                return this.resolveOnce(param1, param2) as T;\n            }\n\n            case A_TypeGuards.isString(param1): {\n                return this.resolveByName(param1) as T;\n            }\n\n            default: {\n                throw new A_ScopeError(\n                    A_ScopeError.ResolutionError,\n                    `Invalid parameter provided to resolve method: ${param1} in scope ${this.name}`);\n            }\n        }\n    }\n\n\n\n\n    // ==================================================================================================\n    // --------------------------------------------------------------------------------------------------\n    // -------------------------------------INTERNAL RESOLVERS-------------------------------------------\n    // --------------------------------------------------------------------------------------------------\n    // ==================================================================================================\n    /**\n     * This method is used internally to resolve a component, fragment or entity by its constructor name\n     * \n     * [!] Note that this method checks for the component, fragment or entity in the current scope and all parent scopes\n     * \n     * @param name  - name of the component, fragment or entity to resolve (constructor name for components and fragments, static entity property for entities, static code property for commands)\n     * @returns \n     */\n    private resolveByName(\n        /**\n         * Provide the name of the component, fragment or entity to resolve\n         */\n        name: string\n    ): _EntityType[number] | InstanceType<_ComponentType[number]> | _FragmentType[number] |\n        InstanceType<_ErrorType[number]> | undefined {\n        // 1) Check components\n        const component = Array.from(this.allowedComponents).find(\n            c => c.name === name\n                || c.name === A_FormatterHelper.toPascalCase(name)\n        );\n        if (component) return this.resolveOnce(component) as InstanceType<_ComponentType[number]>;\n\n        // 2) Check entities\n        const entity = Array.from(this.allowedEntities).find(\n            e => e.name === name\n                || e.name === A_FormatterHelper.toPascalCase(name)\n                || (e as any).entity === name\n                || (e as any).entity === A_FormatterHelper.toKebabCase(name)\n        );\n        if (entity) return this.resolveOnce(entity) as InstanceType<_EntityType[number]>;\n\n        // 3) Check fragments\n        const fragment = Array.from(this.allowedFragments).find(f => f.name === name\n            || f.name === A_FormatterHelper.toPascalCase(name)\n        );\n        if (fragment) return this.resolveOnce(fragment) as _FragmentType[number];\n\n        // 4) Check errors\n        const error = Array.from(this.allowedErrors).find(\n            e => e.name === name\n                || e.name === A_FormatterHelper.toPascalCase(name)\n                || (e as any).code === name\n                || (e as any).code === A_FormatterHelper.toKebabCase(name)\n        );\n        if (error) return this.resolveOnce(error) as InstanceType<_ErrorType[number]>;\n\n        // If not found in current scope, check parent scope\n        if (!!this._parent) {\n            return this._parent.resolveByName(name) as any;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * This method is used internally to resolve a single component, fragment or entity from the scope\n     * \n     * @param component \n     * @param instructions \n     * @returns \n     */\n    private resolveOnce(\n        component: any,\n        instructions?: Partial<A_TYPES__A_InjectDecorator_EntityInjectionInstructions>\n    ): A_TYPES__ScopeResolvableComponents | A_Scope | A_TYPES__ScopeLinkedComponents | Array<A_TYPES__ScopeResolvableComponents> | undefined {\n\n\n        const componentName = A_CommonHelper.getComponentName(component);\n\n        if (!component || !this.has(component))\n            return undefined;\n\n        switch (true) {\n            case A_TypeGuards.isConstructorAllowedForScopeAllocation(component): {\n                return this.resolveIssuer(component);\n            }\n            case A_TypeGuards.isEntityConstructor(component): {\n                return this.resolveEntity(component, instructions);\n            }\n            case A_TypeGuards.isFragmentConstructor(component): {\n                return this.resolveFragment(component);\n            }\n            case A_TypeGuards.isScopeConstructor(component): {\n                return this.resolveScope(component);\n            }\n            case A_TypeGuards.isComponentConstructor(component): {\n                return this.resolveComponent(component);\n            }\n            case A_TypeGuards.isErrorConstructor(component): {\n                return this.resolveError(component);\n            }\n            default:\n                throw new A_ScopeError(\n                    A_ScopeError.ResolutionError,\n                    `Injected Component ${componentName} not found in the scope`\n                );\n        }\n    }\n\n    private resolveIssuer(\n        ctor: A_TYPES__ScopeLinkedConstructors\n    ): A_TYPES__ScopeLinkedComponents | undefined {\n\n        const issuer = this.issuer();\n\n        if (issuer\n            && (\n                issuer.constructor === ctor\n                || A_CommonHelper.isInheritedFrom(issuer?.constructor, ctor)\n            )) {\n            return issuer!;\n        }\n        if (!!this._parent) {\n            return this._parent.resolveIssuer(ctor);\n        }\n\n        return undefined;\n    }\n\n    /**\n     * This method is used internally to resolve a single entity from the scope based on the provided instructions\n     * \n     * [!] Note that this method can return either a single entity or an array of entities depending on the instructions provided\n     * \n     * @param entity \n     * @param instructions \n     * @returns \n     */\n    private resolveEntity<T extends A_Entity>(\n        entity: A_TYPES__Entity_Constructor<T>,\n        instructions?: Partial<A_TYPES__A_InjectDecorator_EntityInjectionInstructions<T>>\n    ): T | Array<T> | undefined {\n\n        const query = instructions?.query || {} as Partial<A_TYPES__A_InjectDecorator_EntityInjectionQuery<T>>;\n        const count = instructions?.pagination?.count || 1;\n\n        switch (true) {\n            /**\n             * 1) In case when no instructions provided, return the first found entity of the provided type\n             * \n             * [!] Note that it returns ONLY ONE entity\n             * [!!] In case when no entity found in the current scope, it tries to resolve it from the parent scope (if exists)\n             */\n            case !instructions: {\n                const found = this.entities.find(e => e instanceof entity);\n\n                switch (true) {\n                    case !!found:\n                        return found as T;\n\n                    case !found && !!this._parent:\n                        return this._parent.resolveEntity(entity, instructions);\n\n                    default:\n                        return undefined;\n                }\n            }\n            /**\n             * 2) In case when aseid is provided in the query, we can directly get the entity from the map\n             * \n             * [!] Note that it returns ONLY ONE entity\n             */\n            case !!query.aseid\n                && typeof query.aseid === 'string'\n                && this._entities.has(query.aseid): {\n                    return this._entities.get(query.aseid) as T;\n                }\n            /**\n             * 3) In case when aseid is provided as ASEID instance, we can directly get the entity from the map\n             * \n             * [!] Note that it returns ONLY ONE entity\n             */\n            case !!query.aseid\n                && typeof query.aseid === 'object'\n                && query.aseid instanceof ASEID\n                && this._entities.has(query.aseid.toString()): {\n                    return this._entities.get(query.aseid.toString()) as T;\n                }\n            /**\n             * 4) In case when id is provided in the query, we have to find the entity by the id\n             * \n             * [!]  Note that it returns ONLY ONE entity\n             */\n            case !!query.id: {\n\n                const found = this.entities\n                    .filter(e => e instanceof entity)\n                    .find(e => String(e.id) === String(query.id));\n\n                return found as T;\n            }\n            /**\n             * 5) In case when there's a query object, we have to filter the entities by the query\n             * \n             * [!] Note that it can return either a single entity or an array of entities depending on the count instruction\n             * [!!] In case when no entity found in the current scope, it tries to resolve it from the parent scope (if exists)\n             */\n            default: {\n\n                const found = this.entities\n                    .filter(e => e instanceof entity)\n                    .filter(e => {\n                        return Object\n                            .entries(query)\n                            .every(([key, value]) => {\n                                if (key in e) {\n                                    return (e as any)[key] === value;\n                                }\n                                return false;\n                            });\n                    });\n\n                if (found.length === 0 && !!this._parent)\n                    return this._parent.resolveEntity(entity, instructions);\n\n                if (count === 1)\n                    return found[0] as T;\n\n                return found as T[];\n            }\n        }\n    }\n    /**\n     * This method is used internally to resolve a single error from the scope\n     * \n     * @param error \n     * @returns \n     */\n    private resolveError<T extends A_Error>(error: A_TYPES__Error_Constructor<T>): T | undefined {\n\n        const found = this.errors.find(e => e instanceof error);\n\n        switch (true) {\n            case !!found:\n                return found as T;\n\n            case !found && !!this._parent:\n                return this._parent.resolveError(error);\n\n            default:\n                return undefined;\n        }\n    }\n    /**\n     * This method is used internally to resolve a single fragment from the scope\n     * \n     * @param fragment \n     * @returns \n     */\n    private resolveFragment<T extends A_Fragment>(fragment: A_TYPES__Fragment_Constructor<T>): _FragmentType[number] | undefined {\n        const fragmentInstancePresented = this._fragments.get(fragment);\n\n        switch (true) {\n            case fragmentInstancePresented && this._fragments.has(fragment):\n                return fragmentInstancePresented;\n\n            case !fragmentInstancePresented && !!this._parent:\n                return this._parent.resolveFragment(fragment);\n\n            default:\n                return undefined;\n        }\n    }\n    /**\n     *  This method is used internally to resolve a single scope from the current scope\n     * \n     * @param scope \n     * @returns \n     */\n    private resolveScope(scope: A_TYPES__Scope_Constructor): A_Scope {\n        return this;\n    }\n    /**\n     * This method is used internally to resolve a single component from the scope\n     * \n     * @param component \n     * @returns \n     */\n    private resolveComponent<T extends A_Component>(component: A_TYPES__Component_Constructor<T>): InstanceType<_ComponentType[number]> | undefined {\n\n        //  The idea here that in case when Scope has no exact component we have to resolve it from the _parent\n        //  BUT: if it's not presented in _parent  we have to check for inheritance\n        //  That means that we should ensure that there's no components that are children of the required component\n        switch (true) {\n            // 1) In case when the component is available and exists in the scope\n            case this.allowedComponents.has(component) && this._components.has(component): {\n                return this._components.get(component)!;\n            }\n\n            // 2) In case the component available but does NOT exist in the scope\n            case this.allowedComponents.has(component) && !this._components.has(component): {\n                const componentMeta = A_Context.meta(component)\n\n                const argsMeta = componentMeta.get(A_TYPES__ComponentMetaKey.INJECTIONS);\n\n                const resolvedArgs = (argsMeta?.get('constructor') || [])\n                    .map(arg => {\n                        // for Error handling purposes\n                        const componentName = A_CommonHelper.getComponentName(arg.target)\n\n                        if ('instructions' in arg && !!arg.instructions) {\n                            const { target, instructions } = arg\n                            const dependency = this.resolve(target as any, instructions);\n                            if (!dependency)\n                                throw new A_ScopeError(\n                                    A_ScopeError.ResolutionError,\n                                    `Unable to resolve dependency ${componentName} for component ${component.name} in scope ${this.name}`\n                                );\n\n                            return dependency;\n                        } else {\n                            const { target, require, create, defaultArgs } = arg;\n\n                            let dependency = this.resolve(target as any);\n\n                            if (create && !dependency && A_TypeGuards.isAllowedForDependencyDefaultCreation(target)) {\n                                const newDependency = new target(...defaultArgs);\n\n                                this.register(newDependency);\n                                return newDependency;\n                            }\n\n                            if (require && !dependency) {\n                                throw new A_ScopeError(\n                                    A_ScopeError.ResolutionError,\n                                    `Unable to resolve required dependency ${componentName} for component ${component.name} in scope ${this.name}`\n                                );\n                            }\n\n                            return dependency;\n                        }\n                    });\n\n                const newComponent = new component(...resolvedArgs)\n\n                this.register(newComponent);\n\n                return this._components.get(component)!;\n            }\n\n            // 3) In case when there's a component that is inherited from the required component\n            case !this.allowedComponents.has(component) && Array.from(this.allowedComponents).some(el => A_CommonHelper.isInheritedFrom(el, component)): {\n                const found = Array.from(this.allowedComponents).find(el => A_CommonHelper.isInheritedFrom(el, component))!;\n\n                return this.resolveComponent(found);\n            }\n\n            // 4) In case when the component is not available in the scope but the _parent is available\n            case !!this._parent: {\n                return this._parent.resolveComponent(component) as InstanceType<_ComponentType[number]>;\n            }\n\n            default:\n                throw new A_ScopeError(\n                    A_ScopeError.ResolutionError,\n                    `Component ${component.name} not found in the scope ${this.name}`\n                );\n        }\n    }\n\n\n    /**\n     * This method is used to register the component in the scope\n     * \n     * @param fragment \n     */\n    register<T extends A_Component>(\n        /**\n         * Provide a component constructor to register it in the scope\n         */\n        component: A_TYPES__Component_Constructor<T>\n    ): void\n    register(\n        /**\n         * Provide a command instance to register it in the scope\n         */\n        component: A_Component\n    ): void\n    register<T extends A_Error>(\n        /**\n         * Provide an error constructor to register it in the scope\n         */\n        error: A_TYPES__Error_Constructor<T>\n    ): void\n    register(\n        /**\n         * Provide an error instance to register it in the scope\n         */\n        error: A_Error\n    ): void\n    register<T extends A_Fragment>(\n        /**\n         * Provide a command instance to register it in the scope\n         */\n        fragment: A_TYPES__Fragment_Constructor<T>\n    ): void\n    register(\n        /**\n         * Provide a fragment instance to register it in the scope\n         */\n        fragment: A_Fragment\n    ): void\n    register<T extends A_Entity>(\n        /**\n         * Provide an entity constructor to register it in the scope\n         */\n        entity: A_TYPES__Entity_Constructor<T>\n    ): void\n    register(\n        /**\n         * Provide an entity instance to register it in the scope\n         */\n        entity: A_Entity\n    ): void\n\n    register(\n        param1: unknown\n    ): void {\n        switch (true) {\n            // ------------------------------------------\n            // ------------ Instances ----------------\n            // ------------------------------------------\n            // 1) In case when it's a A-Component instance\n            case param1 instanceof A_Component: {\n\n                if (!this.allowedComponents.has(param1.constructor as _ComponentType[number]))\n                    this.allowedComponents.add(param1.constructor as _ComponentType[number]);\n\n                this._components.set(\n                    param1.constructor as _ComponentType[number],\n                    param1 as InstanceType<_ComponentType[number]>\n                );\n\n                A_Context.register(this, param1);\n\n                break;\n            }\n            // 3) In case when it's a A-Entity instance\n            case A_TypeGuards.isEntityInstance(param1) && !this._entities.has(param1.aseid.toString()): {\n\n                if (!this.allowedEntities.has(param1.constructor as _EntityType[number]))\n                    this.allowedEntities.add(param1.constructor as _EntityType[number]);\n\n                this._entities.set(param1.aseid.toString(), param1 as InstanceType<_EntityType[number]>);\n                A_Context.register(this, param1);\n                break;\n            }\n            // 4) In case when it's a A-Fragment instance\n            case A_TypeGuards.isFragmentInstance(param1): {\n\n                if (!this.allowedFragments.has(param1.constructor as A_TYPES__Fragment_Constructor<_FragmentType[number]>))\n                    this.allowedFragments.add(param1.constructor as A_TYPES__Fragment_Constructor<_FragmentType[number]>);\n\n                this._fragments.set(\n                    param1.constructor as A_TYPES__Fragment_Constructor<_FragmentType[number]>,\n                    param1 as _FragmentType[number]\n                );\n\n                A_Context.register(this, param1);\n\n                break;\n            }\n            // 5) In case when it's a A-Error instance\n            case A_TypeGuards.isErrorInstance(param1): {\n                if (!this.allowedErrors.has(param1.constructor as _ErrorType[number]))\n                    this.allowedErrors.add(param1.constructor as _ErrorType[number]);\n\n                this._errors.set(\n                    param1.code,\n                    param1 as InstanceType<_ErrorType[number]>\n                );\n\n                A_Context.register(this, param1);\n                break;\n            }\n\n            // ------------------------------------------\n            // ------------ Constructors ----------------\n            // ------------------------------------------\n            // 6) In case when it's a A-Component constructor\n            case A_TypeGuards.isComponentConstructor(param1): {\n                if (!this.allowedComponents.has(param1))\n                    this.allowedComponents.add(param1 as _ComponentType[number]);\n                break;\n            }\n            // 8) In case when it's a A-Fragment constructor\n            case A_TypeGuards.isFragmentConstructor(param1): {\n                if (!this.allowedFragments.has(param1))\n                    this.allowedFragments.add(param1 as A_TYPES__Fragment_Constructor<_FragmentType[number]>);\n                break;\n            }\n            // 9) In case when it's a A-Entity constructor\n            case A_TypeGuards.isEntityConstructor(param1): {\n                if (!this.allowedEntities.has(param1))\n                    this.allowedEntities.add(param1 as _EntityType[number]);\n                break;\n            }\n            // 10) In case when it's a A-Error constructor\n            case A_TypeGuards.isErrorConstructor(param1): {\n                if (!this.allowedErrors.has(param1))\n                    this.allowedErrors.add(param1 as _ErrorType[number]);\n                break;\n            }\n\n            // ------------------------------------------\n            // ------------ Invalid Cases ----------------\n            // ------------------------------------------\n\n            default:\n                if (param1 instanceof A_Entity)\n                    throw new A_ScopeError(\n                        A_ScopeError.RegistrationError,\n                        `Entity with ASEID ${param1.aseid.toString()} is already registered in the scope ${this.name}`\n                    );\n                else if (param1 instanceof A_Fragment)\n                    throw new A_ScopeError(\n                        A_ScopeError.RegistrationError,\n                        `Fragment ${param1.constructor.name} is already registered in the scope ${this.name}`\n                    );\n                else {\n                    const componentName = A_CommonHelper.getComponentName(param1);\n\n                    throw new A_ScopeError(\n                        A_ScopeError.RegistrationError,\n                        `Cannot register ${componentName} in the scope ${this.name}`\n                    );\n                }\n        }\n    }\n\n\n\n\n    /**\n     * This method is useful when you want to serialize the scope to JSON\n     * \n     * [!] Note this is not a deep serialization, only the fragments are serialized\n     * [!] Fragments are a storage for information which is relevant to the scope\n     * \n     * @returns \n     */\n    toJSON(): Record<string, any> {\n        return this.fragments\n            .reduce((acc, fragment) => {\n\n                const serialized = fragment.toJSON()\n\n                return {\n                    ...acc,\n                    [serialized.name]: serialized\n                }\n            }, {});\n    }\n\n\n\n    //==========================================================================\n    // --------------------Scope Type Check Helpers---------------------------\n    //==========================================================================\n    /**\n     * Type guard to check if the constructor is of type A_Component and is allowed in the scope\n     * \n     * @param ctor \n     * @returns \n     */\n    protected isAllowedComponent(ctor: unknown): ctor is _ComponentType[number] {\n        return A_TypeGuards.isComponentConstructor(ctor) && this.allowedComponents.has(ctor);\n    }\n    /**\n     * Type guard to check if the constructor is of type A_Entity and is allowed in the scope\n     * \n     * @param ctor \n     * @returns \n     */\n    protected isAllowedEntity(ctor: unknown): ctor is A_TYPES__Entity_Constructor<_EntityType[number]> {\n        return A_TypeGuards.isEntityConstructor(ctor) && this.allowedEntities.has(ctor);\n    }\n    /**\n     * Type guard to check if the constructor is of type A_Fragment and is allowed in the scope\n     * \n     * @param ctor \n     * @returns \n     */\n    protected isAllowedFragment(ctor: unknown): ctor is A_TYPES__Fragment_Constructor<_FragmentType[number]> {\n        return A_TypeGuards.isFragmentConstructor(ctor) && this.allowedFragments.has(ctor);\n    }\n    /**\n     * Type guard to check if the constructor is of type A_Error and is allowed in the scope\n     * \n     * @param ctor \n     * @returns \n     */\n    protected isAllowedError(ctor: unknown): ctor is A_TYPES__Error_Constructor<_ErrorType[number]> {\n        return A_TypeGuards.isErrorConstructor(ctor) && this.allowedErrors.has(ctor);\n    }\n\n\n\n\n    // ==========================================================================\n    // --------------------DEBUG & Helpers Methods--------------------------------\n    // ===========================================================================\n    /**\n     * This method is used to check if the scope is inherited from another scope\n     * \n     * @param scope \n     * @returns \n     */\n    isInheritedFrom(scope: A_Scope): boolean {\n        let current: A_Scope | undefined = this;\n\n        while (current) {\n            if (current === scope) {\n                return true;\n            }\n            current = current._parent;\n        }\n\n        return false;\n    }\n\n    /**\n     * Helper method to check circular inheritance\n     * Should return a full sequence of inheritance for logging purposes\n     * \n     * @param scope \n     * @returns \n     */\n    checkCircularInheritance(scope: A_Scope): Array<string> | false {\n        const inheritanceChain: Array<string> = [];\n        let current: A_Scope | undefined = this._parent;\n\n        while (current) {\n            inheritanceChain.push(current.name);\n            if (current === scope) {\n                return inheritanceChain;\n            }\n            current = current._parent;\n        }\n\n        return false;\n    }\n\n    /**\n     * Helper method to print the inheritance chain of the scope\n     */\n    printInheritanceChain(): void {\n        const chain: Array<string> = [];\n        let current: A_Scope | undefined = this;\n\n        while (current) {\n            chain.push(current.name);\n            current = current._parent;\n        }\n\n        console.log(chain.join(' -> '));\n    }\n}\n\n","import { A_Error } from \"../A-Error/A_Error.class\";\n\n\nexport class A_CallerError extends A_Error {\n\n    /**\n     * This error code indicates that there was an issue initializing the A-Caller\n     */\n    static readonly CallerInitializationError = 'Unable to initialize A-Caller';\n}","import { A_TypeGuards } from \"@adaas/a-concept/helpers/A_TypeGuards.helper\";\nimport { A_TYPES__FeatureAvailableComponents } from \"../A-Feature/A-Feature.types\";\nimport { A_CallerError } from \"./A_Caller.error\";\n\n\n\n/**\n * This is a common class that uses to return an entity that initiates a feature call\n * \n * It can be used then in @A_Inject(A_Caller) to get the entity that initiated the feature call\n * \n * [!] the class itself may be retrieved, but may require additional processing inside the feature\n * \n */\nexport class A_Caller<T extends A_TYPES__FeatureAvailableComponents = A_TYPES__FeatureAvailableComponents> {\n\n    /**\n     * The component that initiated the feature call\n     */\n    protected _component: T;\n\n\n    /**\n     * A_Caller allows to get the component that initiated the feature call\n     * \n     * It can be used then in @A_Inject(A_Caller) to get the entity that initiated the feature call\n     * \n     * [!] If Scope is not provided, a new empty scope will be created and inherited from the global scope\n     * \n     * @param component \n     * @param scope \n     */\n    constructor(\n        component: T\n    ) {\n        this.validateParams(component);\n\n        this._component = component;\n    }\n\n    get component(): T {\n        return this._component;\n    }\n\n\n    /**\n     * Validates the provided parameters and Ensures that the component is of an allowed type\n     * \n     * @param component \n     */\n    protected validateParams(\n        component: T\n    ) {\n        if (!A_TypeGuards.isAllowedForFeatureCall(component)) {\n            throw new A_CallerError(\n                A_CallerError.CallerInitializationError,\n                `Invalid A-Caller component provided of type: ${typeof component} with value: ${JSON.stringify(component).slice(0, 100)}...`\n            );\n        }\n    }\n}","import {\n    A_TYPES__Feature_Constructor,\n    A_TYPES__FeatureAvailableComponents,\n    A_TYPES__FeatureExtendDecoratorTarget\n} from \"../global/A-Feature/A-Feature.types\";\nimport {\n    A_TYPES__Error_Constructor,\n    A_TYPES__Error_Init\n} from \"../global/A-Error/A_Error.types\";\nimport { A_Component } from \"../global/A-Component/A-Component.class\";\nimport { A_ComponentMeta } from \"../global/A-Component/A-Component.meta\";\nimport { A_TYPES__Component_Constructor } from \"../global/A-Component/A-Component.types\";\nimport { A_Container } from \"../global/A-Container/A-Container.class\";\nimport { A_ContainerMeta } from \"../global/A-Container/A-Container.meta\";\nimport { A_TYPES__Container_Constructor } from \"../global/A-Container/A-Container.types\";\nimport { A_Entity } from \"../global/A-Entity/A-Entity.class\";\nimport { A_EntityMeta } from \"../global/A-Entity/A-Entity.meta\";\nimport { A_TYPES__Entity_Constructor } from \"../global/A-Entity/A-Entity.types\";\nimport { A_Feature } from \"../global/A-Feature/A-Feature.class\";\nimport { A_Fragment } from \"../global/A-Fragment/A-Fragment.class\";\nimport { A_TYPES__Fragment_Constructor } from \"../global/A-Fragment/A-Fragment.types\";\nimport { A_Scope } from \"../global/A-Scope/A-Scope.class\";\nimport { A_Caller } from \"../global/A-Caller/A_Caller.class\";\nimport { A_TYPES__Caller_Constructor } from \"../global/A-Caller/A_Caller.types\";\nimport { A_Error } from \"../global/A-Error/A_Error.class\";\nimport { A_CommonHelper } from \"./A_Common.helper\";\nimport { A_TYPES__AbstractionAvailableComponents } from \"../global/A-Abstraction/A-Abstraction.types\";\nimport { A_TYPES__Scope_Constructor, A_TYPES__ScopeLinkedComponents, A_TYPES__ScopeLinkedConstructors } from \"../global/A-Scope/A-Scope.types\";\nimport { A_TYPES__InjectableTargets } from \"../global/A-Inject/A-Inject.types\";\n\n\n\nexport class A_TypeGuards {\n    // ===========================================================================\n    // ============================= BASE Type Guards ============================\n    // ===========================================================================\n    /**\n     * Check if value is a string\n     * \n     * @param value \n     * @returns \n     */\n    static isString(value: any): value is string {\n        return typeof value === 'string' || value instanceof String;\n    }\n    /**\n     * Check if value is a number\n     * \n     * @param value \n     * @returns \n     */\n    static isNumber(value: any): value is number {\n        return typeof value === 'number' && isFinite(value);\n    }\n    /**\n     * Check if value is a boolean\n     * \n     * @param value \n     * @returns \n     */\n    static isBoolean(value: any): value is boolean {\n        return typeof value === 'boolean';\n    }\n    /**\n     * Check if value is an array\n     * \n     * @param value \n     * @returns \n     */\n    static isArray(value: any): value is Array<any> {\n        return Array.isArray(value);\n    }\n    /**\n     * Check if value is an object\n     * \n     * @param value \n     * @returns \n     */\n    static isObject<T extends Object = Object>(value: any): value is T {\n        return value && typeof value === 'object' && !Array.isArray(value);\n    }\n    /**\n     * Check if value is a function\n     * \n     * @param value \n     * @returns \n     */\n    static isFunction(value: any): value is Function {\n        return typeof value === 'function';\n    }\n\n    static isUndefined(value: any): value is undefined {\n        return typeof value === 'undefined';\n    }\n\n    static isRegExp(value: any): value is RegExp {\n        return value instanceof RegExp;\n    }\n\n\n    // ===========================================================================\n    // ==========================A-Concept Type Guards ===========================\n    // ===========================================================================\n    /**\n     * Type guard to check if the constructor is of type A_Container\n     * \n     * @param ctor \n     * @returns \n     */\n    static isContainerConstructor(ctor: any): ctor is A_TYPES__Container_Constructor {\n        return typeof ctor === 'function' && A_CommonHelper.isInheritedFrom(ctor, A_Container);\n    }\n    /**\n     * Type guard to check if the constructor is of type A_Component\n     * \n     * @param ctor \n     * @returns \n     */\n    static isComponentConstructor(ctor: any): ctor is A_TYPES__Component_Constructor {\n        return typeof ctor === 'function' && A_CommonHelper.isInheritedFrom(ctor, A_Component);\n    }\n    /**\n     * Type guard to check if the constructor is of type A_Fragment\n     * \n     * @param ctor \n     * @returns \n     */\n    static isFragmentConstructor(ctor: any): ctor is A_TYPES__Fragment_Constructor {\n        return typeof ctor === 'function' && A_CommonHelper.isInheritedFrom(ctor, A_Fragment);\n    }\n    /**\n     * Type guard to check if the constructor is of type A_Entity\n     * \n     * @param ctor \n     * @returns \n     */\n    static isEntityConstructor(ctor: any): ctor is A_TYPES__Entity_Constructor {\n        return typeof ctor === 'function' && A_CommonHelper.isInheritedFrom(ctor, A_Entity);\n    }\n    /**\n     * Type guard to check if the constructor is of type A_Scope\n     * \n     * @param ctor \n     * @returns \n     */\n    static isScopeConstructor(ctor: any): ctor is A_TYPES__Scope_Constructor {\n        return typeof ctor === 'function' && A_CommonHelper.isInheritedFrom(ctor, A_Scope);\n    }\n    /**\n     * Type guard to check if the constructor is of type A_Scope\n     * \n     * @param ctor \n     * @returns \n     */\n    static isErrorConstructor(ctor: any): ctor is A_TYPES__Error_Constructor {\n        return typeof ctor === 'function' && A_CommonHelper.isInheritedFrom(ctor, A_Error);\n    }\n    /**\n     * Type guard to check if the constructor is of type A_Feature\n     * \n     * @param ctor \n     * @returns \n     */\n    static isFeatureConstructor(ctor: any): ctor is A_TYPES__Feature_Constructor {\n        return typeof ctor === 'function' && A_CommonHelper.isInheritedFrom(ctor, A_Feature);\n    }\n    /**\n     * Type guard to check if the constructor is of type A_Caller\n     * \n     * @param ctor \n     * @returns \n     */\n    static isCallerConstructor(ctor: any): ctor is A_TYPES__Caller_Constructor {\n        return typeof ctor === 'function' && A_CommonHelper.isInheritedFrom(ctor, A_Caller);\n    }\n    // ----------------------------------------------------------------------------\n    // Instance type guards\n    // ----------------------------------------------------------------------------\n    /**\n     * Type guard to check if the instance is of type A_Container\n     * \n     * @param instance \n     * @returns \n     */\n    static isContainerInstance(instance: any): instance is A_Container {\n        return instance instanceof A_Container;\n    }\n    /**\n     * Type guard to check if the instance is of type A_Component\n     * \n     * @param instance \n     * @returns \n     */\n    static isComponentInstance(instance: any): instance is A_Component {\n        return instance instanceof A_Component;\n    }\n\n    /**\n     * Type guard to check if the instance is of type A_Feature\n     * \n     * @param instance \n     * @returns \n     */\n    static isFeatureInstance(instance: any): instance is A_Feature {\n        return instance instanceof A_Feature;\n    }\n    /**\n     * Type guard to check if the instance is of type A_Fragment\n     * \n     * @param instance \n     * @returns \n     */\n    static isFragmentInstance(instance: any): instance is A_Fragment {\n        return instance instanceof A_Fragment;\n    }\n    /**\n     * Type guard to check if the instance is of type A_Entity\n     * \n     * @param instance \n     * @returns \n     */\n    static isEntityInstance(instance: any): instance is A_Entity {\n        return instance instanceof A_Entity;\n    }\n    /**\n     * Type guard to check if the instance is of type A_Scope\n     * \n     * @param instance \n     * @returns \n     */\n    static isScopeInstance(instance: any): instance is A_Scope {\n        return instance instanceof A_Scope;\n    }\n    /**\n     * Type guard to check if the instance is of type A_Error\n     * \n     * @param instance \n     * @returns \n     */\n    static isErrorInstance(instance: any): instance is A_Error {\n        return instance instanceof A_Error;\n    }\n    /**\n     * Type guard to check if the instance is of type A_ComponentMeta\n     * \n     * @param instance \n     * @returns \n     */\n    static isComponentMetaInstance(instance: any): instance is A_ComponentMeta {\n        return instance instanceof A_ComponentMeta;\n    }\n    /**\n     * Type guard to check if the instance is of type A_ContainerMeta\n     * \n     * @param instance \n     * @returns \n     */\n    static isContainerMetaInstance(instance: any): instance is A_ContainerMeta {\n        return instance instanceof A_ContainerMeta;\n    }\n    /**\n     * Type guard to check if the instance is of type A_EntityMeta\n     * \n     * @param instance \n     * @returns \n     */\n    static isEntityMetaInstance(instance: any): instance is A_EntityMeta {\n        return instance instanceof A_EntityMeta;\n    }\n\n\n\n    // ==========================================================================\n    // ========================= SPECIAL Type Guards =============================\n    // ===========================================================================\n    static isConstructorAllowedForScopeAllocation(target: any): target is A_TYPES__ScopeLinkedConstructors {\n        return A_TypeGuards.isContainerConstructor(target)\n            || A_TypeGuards.isFeatureConstructor(target);\n    }\n    static isInstanceAllowedForScopeAllocation(target: any): target is A_TYPES__ScopeLinkedComponents {\n        return A_TypeGuards.isContainerInstance(target)\n            || A_TypeGuards.isFeatureInstance(target);\n    }\n\n    static isConstructorAvailableForAbstraction(target: any): target is A_TYPES__AbstractionAvailableComponents {\n        return A_TypeGuards.isContainerInstance(target)\n            || A_TypeGuards.isComponentInstance(target);\n    }\n\n\n    static isTargetAvailableForInjection(target: any): target is A_TYPES__InjectableTargets {\n        return A_TypeGuards.isComponentConstructor(target)\n            || A_TypeGuards.isComponentInstance(target)\n            || A_TypeGuards.isContainerInstance(target);\n    }\n\n    static isAllowedForFeatureCall(param: any): param is A_TYPES__FeatureAvailableComponents {\n        return A_TypeGuards.isContainerInstance(param)\n            || A_TypeGuards.isComponentInstance(param)\n            || A_TypeGuards.isEntityInstance(param);\n    }\n\n    static isAllowedForFeatureDefinition(param: any): param is A_TYPES__FeatureAvailableComponents {\n        return A_TypeGuards.isContainerInstance(param)\n            || A_TypeGuards.isComponentInstance(param)\n            || A_TypeGuards.isEntityInstance(param);\n    }\n\n    static isAllowedForFeatureExtension(param: any): param is A_TYPES__FeatureExtendDecoratorTarget {\n        return A_TypeGuards.isComponentInstance(param);\n    }\n\n    static isAllowedForAbstractionDefinition(param: any): param is A_TYPES__AbstractionAvailableComponents {\n        return A_TypeGuards.isContainerInstance(param)\n            || A_TypeGuards.isComponentInstance(param);\n    }\n\n    static isAllowedForDependencyDefaultCreation(param: any): param is A_TYPES__Entity_Constructor | A_TYPES__Component_Constructor {\n        return A_TypeGuards.isComponentConstructor(param)\n            || A_CommonHelper.isInheritedFrom(param, A_Component)\n            || A_TypeGuards.isEntityConstructor(param)\n            || A_CommonHelper.isInheritedFrom(param, A_Entity)\n\n    }\n\n    /**\n     * Allows to check if the provided param is of constructor type.\n     * \n     * @param param \n     * @returns \n     */\n    static isConstructorType<T extends A_TYPES__Error_Init>(param: any): param is T {\n        return !!param && A_TypeGuards.isObject(param) && !(param instanceof Error) && \"title\" in param;\n    }\n}","import { A_Error } from \"../A-Error/A_Error.class\";\nimport { A_Stage } from \"../A-Stage/A-Stage.class\";\nimport { A_TYPES__FeatureError_Init } from \"./A-Feature.types\";\n\n\n\nexport class A_FeatureError extends A_Error<A_TYPES__FeatureError_Init> {\n\n    /**\n     * Indicates that the Feature has been interrupted\n     */\n    static readonly Interruption = 'Feature Interrupted';\n    /**\n     * Indicates that there was an error initializing the Feature\n     * \n     * Failed during the A-Feature initialization process\n     */\n    static readonly FeatureInitializationError = 'Unable to initialize A-Feature';\n    /**\n     * Indicates that there was an error processing the Feature\n     * \n     * Failed during the A-Feature processing\n     */\n    static readonly FeatureProcessingError = 'Error occurred during A-Feature processing';\n\n    // =======================================================================\n    // ---------------------- Decorator Errors -----------------------------\n    // =======================================================================\n    /**\n     * Indicates that there was an error defining the Feature\n     * \n     * Failed during the @A_Feature.Define() decorator execution\n     */\n    static readonly FeatureDefinitionError = 'Unable to define A-Feature';\n    /**\n     * Indicates that there was an error extending the Feature\n     * \n     * Failed during the @A_Feature.Extend() decorator execution\n     */\n    static readonly FeatureExtensionError = 'Unable to extend A-Feature';\n\n    \n    /**\n     * Stage where the error occurred\n     */\n    stage?: A_Stage\n\n\n    protected fromConstructor(params: A_TYPES__FeatureError_Init): void {\n        super.fromConstructor(params);\n\n        this.stage = params.stage;\n    }\n}","import {\n    A_TYPES__FeatureDefineDecoratorConfig,\n    A_TYPES__FeatureDefineDecoratorDescriptor,\n    A_TYPES__FeatureDefineDecoratorMeta,\n    A_TYPES__FeatureDefineDecoratorTarget\n} from \"./A-Feature.types\";\nimport { A_Context } from \"@adaas/a-concept/global/A-Context/A-Context.class\";\nimport { A_EntityMeta } from \"@adaas/a-concept/global/A-Entity/A-Entity.meta\";\nimport { A_ContainerMeta } from \"@adaas/a-concept/global/A-Container/A-Container.meta\";\nimport { A_ComponentMeta } from \"@adaas/a-concept/global/A-Component/A-Component.meta\";\nimport { A_Meta } from \"@adaas/a-concept/global/A-Meta/A-Meta.class\";\nimport { A_TYPES__EntityMetaKey } from \"@adaas/a-concept/global/A-Entity/A-Entity.constants\";\nimport { A_TYPES__ContainerMetaKey } from \"@adaas/a-concept/global/A-Container/A-Container.constants\";\nimport { A_TYPES__ComponentMetaKey } from \"@adaas/a-concept/global/A-Component/A-Component.constants\";\nimport { A_TypeGuards } from \"@adaas/a-concept/helpers/A_TypeGuards.helper\";\nimport { A_FeatureError } from \"./A-Feature.error\";\nimport { A_CommonHelper } from \"@adaas/a-concept/helpers/A_Common.helper\";\n\n/**\n * A-Feature decorator\n * \n * This decorator allows to define a custom lifecycle stage for the Container.\n * These stages are executed in a container-specific order and can be extended by components that are injected into the container.\n * This approach allows to create a flexible and extendable architecture for the application.\n * \n * The main difference between the A-Feature and A-Feature decorators is that A-Feature methods can be inherited and overridden by child classes.\n * \n * \n * @param params \n * @returns \n */\nexport function A_Feature_Define(\n    config: Partial<A_TYPES__FeatureDefineDecoratorConfig> = {}\n) {\n    return function (\n        target: A_TYPES__FeatureDefineDecoratorTarget,\n        propertyKey: string,\n        descriptor: A_TYPES__FeatureDefineDecoratorDescriptor\n    ) {\n        // for error messages\n        const componentName = A_CommonHelper.getComponentName(target)\n\n\n        if (!A_TypeGuards.isAllowedForFeatureDefinition(target))\n            throw new A_FeatureError(\n                A_FeatureError.FeatureDefinitionError,\n                `A-Feature cannot be defined on the ${componentName} level`\n            );\n\n        const meta: A_EntityMeta | A_ContainerMeta | A_ComponentMeta = A_Context.meta(target.constructor as any);\n\n        let metaKey;\n\n        switch (true) {\n            case A_TypeGuards.isEntityInstance(target):\n                metaKey = A_TYPES__EntityMetaKey.FEATURES;\n                break;\n            case A_TypeGuards.isContainerInstance(target):\n                metaKey = A_TYPES__ContainerMetaKey.FEATURES\n                break;\n            case A_TypeGuards.isComponentInstance(target):\n                metaKey = A_TYPES__ComponentMetaKey.FEATURES\n                break;\n        }\n\n\n        // Get the existed metadata or create a new one\n        const existedMeta: A_Meta<{\n            /**\n             * Where Key is the name of the feature\n             * \n             * Where value is the list of features\n             */\n            [Key: string]: A_TYPES__FeatureDefineDecoratorMeta\n        }> = meta.get(metaKey) || new A_Meta();\n\n\n        const name = config.name || propertyKey;\n        //  default to false\n        const invoke = config.invoke || false;\n\n\n        // Set the metadata of the method to define a custom Feature with name \n        existedMeta.set(propertyKey, {\n            name: `${target.constructor.name}.${name}`,\n            handler: propertyKey,\n            invoke: invoke,\n            template: config.template && config.template.length ? config.template.map(\n                item => ({\n                    ...item,\n                    before: item.before || '',\n                    after: item.after || '',\n                    behavior: item.behavior || 'sync',\n                    throwOnError: true,\n                    override: item.override || ''\n\n                })\n            ) : [],\n        });\n\n        //  Update the metadata of the container with the new Feature definition\n        A_Context\n            .meta(target.constructor as any)\n            .set(\n                metaKey,\n                existedMeta\n            );\n\n        const originalMethod = descriptor.value!;\n\n        // Wrap the original method to add the call to `call`\n        // this helps to automatically call the container/entity/component method when it's called\n        descriptor.value = function (...args: any[]) {\n\n            // Call the original method\n            if (!invoke)\n                return originalMethod.apply(this, args);\n            else\n                originalMethod.apply(this, args);\n\n            // Call your `call` with the function name\n            if (typeof (this as A_TYPES__FeatureDefineDecoratorTarget).call === \"function\" && invoke)\n                return (this as A_TYPES__FeatureDefineDecoratorTarget).call(name);\n\n        };\n\n        return descriptor;\n    };\n}","import { A_Context } from \"@adaas/a-concept/global/A-Context/A-Context.class\";\nimport { A_Meta } from \"@adaas/a-concept/global/A-Meta/A-Meta.class\";\nimport { A_TYPES__FeatureExtendDecoratorConfig, A_TYPES__FeatureExtendDecoratorDescriptor, A_TYPES__FeatureExtendDecoratorScopeItem, A_TYPES__FeatureExtendDecoratorTarget } from \"./A-Feature.types\";\nimport { A_TypeGuards } from \"@adaas/a-concept/helpers/A_TypeGuards.helper\";\nimport { A_TYPES__ComponentMetaKey } from \"../A-Component/A-Component.constants\";\nimport { A_FeatureError } from \"./A-Feature.error\";\nimport { A_CommonHelper } from \"@adaas/a-concept/helpers/A_Common.helper\";\n\n\n\n\n/**\n * A-Extend decorator\n * \n * This decorator allows to define a custom Extend stage for the Container.\n * These stages are executed in a container-specific order and can be extended by components that are injected into the container.\n * This approach allows to create a flexible and extendable architecture for the application.\n * \n * The main difference between the A-Extend and A-Extend decorators is that A-Extend methods can be inherited and overridden by child classes.\n * \n * \n * @param params \n * @returns \n */\n/**\n * Use regexp in case if you need more flexibility and control over the name of the method\n * \n * @param regexp \n */\nexport function A_Feature_Extend(\n    /**\n     * The regular expression to match the name of the Feature method to be extended\n     * \n     * Example:\n     * \n     * ```ts\n     *  @A_Feature.Extend(/.*\\.load/)\n     * ```\n     */\n    regexp: RegExp\n)\n/**\n * In this case the name configurations will be used as an input to get scope and name of target function\n * [!] Not that for all SCOPE will be used OR operator\n * \n * @param config \n */\nexport function A_Feature_Extend(\n    /**\n     * Configuration for the A-Feature-Extend decorator\n     */\n    config: Partial<A_TYPES__FeatureExtendDecoratorConfig>\n)\n/**\n * In this case the name of function will be used as a name of the Feature.\n * [!] AND it will be applicable for ANY element where the name is the same as the name of the function\n */\nexport function A_Feature_Extend()\nexport function A_Feature_Extend(\n    param1?: Partial<A_TYPES__FeatureExtendDecoratorConfig> | RegExp\n) {\n    return function (\n        target: A_TYPES__FeatureExtendDecoratorTarget,\n        propertyKey: string,\n        descriptor: A_TYPES__FeatureExtendDecoratorDescriptor\n    ) {\n        // for error messages\n        const componentName = A_CommonHelper.getComponentName(target)\n\n        if (!A_TypeGuards.isAllowedForFeatureExtension(target))\n            throw new A_FeatureError(\n                A_FeatureError.FeatureExtensionError,\n                `A-Feature-Extend cannot be applied on the ${componentName} level`\n            );\n\n        let targetRegexp: RegExp;\n        let behavior: 'sync' | 'async' = 'sync';\n        let before: string = '';\n        let after: string = '';\n        let override: string = '';\n        let include: Array<A_TYPES__FeatureExtendDecoratorScopeItem> = [];\n        let exclude: Array<A_TYPES__FeatureExtendDecoratorScopeItem> = [];\n        let throwOnError: boolean = true;\n\n\n\n        switch (true) {\n            case A_TypeGuards.isRegExp(param1):\n                targetRegexp = param1;\n                break;\n\n            case !!param1 && typeof param1 === 'object':\n\n                if (Array.isArray(param1.scope))\n                    include = param1.scope;\n                else if (!!param1.scope && typeof param1.scope === 'object') {\n                    if (Array.isArray(param1.scope.include))\n                        include = param1.scope.include;\n                    if (Array.isArray(param1.scope.exclude))\n                        exclude = param1.scope.exclude;\n                }\n\n\n                targetRegexp = buildTargetRegexp(param1, include, exclude, propertyKey);\n\n                behavior = param1.behavior || behavior;\n                throwOnError = param1.throwOnError !== undefined ? param1.throwOnError : throwOnError;\n\n                before = A_TypeGuards.isArray(param1.before)\n                    ? new RegExp(`^${param1.before.join('|').replace(/\\./g, '\\\\.')}$`).source\n                    : param1.before instanceof RegExp\n                        ? param1.before.source\n                        : ''\n                after = A_TypeGuards.isArray(param1.after)\n                    ? new RegExp(`^${param1.after.join('|').replace(/\\./g, '\\\\.')}$`).source\n                    : param1.after instanceof RegExp\n                        ? param1.after.source\n                        : ''\n\n                override = A_TypeGuards.isArray(param1.override)\n                    ? new RegExp(`^${param1.override.join('|').replace(/\\./g, '\\\\.')}$`).source\n                    : param1.override instanceof RegExp\n                        ? param1.override.source\n                        : ''\n                break;\n\n            default:\n                targetRegexp = new RegExp(`^.*${propertyKey.replace(/\\./g, '\\\\.')}$`);\n                break;\n        }\n\n\n        const existedDefinitions = A_Context\n            .meta(target)\n            .get(A_TYPES__ComponentMetaKey.FEATURES);\n\n\n        // Get the existed metadata or create a new one\n        const meta = A_Context\n            .meta(target)\n\n        const existedMeta = meta.get(A_TYPES__ComponentMetaKey.EXTENSIONS)\n            ? new A_Meta().from(meta.get(A_TYPES__ComponentMetaKey.EXTENSIONS)!)\n            : new A_Meta();\n\n        if (existedDefinitions\n            && existedDefinitions.size()\n            && existedDefinitions.has(propertyKey)\n            && existedDefinitions.get(propertyKey)!.invoke\n        ) {\n            throw new A_FeatureError(\n                A_FeatureError.FeatureExtensionError,\n                `A-Feature-Extend cannot be used on the method \"${propertyKey}\" because it is already defined as a Feature with \"invoke\" set to true. Please remove the A-Feature-Extend decorator or set \"invoke\" to false in the A-Feature decorator.`\n            );\n        }\n\n        const existedMetaValue = [\n            ...(existedMeta.get(targetRegexp.source) || [])\n        ];\n\n        const existedIndex = existedMetaValue.findIndex(item => item.handler === propertyKey);\n\n        const extension = {\n            name: targetRegexp.source,\n            handler: propertyKey,\n            behavior,\n            before,\n            after,\n            throwOnError,\n            override\n        }\n\n        if (existedIndex !== -1) {\n            // Update the existing method in the metadata\n            existedMetaValue[existedIndex] = extension;\n        } else {\n            // Add the new method to the metadata\n            existedMetaValue.push(extension);\n        }\n\n        // Add the new method to the metadata\n        existedMetaValue.push();\n\n        // Set the metadata of the method to define a custom Feature with name\n        existedMeta.set(targetRegexp.source, existedMetaValue);\n\n        //  Update the metadata of the container with the new Feature definition\n        A_Context\n            .meta(target)\n            .set(A_TYPES__ComponentMetaKey.EXTENSIONS, existedMeta);\n    };\n}\n\n\n/**\n * Builds a target regular expression based on the provided parameters.\n * \n * @param param1 - The first parameter, which can be a string or an object.\n * @param include - An array of items to include in the regular expression.\n * @param exclude - An array of items to exclude from the regular expression.\n * @param propertyKey - The property key to use in the regular expression.\n * @returns A regular expression object.\n */\nexport function buildTargetRegexp(\n    param1: any,\n    include: any[],\n    exclude: any[],\n    propertyKey: string\n) {\n    const includePart = include.length\n        ? `(${include.map(el => el.name).join('|')})`\n        : `.*`;\n\n    const excludePart = exclude.length\n        ? `(?!${exclude.map(el => el.name).join('|')})`\n        : ``;\n\n    const pattern = param1.scope\n        ? `^${excludePart}${includePart}\\\\.${param1.name || propertyKey}$`\n        : `.*\\\\.${param1.name || propertyKey}$`;\n\n    return new RegExp(pattern);\n}","import { A_Container } from \"../A-Container/A-Container.class\"\nimport { A_TYPES__Component_Constructor } from \"../A-Component/A-Component.types\"\n\n\n\nexport enum A_TYPES__A_Stage_Status {\n    /**\n     * The stage is currently being processed\n     */\n    PROCESSING = 'PROCESSING',\n    /**\n     * The stage has been completed\n     */\n    COMPLETED = 'COMPLETED',\n    /**\n     * The stage has failed\n     */\n    FAILED = 'FAILED',\n    /**\n     * The stage has been skipped\n     */\n    SKIPPED = 'SKIPPED',\n    /**\n     * The stage has been paused\n     */\n    // PAUSED = 'PAUSED',\n    /**\n     * The stage has been stopped\n     */\n    // STOPPED = 'STOPPED',\n    /**\n     * The stage has been started\n     */\n    // STARTED = 'STARTED',\n    /**\n     * The stage has been initialized\n     */\n    INITIALIZED = 'INITIALIZED',\n    /**\n     * The stage has been aborted\n     */\n    ABORTED = 'ABORTED'\n}\n\nexport type A_TYPES_StageExecutionBehavior = 'async' | 'sync'\n\n\nexport type A_TYPES__A_StageStep = {\n    /**\n     * The component to be called\n     */\n    component: A_TYPES__Component_Constructor | A_Container | string\n    /**\n     * The method to be called on the component\n     */\n    handler: string,\n    /**\n     * Original Feature Extension name\n     * \n     * [!] could be string or regex\n     * \n     */\n    name: string,\n\n    /**\n     * In case its async it will be executed independently from the main thread.\n     * \n     * [!] However, in case of sync, it will be executed in the main thread.in the order of the declaration.\n     * \n     */\n    behavior: A_TYPES_StageExecutionBehavior\n\n    /**\n     * Allows to define the order of the execution of the method.\n     * \n     * [!] In case the method has circular dependencies it will Throw an error.\n     * \n     */\n    before: string\n\n    /**\n     * Allows to define the order of the execution of the method.\n     * \n     * [!] In case the method has circular dependencies it will Throw an error.\n     * \n     */\n    after: string,\n\n    /**\n     * Indicates whether to throw an error if the step fails.\n     * \n     * [!] By default is true\n     */\n    throwOnError: boolean\n\n    /**\n     * \n     */\n    override: string\n}\n\n\n\nexport type A_TYPES__Stage_Serialized = {\n\n    /**\n     * The name of the stage\n     */\n    name: string,\n\n    /**\n     *  The status of the stage\n     * \n     */\n    status: A_TYPES__A_Stage_Status,\n\n\n}\n\n\n\nexport type A_TYPES__A_StageStepProcessingExtraParams = {\n    steps: A_TYPES__A_StageStep[]\n    filter: (step: A_TYPES__A_StageStep) => boolean\n}\n","import { A_Error } from \"../A-Error/A_Error.class\";\n\n\nexport class A_StageError extends A_Error {\n\n    static readonly ArgumentsResolutionError = 'A-Stage Arguments Resolution Error';\n\n\n    static get CompileError(): string {\n        return 'Unable to compile A-Stage';\n    }\n\n}\n","import {\n    A_TYPES__A_Stage_Status,\n    A_TYPES__A_StageStep,\n    A_TYPES__Stage_Serialized\n} from \"./A-Stage.types\";\nimport { A_Context } from \"../A-Context/A-Context.class\";\nimport { A_Feature } from \"../A-Feature/A-Feature.class\";\nimport { A_Scope } from \"../A-Scope/A-Scope.class\";\nimport { A_StageError } from \"./A-Stage.error\";\nimport { A_Error } from \"../A-Error/A_Error.class\";\nimport { A_TypeGuards } from \"@adaas/a-concept/helpers/A_TypeGuards.helper\";\nimport { A_TYPES__ScopeResolvableComponents } from \"../A-Scope/A-Scope.types\";\nimport { A_TYPES__Container_Constructor } from \"../A-Container/A-Container.types\";\nimport { A_TYPES__Component_Constructor } from \"../A-Component/A-Component.types\";\nimport { A_CommonHelper } from \"@adaas/a-concept/helpers/A_Common.helper\";\n\n\n\nexport class A_Stage {\n\n    /**\n     * The feature that owns this stage\n     */\n    private readonly _feature!: A_Feature;\n    /**\n     * Initial Instructions to process the stage\n     */\n    private readonly _definition!: A_TYPES__A_StageStep;\n    /**\n     * Possible errors during stage processing\n     */\n    private _error?: A_Error;\n    /**\n     * Indicates the current status of the stage\n     */\n    private _status: A_TYPES__A_Stage_Status = A_TYPES__A_Stage_Status.INITIALIZED;\n\n    /**\n     * Promise that will be resolved when the stage is Processed\n     */\n    private _processed: Promise<void> | undefined;\n\n\n    /**\n     * A_Stage is a callable A_Function within A_Feature that should be run with specific parameters.\n     * [!] Depending on the Stage Definition type sync/async function can be executed correspondingly.\n     * \n     * A-Stage is a common object that uses to simplify logic and re-use of A-Feature internals for better composition. \n     */\n    constructor(\n        /**\n         * The feature that owns this stage\n         */\n        feature: A_Feature,\n        /**\n         * The step definitions of the stage\n         */\n        step: A_TYPES__A_StageStep\n    ) {\n        this._feature = feature;\n        this._definition = step;\n    }\n\n    /**\n     * Returns the name of the stage\n     */\n    get name(): string {\n        return this.toString();\n    }\n    /**\n     * Returns the definition of the stage\n     */\n    get definition(): A_TYPES__A_StageStep {\n        return this._definition;\n    }\n    /**\n     * Returns the current status of the stage\n     */\n    get status(): A_TYPES__A_Stage_Status {\n        return this._status;\n    }\n    /**\n     * Returns the feature that owns this stage\n     */\n    get feature(): A_Feature {\n        return this._feature;\n    }\n    /**\n     * Returns true if the stage is processed (completed, failed, or skipped)\n     */\n    get isProcessed(): boolean {\n        return this._status === A_TYPES__A_Stage_Status.COMPLETED\n            || this._status === A_TYPES__A_Stage_Status.FAILED\n            || this._status === A_TYPES__A_Stage_Status.SKIPPED;\n    }\n    /**\n     * Returns the error of the stage\n     */\n    get error(): A_Error | undefined {\n        return this._error;\n    }\n\n    /**\n     * Resolves the arguments of the step\n     * \n     * @param step \n     * @returns \n     */\n    protected async getStepArgs(\n        scope: A_Scope,\n        step: A_TYPES__A_StageStep\n    ) {\n        let resolverConstructor: A_TYPES__Container_Constructor | A_TYPES__Component_Constructor;\n\n        switch (true) {\n            case A_TypeGuards.isContainerInstance(step.component):\n                resolverConstructor = step.component.constructor as A_TYPES__Container_Constructor;\n                break;\n\n            case A_TypeGuards.isString(step.component):\n                resolverConstructor = scope.resolveConstructor(step.component);\n                break;\n\n            default:\n                resolverConstructor = step.component;\n                break;\n        }\n\n\n        return Promise\n            .all(A_Context\n                .meta(resolverConstructor)\n                .injections(step.handler)\n                .map(async arg => {\n                    switch (true) {\n                        case A_TypeGuards.isCallerConstructor(arg.target):\n                            return this._feature.caller.component;\n\n                        case A_TypeGuards.isScopeConstructor(arg.target):\n                            return scope;\n\n                        case A_TypeGuards.isFeatureConstructor(arg.target):\n                            return this._feature;\n\n                        case A_TypeGuards.isEntityConstructor(arg.target) && 'instructions' in arg && !!arg.instructions:\n                            return scope.resolve(arg.target, arg.instructions)\n\n                        default: {\n                            const { target, require, create, defaultArgs } = arg;\n\n                            let dependency = scope.resolve(target as any);\n\n                            if (create && !dependency && A_TypeGuards.isAllowedForDependencyDefaultCreation(target)) {\n                                const newDependency = new target(...defaultArgs);\n\n                                scope.register(newDependency);\n                                return newDependency;\n                            }\n\n                            if (require && !dependency) {\n                                throw new A_StageError(\n                                    A_StageError.ArgumentsResolutionError,\n                                    `Unable to resolve required argument ${A_CommonHelper.getComponentName(arg.target)} for stage ${this.name} in scope ${scope.name}`\n                                );\n                            }\n\n                            return scope.resolve(arg.target)\n                        }\n                    }\n                })\n            )\n    }\n\n\n    /**\n     * Resolves the component of the step\n     * \n     * @param step \n     * @returns \n     */\n    protected getStepComponent(\n        scope: A_Scope,\n        step: A_TYPES__A_StageStep\n    ) {\n        const { component, handler } = step;\n\n        let instance: A_TYPES__ScopeResolvableComponents | undefined\n\n        switch (true) {\n            case A_TypeGuards.isContainerInstance(component):\n                instance = component;\n                break;\n\n            case A_TypeGuards.isString(component):\n                instance = scope.resolve(component);\n                break;\n\n            default:\n                instance = scope.resolve(component);\n                break;\n        }\n\n        if (!instance)\n            throw new A_StageError(A_StageError.CompileError, `Unable to resolve component ${typeof component === 'string' ? component : component.name} from scope ${scope.name}`);\n\n        if (!instance[handler])\n            throw new A_StageError(A_StageError.CompileError, `Handler ${handler} not found in ${instance.constructor.name}`);\n\n        return instance;\n    }\n\n\n\n    /**\n     * Calls the handler of the step\n     * \n     * @param step \n     * @returns \n     */\n    protected async callStepHandler(\n        step: A_TYPES__A_StageStep,\n        scope: A_Scope\n    ) {\n        // 1) Resolve component\n        const component = await this.getStepComponent(scope, step);\n        // 2) Resolve arguments\n        const callArgs = await this.getStepArgs(scope, step);\n\n        // 3) Call handler\n        return await component[step.handler](...callArgs);\n    }\n\n\n    skip() {\n        this._status = A_TYPES__A_Stage_Status.SKIPPED;\n    }\n\n\n    /**\n     * This method processes the stage by executing all the steps\n     * \n     * @param scope - Scope to be used to resolve the steps dependencies\n     */\n    async process(\n        /**\n         * Scope to be used to resolve the steps dependencies\n         */\n        scope?: A_Scope,\n    ): Promise<void> {\n\n        const targetScope = A_TypeGuards.isScopeInstance(scope)\n            ? scope\n            : this._feature.scope;\n\n        if (!this._processed)\n            this._processed = new Promise<void>(\n                async (resolve, reject) => {\n                    try {\n                        this._status = A_TYPES__A_Stage_Status.PROCESSING;\n\n                        if (this._definition.behavior === 'sync') {\n                            // in case we have to wait for the result\n                            await this.callStepHandler(this._definition, targetScope);\n                        } else {\n                            // in case we don't have to wait for the result\n                            this.callStepHandler(this._definition, targetScope);\n                        }\n\n                        this.completed();\n\n                        return resolve();\n                    } catch (error) {\n                        const wrappedError = new A_Error(error as any);\n\n                        this.failed(wrappedError);\n\n\n                        if (this._definition.throwOnError) {\n                            return resolve();\n                        } else {\n                            return reject(wrappedError);\n                        }\n                    }\n                });\n\n        return this._processed;\n    }\n\n\n    // ==========================================\n    // ============ Status methods =============\n    // ==========================================\n\n    protected completed() {\n        this._status = A_TYPES__A_Stage_Status.COMPLETED;\n    }\n\n    protected failed(\n        error: Error | A_Error | any\n    ) {\n        this._error = new A_Error(error);\n\n        this._status = A_TYPES__A_Stage_Status.FAILED;\n    }\n\n\n\n    // ==========================================\n    // ============ Serialization ===============\n    // ==========================================\n    /**\n     * Serializes the stage to JSON\n     * \n     */\n    toJSON(): A_TYPES__Stage_Serialized {\n        return {\n            name: this.name,\n            status: this.status,\n        }\n    }\n\n    /**\n     * Returns a string representation of the stage\n     * \n     * @returns \n     */\n    toString() {\n        return `A-Stage(${this._feature.name}::${this._definition.behavior}@${this._definition.handler})`;\n    }\n}   ","import { A_Error } from \"../A-Error/A_Error.class\";\n\n\n\nexport class A_StepManagerError extends A_Error {\n\n\n    static readonly CircularDependencyError = 'A-StepManager Circular Dependency Error';\n\n}","import { A_Feature } from \"../A-Feature/A-Feature.class\";\nimport { A_TYPES__FeatureDefineDecoratorTemplateItem } from \"../A-Feature/A-Feature.types\";\nimport { A_Stage } from \"../A-Stage/A-Stage.class\";\nimport { A_TYPES__A_StageStep } from \"../A-Stage/A-Stage.types\";\nimport { A_StepManagerError } from \"./A-StepManager.error\";\n\nexport class A_StepsManager {\n\n    public entities: A_TYPES__A_StageStep[];\n    public graph: Map<string, Set<string>>;\n    public visited: Set<string>;\n    public tempMark: Set<string>;\n    public sortedEntities: string[];\n\n\n    private _isBuilt: boolean = false;\n\n    constructor(entities: Array<A_TYPES__FeatureDefineDecoratorTemplateItem>) {\n        this.entities = this.prepareSteps(entities);\n\n        this.graph = new Map();\n        this.visited = new Set();\n        this.tempMark = new Set();\n        this.sortedEntities = [];\n\n    }\n\n    private prepareSteps(\n        entities: Array<A_TYPES__FeatureDefineDecoratorTemplateItem>\n    ): Array<A_TYPES__A_StageStep> {\n        return entities\n            .map(step => ({\n                ...step,\n\n                behavior: step.behavior || 'sync',\n                before: step.before || '',\n                after: step.after || '',\n                override: step.override || '',\n                throwOnError: false\n            }));\n    }\n\n    private ID(step: A_TYPES__A_StageStep) {\n        return `${typeof step.component === 'string' ? step.component : step.component.name}.${step.handler}`;\n    }\n\n    private buildGraph() {\n        if (this._isBuilt) return;\n        this._isBuilt = true;\n\n        // Filter override\n        this.entities = this.entities\n            .filter((step, i, self) =>\n                !self.some(s => s.override ? new RegExp(s.override).test(this.ID(step)) : false)\n            );\n\n        // Initialize graph nodes\n        this.entities.forEach(entity => this.graph.set(this.ID(entity), new Set()));\n\n        // Add directed edges based on 'before' and 'after'\n        this.entities.forEach(entity => {\n            const entityId = this.ID(entity);\n\n            // Add edges for 'before' dependencies\n            // If entity should execute before targets, then targets depend on entity\n            // So we add edges: target -> entity (target depends on entity)\n            if (entity.before) {\n                const targets = this.matchEntities(entityId, entity.before);\n                targets.forEach(target => {\n                    if (!this.graph.has(target)) this.graph.set(target, new Set());\n                    this.graph.get(target)!.add(entityId); // target depends on entity\n                });\n            }\n\n            // Add edges for 'after' dependencies  \n            // If entity should execute after sources, then entity depends on sources\n            // So we add edges: entity -> source (entity depends on source)\n            if (entity.after) {\n                const sources = this.matchEntities(entityId, entity.after);\n\n                sources.forEach(source => {\n                    if (!this.graph.has(entityId)) this.graph.set(entityId, new Set());\n                    this.graph.get(entityId)!.add(source); // entity depends on source\n                });\n            }\n        });\n    }\n\n    // Match entities by name or regex\n    private matchEntities(entityId: string, pattern: string): string[] {\n        const regex = new RegExp(pattern);\n\n        return this.entities\n            .filter(entity => regex.test(this.ID(entity)) && this.ID(entity) !== entityId)\n            .map(entity => this.ID(entity));\n    }\n\n    // Topological sort with cycle detection\n    private visit(node: string): void {\n        if (this.tempMark.has(node)) {\n            return;\n            // TODO: maybe we have to keep this error but only for partial cases\n            throw new A_StepManagerError(\n                A_StepManagerError.CircularDependencyError,\n                `Circular dependency detected involving step: ${node}. Make sure that your 'before' and 'after' dependencies do not create cycles.`\n            );\n        }\n\n        if (!this.visited.has(node)) {\n            this.tempMark.add(node);\n\n\n            (this.graph.get(node) || []).forEach(neighbor => this.visit(neighbor));\n            this.tempMark.delete(node);\n            this.visited.add(node);\n            this.sortedEntities.push(node);\n\n            // // Visit neighbors in stable order (preserving original order)\n            // const neighbors = Array.from(this.graph.get(node) || []);\n            // // neighbors.sort((a, b) => {\n            // //     const orderA = this.originalOrder.get(a) || 0;\n            // //     const orderB = this.originalOrder.get(b) || 0;\n            // //     return orderA - orderB;\n            // // });\n\n            // neighbors.forEach(neighbor => this.visit(neighbor));\n            // this.tempMark.delete(node);\n            // this.visited.add(node);\n            // this.sortedEntities.push(node);\n        }\n    }\n\n\n    toSortedArray(): Array<string> {\n        this.buildGraph();\n\n        // Start topological sort\n        this.entities.forEach(entity => {\n            if (!this.visited.has(this.ID(entity))) this.visit(this.ID(entity));\n        });\n\n        return this.sortedEntities;\n    }\n\n    // Sort the entities based on dependencies\n    toStages(feature: A_Feature): Array<A_Stage> {\n\n\n        const sortedNames = this.toSortedArray();\n\n\n        // Map sorted names back to entity objects\n        return sortedNames\n            .map(id => {\n                const step = this.entities.find(entity => this.ID(entity) === id)!;\n\n\n                return new A_Stage(feature, step);\n            });\n    }\n}\n\n\n","import {\n    A_TYPES__Feature_Init,\n    A_TYPES__Feature_InitWithComponent,\n    A_TYPES__Feature_InitWithTemplate,\n    A_TYPES__FeatureAvailableComponents,\n    A_TYPES__FeatureState,\n} from \"./A-Feature.types\";\nimport { A_Feature_Define } from \"@adaas/a-concept/global/A-Feature/A-Feature-Define.decorator\";\nimport { A_Feature_Extend } from \"@adaas/a-concept/global/A-Feature/A-Feature-Extend.decorator\";\nimport { A_Stage } from \"../A-Stage/A-Stage.class\";\nimport { A_StepsManager } from \"@adaas/a-concept/global/A-StepManager/A-StepManager.class\";\nimport { A_StageError } from \"../A-Stage/A-Stage.error\";\nimport { A_TypeGuards } from \"@adaas/a-concept/helpers/A_TypeGuards.helper\";\nimport { A_FeatureError } from \"./A-Feature.error\";\nimport { A_Context } from \"../A-Context/A-Context.class\";\nimport { A_Caller } from \"../A-Caller/A_Caller.class\";\nimport { A_Scope } from \"../A-Scope/A-Scope.class\";\nimport { A_Component } from \"../A-Component/A-Component.class\";\n\n\n/**\n * A_Feature is representing a feature that can be executed across multiple components\n * This class stores the steps of the feature and executes them in order of appearance\n * \n * Using A_Feature.Define and A_Feature.Extend decorators to define and extend the feature methods \n * across the different, distributed components\n * \n */\nexport class A_Feature<T extends A_TYPES__FeatureAvailableComponents = A_TYPES__FeatureAvailableComponents> {\n\n    // =============================================================================\n    // --------------------------- Static Methods ---------------------------------\n    // =============================================================================\n    /**\n     * Define a new A-Feature\n     */\n    static get Define(): typeof A_Feature_Define {\n        return A_Feature_Define;\n    }\n\n    /**\n     * Extend an existing A-Feature\n     */\n    static get Extend(): typeof A_Feature_Extend {\n        return A_Feature_Extend;\n    }\n    // =============================================================================\n    // --------------------------- Internal Properties ----------------------------\n    // =============================================================================\n    /**\n     * The name of the Feature\n     */\n    protected _name!: string;\n    /**\n     * List of stages that are part of this Feature\n     */\n    protected _stages: Array<A_Stage> = [];\n    /**\n     * The Stage currently being processed\n     */\n    protected _current?: A_Stage;\n    /**\n     * Actual Index of the current Stage being processed\n     */\n    protected _index: number = 0;\n    /**\n     * Steps Manager to organize the steps into stages\n     */\n    protected _SM!: A_StepsManager;\n    /**\n     * The Caller that initiated the Feature call\n     */\n    protected _caller!: A_Caller<T>;\n    /**\n     * The current state of the Feature\n     */\n    protected _state: A_TYPES__FeatureState = A_TYPES__FeatureState.INITIALIZED;\n    /**\n     * The error that caused the Feature to be interrupted\n     */\n    protected _error?: A_FeatureError\n\n\n\n    /**\n     * A-Feature is a pipeline distributed by multiple components that can be easily attached or detached from the scope. \n     * Feature itself does not have scope, but attached to the caller who dictates how feature should be processed. \n     * \n     * Comparing to A-Command Feature does not store any state except statuses for better analysis. \n     * \n     * [!] Note: If A-Feature should have result use A-Fragment \n     * \n     * @param params \n     */\n    constructor(\n        /**\n         * Feature Initialization parameters\n         */\n        params: A_TYPES__Feature_Init<T>\n    ) {\n        this.validateParams(params);\n\n        const initializer = this.getInitializer(params);\n        // the returned initializer is already bound to `this` (we used .bind(this)),\n        // so calling it will run the appropriate logic on this instance:\n        initializer.call(this, params);\n    }\n\n\n    /**\n     * The name of the Feature\n     */\n    get name(): string { return this._name; }\n    /**\n     * The error that caused the Feature to be interrupted\n     */\n    get error(): A_FeatureError | undefined { return this._error; }\n    /**\n     * The current state of the Feature\n     */\n    get state(): A_TYPES__FeatureState { return this._state; }\n    /**\n     * Sets the current state of the Feature\n     */\n    get index(): number { return this._index; }\n    /**\n     * Returns the current A-Feature Stage\n     */\n    get stage(): A_Stage | undefined { return this._current; }\n    /**\n     * The Caller that initiated the Feature call\n     */\n    get caller(): A_Caller<T> { return this._caller; }\n    /**\n     * The Scope allocated for the Feature Execution\n     */\n    get scope(): A_Scope { return A_Context.scope(this); }\n    /**\n     * The number of stages in the feature\n     */\n    get size(): number {\n        return this._stages.length;\n    }\n\n    /**\n     * This method checks if the A-Feature is done\n     * \n     * @returns \n     */\n    get isDone(): boolean {\n        return !this.stage\n            || this._index >= this._stages.length\n            || this.state === A_TYPES__FeatureState.COMPLETED\n            || this.state === A_TYPES__FeatureState.INTERRUPTED;\n    }\n    /**\n     * Iterator to iterate over the steps of the feature\n     * \n     * @returns \n     */\n    [Symbol.iterator](): Iterator<A_Stage, any> {\n        return {\n            next: (): IteratorResult<A_Stage, any> => {\n                if (!this.isDone) {\n                    this._current = this._stages[this._index];\n                    this._index++;\n\n                    return {\n                        value: this._current,\n                        done: false\n                    };\n                } else {\n                    this._current = undefined; // Reset current on end\n\n                    return {\n                        value: undefined,\n                        done: true\n                    };\n                }\n            }\n        };\n    }\n\n    // ============================================================================\n    // ------------------------ Initialization Methods ----------------------------\n    // ============================================================================\n    /**\n     * Validates the provided parameters for A-Feature initialization\n     * \n     * @param params \n     */\n    protected validateParams(\n        params: A_TYPES__Feature_Init<T>\n    ) {\n        if (!params || typeof params !== 'object') {\n            throw new A_FeatureError(\n                A_FeatureError.FeatureInitializationError,\n                `Invalid A-Feature initialization parameters of type: ${typeof params} with value: ${JSON.stringify(params).slice(0, 100)}...`\n            );\n        }\n    }\n    /**\n     * Returns the appropriate initializer method based on the provided parameters\n     * \n     * @param params \n     * @returns \n     */\n    protected getInitializer(\n        params: A_TYPES__Feature_Init<T>\n    ): (param1: any) => void | (() => void) {\n\n        switch (true) {\n            case !('template' in params):\n                return this.fromComponent;\n\n            case 'template' in params:\n                return this.fromTemplate;\n            default:\n                throw new A_FeatureError(\n                    A_FeatureError.FeatureInitializationError,\n                    `Invalid A-Feature initialization parameters of type: ${typeof params} with value: ${JSON.stringify(params).slice(0, 100)}...`\n                );\n        }\n    }\n    /**\n     * Initializes the A-Feature from the provided template\n     * \n     * @param params \n     */\n    protected fromTemplate(\n        params: A_TYPES__Feature_InitWithTemplate<T>\n    ) {\n        if (!params.template || !Array.isArray(params.template)) {\n            throw new A_FeatureError(\n                A_FeatureError.FeatureInitializationError,\n                `Invalid A-Feature template provided of type: ${typeof params.template} with value: ${JSON.stringify(params.template).slice(0, 100)}...`\n            );\n        }\n\n        if (!params.component && (!params.scope || !(params.scope instanceof A_Scope))) {\n            throw new A_FeatureError(\n                A_FeatureError.FeatureInitializationError,\n                `Invalid A-Feature scope provided of type: ${typeof params.scope} with value: ${JSON.stringify(params.scope).slice(0, 100)}...`\n            );\n        }\n\n        // 1) save feature name\n        this._name = params.name;\n\n        // 2) get scope from where feature is called\n        const componentScope = params.component\n            ? A_Context.scope(params.component)\n            : params.scope as A_Scope;\n\n        // 3) create caller wrapper for the simple injection of the caller component\n        //   - Just to prevent issues with undefined caller in features without component\n        //   - TODO: maybe would be better to allow passing caller in params?\n        this._caller = new A_Caller<T>(params.component || new A_Component() as T);\n\n        // 4) allocate new scope for the feature\n        const scope = A_Context.allocate(this);\n\n        // 5) ensure that the scope of the caller component is inherited by the feature scope\n        scope.inherit(componentScope);\n\n        // 6) create steps manager to organize steps into stages\n        this._SM = new A_StepsManager(params.template);\n\n        // 7) create stages from the steps\n        this._stages = this._SM.toStages(this);\n\n        // 8) set the first stage as current\n        this._current = this._stages[0];\n    }\n    /**\n     * Initializes the A-Feature from the provided component\n     * \n     * @param params \n     */\n    protected fromComponent(\n        params: A_TYPES__Feature_InitWithComponent<T>\n    ) {\n        if (!params.component || !A_TypeGuards.isAllowedForFeatureDefinition(params.component)) {\n            throw new A_FeatureError(\n                A_FeatureError.FeatureInitializationError,\n                `Invalid A-Feature component provided of type: ${typeof params.component} with value: ${JSON.stringify(params.component).slice(0, 100)}...`\n            );\n        }\n\n        // 1) save feature name\n        this._name = params.name;\n\n        // 2) get scope from where feature is called\n        const componentScope = params.scope ? params.scope : A_Context.scope(params.component);\n\n        // 3) create caller wrapper for the simple injection of the caller component\n        this._caller = new A_Caller<T>(params.component);\n\n        // 4) allocate new scope for the feature\n        const scope = A_Context.allocate(this);\n\n        // 5) ensure that the scope of the caller component is inherited by the feature scope\n        scope.inherit(componentScope);\n\n        // 6) retrieve the template from the context\n        const template = A_Context.featureTemplate(this._name, this._caller.component, scope);\n\n        // 7) create steps manager to organize steps into stages\n        this._SM = new A_StepsManager(template);\n\n        // 8) create stages from the steps\n        this._stages = this._SM.toStages(this);\n\n        // 9) set the first stage as current\n        this._current = this._stages[0];\n    }\n\n\n    // ============================================================================\n    // ----------------------- Main Processing Methods ----------------------------\n    // ============================================================================\n    /**\n     * This method processes the feature by executing all the stages\n     * \n     */\n    async process(\n        /**\n         * Optional scope to be used to resolve the steps dependencies\n         * If not provided, the scope of the caller component will be used\n         */\n        scope?: A_Scope,\n    ) {\n        try {\n            if (scope && !scope.isInheritedFrom(A_Context.scope(this)))\n                scope.inherit(A_Context.scope(this));\n\n\n            if (this.isDone)\n                return;\n\n            this._state = A_TYPES__FeatureState.PROCESSING;\n\n            for (const stage of this) {\n                await stage.process(scope);\n            }\n\n            return await this.completed();\n        } catch (error) {\n            return await this.failed(new A_FeatureError({\n                title: A_FeatureError.FeatureProcessingError,\n                description: `An error occurred while processing the A-Feature: ${this.name}. Failed at stage: ${this.stage?.name || 'N/A'}.`,\n                stage: this.stage,\n                originalError: error\n            }));\n        }\n\n    }\n    /**\n     * This method moves the feature to the next stage\n     * \n     * @param stage \n     */\n    next(stage) {\n        const stageIndex = this._stages.indexOf(stage);\n\n        this._index = stageIndex + 1;\n\n        if (this._index >= this._stages.length) {\n            this.completed();\n        }\n    }\n    /**\n     * This method marks the feature as completed and returns the result\n     * Uses to interrupt or end the feature processing\n     * \n     * @param result \n     * @returns \n     */\n    async completed(): Promise<void> {\n\n        this._state = A_TYPES__FeatureState.COMPLETED;\n\n        this.scope.destroy();\n    }\n    /**\n     * This method marks the feature as failed and throws an error\n     * Uses to mark the feature as failed\n     * \n     * @param error \n     */\n    async failed(error: A_FeatureError) {\n\n        this._state = A_TYPES__FeatureState.FAILED;\n\n        this._error = error;\n\n        this.scope.destroy();\n\n        throw this._error;\n    }\n    /**\n     * This method marks the feature as failed and throws an error\n     * Uses to interrupt or end the feature processing\n     * \n     * @param error \n     */\n    async interrupt(\n        /**\n         * The reason of feature interruption\n         */\n        reason?: string | A_StageError | Error\n    ) {\n        switch (true) {\n            case A_TypeGuards.isString(reason):\n                this._error = new A_FeatureError(A_FeatureError.Interruption, reason);\n                break;\n\n            case A_TypeGuards.isErrorInstance(reason):\n                this._error = new A_FeatureError({\n                    code: A_FeatureError.Interruption,\n                    title: reason.title,\n                    description: reason.description,\n                    stage: this.stage,\n                    originalError: reason\n                });\n                break;\n\n            default:\n                break;\n        }\n\n        this._state = A_TYPES__FeatureState.INTERRUPTED;\n\n        this.scope.destroy();\n    }\n\n\n\n\n    toString(): string {\n        return `A-Feature(${this.caller.component?.constructor?.name || 'Unknown'}::${this.name})`;\n    }\n}","import { A_Context } from \"../A-Context/A-Context.class\";\nimport { A_Feature } from \"../A-Feature/A-Feature.class\";\nimport { A_Scope } from \"../A-Scope/A-Scope.class\";\n\n\n\n/**\n * A-Component is a primary \"extendable\" object in the system\n * A unique combination of Components creates completely new functionality\n * \n * The most important thing is that A-Component is STATELESS, it means that it doesn't store any state in itself\n * \n * \n * [!] Every A-Component is a singleton, so if you need to create multiple instances of the same logic - use A-Container\n * [!] So one scope can have only one instance of the same A-Component\n * [!] Every A-Component can be extended by features and extensions\n * [!] ONLY A-Component can have A-Feature extensions\n *\n */\nexport class A_Component {\n\n\n    /**\n     * Calls the feature with the given name in the given scope\n     * \n     * [!] Note: This method creates a new instance of the feature every time it is called\n     * \n     * @param feature - the name of the feature to call\n     * @param scope  - the scope in which to call the feature\n     * @returns  - void\n     */\n    async call(\n        /**\n         * Name of the feature to call\n         */\n        feature: string,\n        /**\n         * Scope in which the feature will be executed\n         */\n        scope?: A_Scope\n    ) {\n        const newFeature = new A_Feature({\n            name: feature,\n            component: this\n        });\n\n        return await newFeature.process(scope);\n    }\n}\n\n\n\n","import { A_Error } from \"../A-Error/A_Error.class\";\n\n\n\nexport class A_ContextError extends A_Error {\n\n\n    static NotAllowedForScopeAllocationError = 'Component is not allowed for scope allocation';\n\n    static ComponentAlreadyHasScopeAllocatedError = 'Component already has scope allocated';\n\n    static InvalidMetaParameterError = 'Invalid parameter provided to get meta';\n\n    static InvalidScopeParameterError = 'Invalid parameter provided to get scope';\n\n    static ScopeNotFoundError = 'Scope not found';\n\n    static InvalidFeatureParameterError = 'Invalid parameter provided to get feature';\n\n    static InvalidFeatureDefinitionParameterError = 'Invalid parameter provided to define feature';\n\n    static InvalidFeatureTemplateParameterError = 'Invalid parameter provided to get feature template';\n\n    static InvalidFeatureExtensionParameterError = 'Invalid parameter provided to extend feature';\n\n\n    static InvalidAbstractionParameterError = 'Invalid parameter provided to get abstraction';\n\n    static InvalidAbstractionDefinitionParameterError = 'Invalid parameter provided to define abstraction';\n\n    static InvalidAbstractionTemplateParameterError = 'Invalid parameter provided to get abstraction template';\n\n    static InvalidAbstractionExtensionParameterError = 'Invalid parameter provided to extend abstraction';\n\n    static InvalidInjectionParameterError = 'Invalid parameter provided to get injections';\n\n    static InvalidExtensionParameterError = 'Invalid parameter provided to get extensions';\n\n\n    static InvalidRegisterParameterError = 'Invalid parameter provided to register component';\n\n\n    static InvalidComponentParameterError = 'Invalid component provided';\n\n    static ComponentNotRegisteredError = 'Component not registered in the context';\n\n    static InvalidDeregisterParameterError = 'Invalid parameter provided to deregister component';\n}","import {\n    A_TYPES__Scope_Init,\n    A_TYPES__ScopeConfig,\n    A_TYPES__ScopeLinkedComponents,\n    A_TYPES_ScopeDependentComponents\n} from \"../A-Scope/A-Scope.types\";\nimport {\n    A_TYPES__MetaLinkedComponentConstructors,\n    A_TYPES__MetaLinkedComponents\n} from \"../A-Meta/A-Meta.types\";\nimport {\n    A_TYPES__FeatureAvailableComponents,\n    A_TYPES__FeatureDefineDecoratorMeta\n} from \"../A-Feature/A-Feature.types\";\nimport { A_Component } from \"../A-Component/A-Component.class\";\nimport { A_Feature } from \"../A-Feature/A-Feature.class\";\nimport { A_Container } from \"../A-Container/A-Container.class\";\nimport { A_Scope } from \"../A-Scope/A-Scope.class\";\nimport { A_Meta } from \"../A-Meta/A-Meta.class\";\nimport { A_ComponentMeta } from \"../A-Component/A-Component.meta\";\nimport { A_ContainerMeta } from \"../A-Container/A-Container.meta\";\nimport { A_Entity } from \"../A-Entity/A-Entity.class\";\nimport { A_EntityMeta } from \"../A-Entity/A-Entity.meta\";\nimport { A_TYPES__A_StageStep } from \"../A-Stage/A-Stage.types\";\nimport { A_CONSTANTS__DEFAULT_ENV_VARIABLES } from \"@adaas/a-concept/constants/env.constants\";\nimport { A_TYPES__EntityMetaKey } from \"../A-Entity/A-Entity.constants\";\nimport { A_TYPES__ContainerMetaKey } from \"../A-Container/A-Container.constants\";\nimport { A_TYPES__ComponentMetaKey } from \"../A-Component/A-Component.constants\";\nimport { A_TYPES__ContextEnvironment } from \"./A-Context.types\";\nimport { A_TypeGuards } from \"@adaas/a-concept/helpers/A_TypeGuards.helper\";\nimport { A_ContextError } from \"./A-Context.error\";\nimport { A_TYPES__Container_Constructor } from \"../A-Container/A-Container.types\";\nimport { A_TYPES__Entity_Constructor } from \"../A-Entity/A-Entity.types\";\nimport { A_TYPES__Component_Constructor } from \"../A-Component/A-Component.types\";\nimport { A_FormatterHelper } from \"@adaas/a-concept/helpers/A_Formatter.helper\";\nimport { A_Fragment } from \"../A-Fragment/A-Fragment.class\";\nimport { A_TYPES__InjectableTargets } from \"../A-Inject/A-Inject.types\";\nimport { A_TYPES__ConceptAbstraction } from \"../A-Concept/A-Concept.types\";\nimport { A_TYPES__ConceptAbstractions } from \"../A-Concept/A-Concept.constants\";\nimport { A_CommonHelper } from \"@adaas/a-concept/helpers/A_Common.helper\";\n\n\n\nexport class A_Context {\n    // ====================================================================================================\n    // ================================ STATIC PROPERTIES =================================================\n    // ====================================================================================================\n    /**\n     * Default name of the application from environment variable A_CONCEPT_NAME\n     * \n     * [!] If environment variable is not set, it will default to 'a-concept'\n     */\n    static get concept() {\n        return process.env[A_CONSTANTS__DEFAULT_ENV_VARIABLES.A_CONCEPT_NAME] || 'a-concept';\n    }\n    /**\n     * Root scope of the application from environment variable A_CONCEPT_ROOT_SCOPE\n     * \n     * [!] If environment variable is not set, it will default to 'root'\n     */\n    static get root(): A_Scope {\n        return this.getInstance()._root;\n    }\n    /**\n     * Environment the application is running in.\n     * Can be either 'server' or 'browser'.\n     * [!] Determined by checking if 'window' object is available.\n     */\n    static get environment(): A_TYPES__ContextEnvironment {\n        let testEnvironment: A_TYPES__ContextEnvironment = 'browser';\n\n        try {\n            testEnvironment = window.location ? 'browser' : 'server';\n        } catch (error) {\n            testEnvironment = 'server';\n        }\n\n        return testEnvironment;\n    }\n\n    /**\n     * Singleton instance of the Context\n     */\n    private static _instance: A_Context;\n    // ====================================================================================================\n    // ================================ INTERNAL REGISTRY =================================================\n    // ====================================================================================================\n    /**\n     * Root Scope of the Concept and Environment\n     *\n     * Root scope is the top-level scope that all other scopes inherit from.\n     * It stores global configurations and settings and ALL SHAREABLE RESOURCES.\n     * \n     * [!] Root scope is created automatically when the Context is initialized.\n     * [!] Root scope name can be configured using environment variable A_CONCEPT_ROOT_SCOPE\n     */\n    private _root!: A_Scope\n    /**\n     * A registry that keeps track of scopes for all components (Containers, Features, Commands) \n     * Which can issue a scope allocation.\n     */\n    protected _registry: WeakMap<A_TYPES__ScopeLinkedComponents, A_Scope> = new WeakMap();\n    /**\n     * This is a registry that stores an issuer of each scope allocation.\n     * It helps to track which component (Container, Feature, Command) allocated a specific scope.\n     */\n    protected _scopeIssuers: WeakMap<A_Scope, A_TYPES__ScopeLinkedComponents> = new WeakMap();\n    /**\n     * Stores a context associated with a specific component that depends on a scope.\n     * uses for quick retrieval of the scope for the component.\n     */\n    protected _scopeStorage: WeakMap<A_TYPES_ScopeDependentComponents, A_Scope> = new WeakMap();\n    /**\n     * Stores meta information for different component types by their constructors.\n     * Meta provides to store extra information about the class behavior and configuration.\n     */\n    protected _metaStorage: Map<A_TYPES__MetaLinkedComponentConstructors, A_Meta> = new Map();\n\n\n\n    /**\n     * Private constructor to enforce singleton pattern.\n     * \n     * [!] This class should not be instantiated directly. Use A_Context.getInstance() instead.\n     */\n    private constructor() {\n        let name = 'root';\n\n        if (A_Context.environment === 'server')\n            name = process.env[A_CONSTANTS__DEFAULT_ENV_VARIABLES.A_CONCEPT_ROOT_SCOPE] || 'root';\n\n        if (A_Context.environment === 'browser')\n            name = (window as any)[A_CONSTANTS__DEFAULT_ENV_VARIABLES.A_CONCEPT_ROOT_SCOPE] || 'root';\n\n        this._root = new A_Scope({ name });\n    }\n\n\n\n    /**\n     * Get the instance of the Namespace Provider.\n     * \n     * If the instance does not exist, it will be created.\n     * \n     * @returns \n     */\n    static getInstance() {\n        if (!A_Context._instance) {\n            A_Context._instance = new A_Context();\n        }\n\n        return A_Context._instance;\n    }\n\n\n\n    /**\n     * Register method allows to register a component with a specific scope in the context.\n     * \n     * @param component - Component to register with a specific scope. Can be either A_Container, A_Feature.\n     * @param scope - Scope to associate the component with.\n     * @returns \n     */\n    static register(\n        /**\n         * Provide the scope that will be associated with the component.\n         */\n        scope: A_Scope,\n        /**\n         * Provide a component that needs to be registered with a specific scope.\n         */\n        component: A_TYPES_ScopeDependentComponents,\n\n    ): A_Scope {\n        // uses only for error messages\n        const componentName = A_CommonHelper.getComponentName(component);\n\n        const instance = this.getInstance();\n\n        if (!component) throw new A_ContextError(\n            A_ContextError.InvalidRegisterParameterError,\n            `Unable to register component. Component cannot be null or undefined.`);\n\n        if (!scope) throw new A_ContextError(\n            A_ContextError.InvalidRegisterParameterError,\n            `Unable to register component. Scope cannot be null or undefined.`);\n\n        if (!this.isAllowedToBeRegistered(component)) throw new A_ContextError(\n            A_ContextError.NotAllowedForScopeAllocationError,\n            `Component ${componentName} is not allowed for scope allocation.`);\n\n        instance._scopeStorage.set(component, scope);\n\n        return scope;\n    }\n\n    /**\n     * Deregister method allows to deregister a component from the context.\n     * \n     * @param component - Component to deregister from the context.\n     */\n    static deregister(\n        /**\n         * Provide a component that needs to be deregistered from the context.\n         */\n        component: A_TYPES_ScopeDependentComponents,\n    ): void {\n        // uses only for error messages\n        const componentName = A_CommonHelper.getComponentName(component);\n\n        const instance = this.getInstance();\n\n        if (!component) throw new A_ContextError(\n            A_ContextError.InvalidDeregisterParameterError,\n            `Unable to deregister component. Component cannot be null or undefined.`);\n\n        if (!instance._scopeStorage.has(component)) throw new A_ContextError(\n            A_ContextError.ComponentNotRegisteredError,\n            `Unable to deregister component. Component ${componentName} is not registered.`);\n\n        instance._scopeStorage.delete(component);\n    }\n\n    /**\n     * Allocate method instantiates a new scope for the given component and registers it in the context.\n     * It bounds the component (Container, Feature) to a new scope that can be configured and used independently.\n     * \n     * \n     * @param component - Component to allocate the scope for. Can be either A_Container, A_Feature.\n     * @param importing  - Configuration of the scope that will be created for the component.\n     */\n    static allocate(\n        /**\n         * Provide a component that needs a scope allocation.\n         */\n        component: A_TYPES__ScopeLinkedComponents,\n    ): A_Scope\n    static allocate(\n        /**\n         * Provide a component that needs a scope allocation.\n         */\n        component: A_TYPES__ScopeLinkedComponents,\n        /**\n         * Provide the scope that will be used as a base for the new scope.\n         */\n        importing: A_Scope\n    ): A_Scope\n    static allocate(\n        /**\n         * Provide a component that needs a scope allocation.\n         */\n        component: A_TYPES__ScopeLinkedComponents,\n        /**\n         * Provide configuration for the scope that will be created for the component.\n         */\n        config: Partial<A_TYPES__Scope_Init & A_TYPES__ScopeConfig>\n    ): A_Scope\n    static allocate(\n        component: A_TYPES__ScopeLinkedComponents,\n        importing?: Partial<A_TYPES__Scope_Init & A_TYPES__ScopeConfig> | A_Scope\n    ): A_Scope {\n        // uses only for error messages\n        const componentName = A_CommonHelper.getComponentName(component);\n\n        // ---------------------------------------------------------------------\n        // ----------------------Input Validation-------------------------------\n        // ---------------------------------------------------------------------\n        // 1) check if component is valid\n        if (!this.isAllowedForScopeAllocation(component))\n            throw new A_ContextError(A_ContextError.NotAllowedForScopeAllocationError, `Component of type ${componentName} is not allowed for scope allocation. Only A_Container, A_Feature are allowed.`);\n        const instance = this.getInstance();\n\n        // 2) check if component already has a scope allocated\n        if (instance._registry.has(component))\n            throw new A_ContextError(A_ContextError.ComponentAlreadyHasScopeAllocatedError, `Component ${componentName} already has a scope allocated.`);\n\n\n        // 3) Create a new scope for the component\n        const newScope = A_TypeGuards.isScopeInstance(importing)\n            ? importing\n            : new A_Scope(importing || {\n                name: componentName + '-scope'\n            }, importing);\n\n        // 4) Make sure that the new scope inherits from the root scope\n        if (!newScope.isInheritedFrom(A_Context.root))\n            newScope.inherit(A_Context.root);\n\n        // 5) Register the component in the appropriate storage\n        instance._registry.set(component, newScope);\n        // Also register the issuer of the scope for faster tracking\n        instance._scopeIssuers.set(newScope, component);\n\n        // 6) Return the newly created scope\n        return newScope;\n    }\n\n    /**\n     * Deallocate method removes the scope allocation for the given component from the context.\n     * \n     * @param component \n     * @returns \n     */\n    static deallocate(\n        /**\n         * A Scope that needs to be deallocated.\n         */\n        scope: A_Scope,\n    )\n    static deallocate(\n        /**\n         * Provide a component that needs to have its scope deallocated.\n         */\n        component: A_TYPES__ScopeLinkedComponents,\n    )\n    static deallocate(\n        /**\n         * Provide a component that needs to have its scope deallocated.\n         */\n        param1: A_TYPES__ScopeLinkedComponents | A_Scope,\n    ) {\n        const instance = this.getInstance();\n\n\n        const scope = A_TypeGuards.isScopeInstance(param1)\n            ? param1\n            : instance._registry.get(param1);\n\n        if (!scope) return;\n\n        try {\n            const component = A_TypeGuards.isComponentInstance(param1)\n                ? param1\n                : this.issuer(scope);\n\n            instance._registry.delete(component);\n            instance._scopeIssuers.delete(scope);\n        } catch (error) {\n            return\n        }\n    }\n\n\n\n    /**\n      * Get or Create Meta for the specific class or instance.\n      * This method will return the existing meta if it exists, or create a new one if it doesn't.\n      * \n      * Meta object contains custom metadata based on the class type.\n      * \n      * @param container \n      */\n    static meta(\n        /**\n         * Get meta for the specific container class by constructor.\n         */\n        container: A_TYPES__Container_Constructor,\n    ): A_ContainerMeta\n    static meta(\n        /**\n         * Get meta for the specific container instance.\n         */\n        container: A_Container,\n    ): A_ContainerMeta\n    static meta(\n        /**\n         * Get meta for the specific entity class by constructor.\n         */\n        entity: A_TYPES__Entity_Constructor,\n    ): A_EntityMeta\n    static meta(\n        /**\n         * Get meta for the specific entity instance.\n         */\n        entity: A_Entity,\n    ): A_EntityMeta\n    static meta(\n        /**\n         * Get meta for the specific component class by constructor.\n         */\n        component: A_TYPES__Component_Constructor,\n    ): A_ComponentMeta\n    static meta(\n        /**\n         * Get meta for the specific component instance.\n         */\n        component: A_Component,\n    ): A_ComponentMeta\n    static meta(\n        /**\n         * Get meta for the specific component by its name.\n         */\n        component: string,\n    ): A_ComponentMeta\n    static meta(\n        /**\n         * Get meta for the specific injectable target (class or instance).\n         */\n        target: A_TYPES__InjectableTargets,\n    ): A_ComponentMeta\n    static meta<T extends Record<string, any>>(\n        /**\n         * Get meta for the specific class or instance\n         */\n        constructor: new (...args: any[]) => any\n    ): A_Meta<T>\n\n    static meta<T extends Record<string, any>>(\n        param1: A_TYPES__MetaLinkedComponentConstructors\n            | A_TYPES__MetaLinkedComponents\n            | string\n    ): A_Meta<T> {\n\n        // Get the component name for error messages\n        const componentName = A_CommonHelper.getComponentName(param1);\n        // Get the instance of the context\n        const instance = this.getInstance();\n\n        if (!param1) throw new A_ContextError(A_ContextError.InvalidMetaParameterError, `Invalid parameter provided to get meta. Parameter cannot be null or undefined.`);\n\n        // Check if the parameter is allowed for meta storage\n        if (!(\n            this.isAllowedForMeta(param1)\n            || this.isAllowedForMetaConstructor(param1)\n            || A_TypeGuards.isString(param1)\n            || A_TypeGuards.isFunction(param1\n            ))\n        ) throw new A_ContextError(A_ContextError.InvalidMetaParameterError, `Invalid parameter provided to get meta. Component of type ${componentName} is not allowed for meta storage. Only A_Container, A_Component and A_Entity are allowed.`);\n\n        let property: A_TYPES__MetaLinkedComponentConstructors;\n        let metaType: typeof A_Meta<T> | typeof A_ContainerMeta | typeof A_ComponentMeta | typeof A_EntityMeta\n\n        switch (true) {\n            // 1) If param1 is instance of A_Container\n            case A_TypeGuards.isContainerInstance(param1): {\n                property = param1.constructor as A_TYPES__Container_Constructor;\n                metaType = A_ContainerMeta;\n\n                break;\n            }\n            // 2) If param1 is class of A_Container\n            case A_TypeGuards.isContainerConstructor(param1): {\n                property = param1 as typeof A_Container;\n                metaType = A_ContainerMeta;\n\n                break;\n            }\n            // 3) If param1 is instance of A_Component\n            case A_TypeGuards.isComponentInstance(param1): {\n                property = param1.constructor as A_TYPES__Component_Constructor;\n                metaType = A_ComponentMeta;\n\n                break;\n            }\n            // 4) If param1 is class of A_Component\n            case A_TypeGuards.isComponentConstructor(param1): {\n                property = param1 as typeof A_Component;\n                metaType = A_ComponentMeta;\n\n                break;\n            }\n            // 5) If param1 is instance of A_Entity\n            case A_TypeGuards.isEntityInstance(param1): {\n                property = param1.constructor as A_TYPES__Entity_Constructor;\n                metaType = A_ComponentMeta;\n\n                break;\n            }\n            // 6) If param1 is class of A_Entity\n            case A_TypeGuards.isEntityConstructor(param1): {\n                property = param1;\n                metaType = A_EntityMeta;\n\n                break;\n            }\n            // 7) If param1 is string then we need to find the component by its name\n            case typeof param1 === 'string': {\n                const found = Array.from(instance._metaStorage)\n                    .find(([c]) => c.name === param1\n                        || c.name === A_FormatterHelper.toKebabCase(param1)\n                        || c.name === A_FormatterHelper.toPascalCase(param1)\n                    )!;\n                if (!(found && found.length))\n                    throw new A_ContextError(A_ContextError.InvalidMetaParameterError, `Invalid parameter provided to get meta. Component with name ${param1} not found in the meta storage.`);\n\n                property = found[0];\n                metaType = A_ComponentMeta;\n\n                break;\n            }\n            // 8) If param1 is any other class or function\n            default: {\n                property = param1;\n                metaType = A_Meta;\n\n                break;\n            }\n        }\n\n        // Check if the meta already exists for the property, if not create a new one\n        if (!instance._metaStorage.has(property)) {\n            const inheritMeta = instance._metaStorage.get(Object.getPrototypeOf(property)) || new metaType();\n            instance._metaStorage.set(property, new metaType().from(inheritMeta as any));\n        }\n\n        // Return the meta for the property\n        return instance._metaStorage.get(property)!;\n    }\n\n\n    /**\n     * \n     * This method allows to get the issuer of a specific scope.\n     * \n     * @param scope - Scope to get the issuer for.\n     * @returns - Component that issued the scope.\n     */\n    static issuer(\n        /**\n         * Provide the scope to get its issuer.\n         */\n        scope: A_Scope\n    ): A_TYPES__ScopeLinkedComponents {\n\n        const instance = this.getInstance();\n\n        if (!scope) throw new A_ContextError(\n            A_ContextError.InvalidComponentParameterError,\n            `Invalid parameter provided to get scope issuer. Parameter cannot be null or undefined.`\n        );\n\n        if (!instance._scopeIssuers.has(scope)) throw new A_ContextError(\n            A_ContextError.ScopeNotFoundError,\n            `Invalid parameter provided to get scope issuer. Provided scope does not have an issuer registered.`\n        );\n\n        return instance._scopeIssuers.get(scope)!;\n    }\n\n\n\n    /**\n     * Get the scope of the specific class or instance.\n     * \n     * Every execution in Concept has its own scope.\n     * \n     * This method will return the scope of the specific class or instance.\n     * \n     * @param entity \n     */\n    static scope<T extends A_Entity>(\n        /**\n         * Provide an entity to get its scope.\n         */\n        entity: T\n    ): A_Scope\n    static scope<T extends A_Component>(\n        /**\n         * Provide a component to get its scope.\n         */\n        component: T\n    ): A_Scope\n    static scope<T extends A_Container>(\n        /**\n         * Provide a container to get its scope.\n         */\n        container: T\n    ): A_Scope\n    static scope<T extends A_Feature>(\n        /**\n         * Provide a feature to get its scope.\n         */\n        feature: T\n    ): A_Scope\n    static scope<T extends A_Fragment>(\n        /**\n         * Provide a fragment to get its scope.\n         */\n        fragment: T\n    ): A_Scope\n    static scope<T extends A_TYPES__ScopeLinkedComponents | A_TYPES_ScopeDependentComponents>(\n        param1: T\n    ): A_Scope {\n\n        // for error messages\n        const name = (param1 as any)?.constructor?.name || String(param1);\n\n        // Get the instance of the context\n        const instance = this.getInstance();\n\n        // Input validation\n        if (!param1) throw new A_ContextError(A_ContextError.InvalidScopeParameterError, `Invalid parameter provided to get scope. Parameter cannot be null or undefined.`);\n\n        // Check if the parameter is allowed for scope allocation\n        if (!this.isAllowedForScopeAllocation(param1)\n            && !this.isAllowedToBeRegistered(param1)\n        )\n            throw new A_ContextError(A_ContextError.InvalidScopeParameterError, `Invalid parameter provided to get scope. Component of type ${name} is not allowed for scope allocation.`);\n\n        switch (true) {\n            case this.isAllowedForScopeAllocation(param1):\n\n                // Check if the parameter has a scope allocated\n                if (!instance._registry.has(param1))\n                    throw new A_ContextError(\n                        A_ContextError.ScopeNotFoundError,\n                        `Invalid parameter provided to get scope. Component of type ${name} does not have a scope allocated. Make sure to allocate a scope using A_Context.allocate() method before trying to get the scope.`\n                    );\n\n                // If the parameter is allowed for scope allocation, return the scope\n                return instance._registry.get(param1)!;\n\n            case this.isAllowedToBeRegistered(param1):\n\n                // Check if the parameter has a scope registered\n                if (!instance._scopeStorage.has(param1))\n                    throw new A_ContextError(\n                        A_ContextError.ScopeNotFoundError,\n                        `Invalid parameter provided to get scope. Component of type ${name} does not have a scope registered. Make sure to register the component using A_Context.register() method before trying to get the scope.`\n                    );\n\n                // If the parameter is allowed to be registered, return the scope from the storage\n                return instance._scopeStorage.get(param1)!;\n            default:\n                throw new A_ContextError(A_ContextError.InvalidScopeParameterError, `Invalid parameter provided to get scope. Component of type ${name} is not allowed to be registered.`);\n        }\n    }\n\n\n    // ==========================================================================================================\n    // ================================== FEATURE MANAGEMENT ====================================================\n    // ==========================================================================================================\n    // ----------------------------------------------------------------------------------------------------------\n    // -----------------------------------Primary Methods -------------------------------------------------------\n    // ----------------------------------------------------------------------------------------------------------\n    /**\n     * Returns a template of the feature that can be then used to create a new A-Feature Instance\n     * \n     * [!] Note: Steps/Stages included are fully dependent on the scope provided since it dictates which components are active and can provide extensions for the feature.\n     * \n     * @param name \n     */\n    static featureTemplate(\n        /**\n         * Provide the name of the feature to get the template for. Regular expressions are also supported to match multiple features.\n         */\n        name: string | RegExp,\n        /**\n         * Provide the component to get the feature template from.\n         */\n        component: A_TYPES__FeatureAvailableComponents,\n        /**\n         * Provide the scope that dictates which components are active and can provide extensions for the feature.\n         */\n        scope: A_Scope = this.scope(component)\n    ): Array<A_TYPES__A_StageStep> {\n        // name for error messages\n        const componentName = A_CommonHelper.getComponentName(component);\n\n        // Input validation\n        if (!component) throw new A_ContextError(A_ContextError.InvalidFeatureTemplateParameterError, `Unable to get feature template. Component cannot be null or undefined.`);\n        if (!name) throw new A_ContextError(A_ContextError.InvalidFeatureTemplateParameterError, `Unable to get feature template. Feature name cannot be null or undefined.`);\n\n        // Check if the parameter is allowed for feature definition\n        if (!A_TypeGuards.isAllowedForFeatureDefinition(component))\n            throw new A_ContextError(A_ContextError.InvalidFeatureTemplateParameterError, `Unable to get feature template. Component of type ${componentName} is not allowed for feature definition.`);\n\n        const steps: A_TYPES__A_StageStep[] = [\n            // 1) Get the base feature definition from the component\n            ...this.featureDefinition(name, component),\n            // 2) Get all extensions for the feature from other components in the scope\n            ...this.featureExtensions(name, component, scope)\n        ];\n\n        return steps;\n    }\n    // ----------------------------------------------------------------------------------------------------------\n    // -----------------------------------Helper Methods --------------------------------------------------------\n    // ----------------------------------------------------------------------------------------------------------\n    /**\n     * Returns all extensions for the specific feature in the specific component within the provided scope.\n     * Scope dictates which components are active and can provide extensions for the feature.\n     * \n     * [!] This method only returns extensions, not the base feature definition.\n     * \n     * @param scope \n     * @returns \n     */\n    static featureExtensions(\n        /**\n         * Provide the name of the feature to get the template for. Regular expressions are also supported to match multiple features.\n         */\n        name: string | RegExp,\n        /**\n         * Provide the component to get the feature template from.\n         */\n        component: A_TYPES__FeatureAvailableComponents,\n        /**\n         * Provide the scope that dictates which components are active and can provide extensions for the feature.\n         */\n        scope: A_Scope\n    ): Array<A_TYPES__A_StageStep> {\n\n        const instance = this.getInstance();\n        // name for error messages\n        const componentName = A_CommonHelper.getComponentName(component);\n\n        // Input validation\n        if (!component) throw new A_ContextError(A_ContextError.InvalidFeatureExtensionParameterError, `Unable to get feature template. Component cannot be null or undefined.`);\n        if (!name) throw new A_ContextError(A_ContextError.InvalidFeatureExtensionParameterError, `Unable to get feature template. Feature name cannot be null or undefined.`);\n\n        // Check if the parameter is allowed for feature definition\n        if (!A_TypeGuards.isAllowedForFeatureDefinition(component))\n            throw new A_ContextError(A_ContextError.InvalidFeatureExtensionParameterError, `Unable to get feature template. Component of type ${componentName} is not allowed for feature definition.`);\n\n        const callName = `${component.constructor.name}.${name}`;\n\n        const steps: A_TYPES__A_StageStep[] = [];\n\n        // We need to get all components that has extensions for the feature in component\n        for (const [cmp, meta] of instance._metaStorage) {\n            // Just try to make sure that component not only Indexed but also presented in scope\n            if (scope.has(cmp) && (\n                A_TypeGuards.isComponentMetaInstance(meta)\n                || A_TypeGuards.isContainerMetaInstance(meta)\n            )) {\n                // Get all extensions for the feature\n                meta\n                    .extensions(callName)\n                    .forEach((declaration) => {\n                        steps.push({\n                            component: cmp,\n                            ...declaration\n                        });\n                    });\n            }\n        }\n\n        return instance.filterToMostDerived(scope, steps);\n    }\n\n\n    /**\n     * method helps to filter steps in a way that only the most derived classes are kept.\n     * \n     * @param scope \n     * @param items \n     * @returns \n     */\n    private filterToMostDerived(\n        scope: A_Scope,\n        items: A_TYPES__A_StageStep[]): Array<A_TYPES__A_StageStep> {\n        return items.filter(item => {\n            const currentClass = typeof item.component === 'string'\n                ? scope.resolveConstructor(item.component)\n                : A_TypeGuards.isContainerInstance(item.component)\n                    ? item.component.constructor : item.component;\n\n            // Check if this class is parent of any other in the list\n            const isParentOfAnother = items.some(other => {\n                if (other === item) return false;\n\n                const otherClass = typeof other.component === 'string'\n                    ? scope.resolveConstructor(other.component)\n                    : A_TypeGuards.isContainerInstance(other.component)\n                        ? other.component.constructor\n                        : other.component;\n\n\n                return currentClass.prototype.isPrototypeOf(otherClass.prototype);\n            });\n\n            // Keep only classes that are not parent of any other\n            return !isParentOfAnother;\n        });\n    }\n\n\n    /**\n     * This method returns the feature template definition without any extensions.\n     * It can be used to retrieve the base template for a feature before any modifications are applied.\n     * \n     * [!] This method does not consider extensions from other components.\n     * \n     * @param feature \n     * @param component \n     * @returns \n     */\n    static featureDefinition(\n        /**\n         * Name of the feature to get the template for.\n         * Regular expressions are also supported to match multiple features.\n         */\n        feature: string | RegExp,\n        /**\n         * Component to get the feature template from.\n         */\n        component: A_TYPES__FeatureAvailableComponents,\n    ): Array<A_TYPES__A_StageStep> {\n        let metaKey;\n\n        if (!feature)\n            throw new A_ContextError(A_ContextError.InvalidFeatureTemplateParameterError, `Unable to get feature template. Feature name cannot be null or undefined.`);\n        if (!component)\n            throw new A_ContextError(A_ContextError.InvalidFeatureTemplateParameterError, `Unable to get feature template. Component cannot be null or undefined.`);\n\n\n        switch (true) {\n            case component instanceof A_Entity:\n                metaKey = A_TYPES__EntityMetaKey.FEATURES;\n                break;\n            case component instanceof A_Container:\n                metaKey = A_TYPES__ContainerMetaKey.FEATURES\n                break;\n            case component instanceof A_Component:\n                metaKey = A_TYPES__ComponentMetaKey.FEATURES\n                break;\n\n            default:\n                throw new A_ContextError(A_ContextError.InvalidFeatureTemplateParameterError, `A-Feature cannot be defined on the ${component} level`);\n        }\n\n        const featureDefinition: A_TYPES__FeatureDefineDecoratorMeta | undefined = this.meta(component)\n            ?.get(metaKey)\n            ?.get(feature);\n\n        return [\n            ...(featureDefinition?.template || [])\n        ];\n    }\n\n    // ==========================================================================================================\n    // ================================== ABSTRACTION MANAGEMENT =================================================\n    // ==========================================================================================================\n    // ----------------------------------------------------------------------------------------------------------\n    // -----------------------------------Primary Methods -------------------------------------------------------\n    // ----------------------------------------------------------------------------------------------------------\n    /**\n     * Returns a definition of the abstraction that can be then used to create a new A-Feature Instance\n     * \n     * [!] Note: Steps/Stages included are fully dependent on the scope provided since it dictates which components are active and can provide extensions for the abstraction.\n     * \n     * @param abstraction \n     */\n    static abstractionTemplate(\n        /**\n         * Provide the abstraction stage to get the definition for.\n         */\n        abstraction: A_TYPES__ConceptAbstractions,\n        /**\n         * Provide the component to get the abstraction definition from.\n         */\n        component: A_TYPES__FeatureAvailableComponents,\n    ): Array<A_TYPES__A_StageStep> {\n        // name for error messages\n        const componentName = (A_CommonHelper.getComponentName(component));\n\n        // Input validation\n        if (!component) throw new A_ContextError(\n            A_ContextError.InvalidAbstractionTemplateParameterError,\n            `Unable to get feature template. Component cannot be null or undefined.`);\n\n        if (!abstraction) throw new A_ContextError(\n            A_ContextError.InvalidAbstractionTemplateParameterError,\n            `Unable to get feature template. Abstraction stage cannot be null or undefined.`);\n\n        // Check if the parameter is allowed for feature definition\n        if (!A_TypeGuards.isAllowedForAbstractionDefinition(component))\n            throw new A_ContextError(A_ContextError.InvalidAbstractionTemplateParameterError, `Unable to get feature template. Component of type ${componentName} is not allowed for feature definition.`);\n\n        const steps: A_TYPES__A_StageStep[] = [\n            // 1) Get the base abstraction definition from the component\n            // [!] No abstraction Definitions -> They are limited to Concept Abstractions ONLY\n            // ...this.abstractionDefinition(abstraction, component),\n\n            // 2) Get all extensions for the abstraction from other components in the scope\n            ...this.abstractionExtensions(abstraction, component)\n        ];\n\n        return steps;\n    }\n\n    // ----------------------------------------------------------------------------------------------------------\n    // -----------------------------------Helper Methods --------------------------------------------------------\n    // ----------------------------------------------------------------------------------------------------------\n\n    static abstractionExtensions(\n        /**\n         * Provide the abstraction name to get the definition for.\n         */\n        abstraction: A_TYPES__ConceptAbstractions,\n        /**\n         * Provide the component to get the abstraction definition from.\n         */\n        component: A_TYPES__FeatureAvailableComponents,\n    ): Array<A_TYPES__A_StageStep> {\n        const instance = this.getInstance();\n        // name for error messages\n        const componentName = A_CommonHelper.getComponentName(component);\n\n        // Input validation\n        if (!component) throw new A_ContextError(\n            A_ContextError.InvalidAbstractionExtensionParameterError,\n            `Unable to get feature template. Component cannot be null or undefined.`\n        );\n        if (!abstraction) throw new A_ContextError(\n            A_ContextError.InvalidAbstractionExtensionParameterError,\n            `Unable to get feature template. Abstraction stage cannot be null or undefined.`\n        );\n        // Check if the parameter is allowed for feature definition\n        if (!A_TypeGuards.isAllowedForAbstractionDefinition(component))\n            throw new A_ContextError\n                (A_ContextError.InvalidAbstractionExtensionParameterError,\n                    `Unable to get feature template. Component of type ${componentName} is not allowed for feature definition.`\n                );\n\n        const steps: A_TYPES__A_StageStep[] = [];\n\n        const scope = this.scope(component);\n\n        // We need to get all components that has extensions for the feature in component\n        for (const [cmp, meta] of instance._metaStorage) {\n            // Just try to make sure that component not only Indexed but also presented in scope\n            if (scope.has(cmp) && (\n                A_TypeGuards.isComponentMetaInstance(meta)\n                || A_TypeGuards.isContainerMetaInstance(meta)\n            )) {\n                // Get all extensions for the feature\n                meta\n                    .abstractions(abstraction)\n                    .forEach((declaration) => {\n                        steps.push({\n                            component: cmp,\n                            ...declaration\n                        });\n                    });\n            }\n        }\n\n        return instance.filterToMostDerived(scope, steps);\n    }\n\n\n    /**\n     * Resets the Context to its initial state.\n     */\n    static reset() {\n        const instance = A_Context.getInstance();\n\n        instance._registry = new WeakMap();\n\n        let name = 'root';\n\n        if (A_Context.environment === 'server')\n            name = process.env[A_CONSTANTS__DEFAULT_ENV_VARIABLES.A_CONCEPT_ROOT_SCOPE] || 'root';\n\n        if (A_Context.environment === 'browser')\n            name = (window as any)[A_CONSTANTS__DEFAULT_ENV_VARIABLES.A_CONCEPT_ROOT_SCOPE] || 'root';\n\n        instance._root = new A_Scope({ name });\n    }\n\n\n\n\n    // ====================================================================================================================\n    // ====================================== HELPERS & GUARDS ============================================================\n    // ====================================================================================================================\n    /**\n     * Type guard to check if the param is allowed for scope allocation.\n     * \n     * @param param \n     * @returns \n     */\n    static isAllowedForScopeAllocation(param: any): param is A_TYPES__ScopeLinkedComponents {\n        return A_TypeGuards.isContainerInstance(param)\n            || A_TypeGuards.isFeatureInstance(param);\n    }\n    /**\n     * Type guard to check if the param is allowed to be registered in the context.\n     * \n     * @param param \n     * @returns \n     */\n    static isAllowedToBeRegistered(param: any): param is A_TYPES_ScopeDependentComponents {\n        return A_TypeGuards.isEntityInstance(param)\n            || A_TypeGuards.isComponentInstance(param)\n            || A_TypeGuards.isFragmentInstance(param)\n            || A_TypeGuards.isErrorInstance(param);\n    }\n\n    /**\n     * Type guard to check if the param is allowed for meta storage.\n     * \n     * @param param \n     * @returns \n     */\n    static isAllowedForMeta(param: any): param is A_TYPES__MetaLinkedComponents {\n        return A_TypeGuards.isContainerInstance(param)\n            || A_TypeGuards.isComponentInstance(param)\n            || A_TypeGuards.isEntityInstance(param);\n    }\n    /**\n     * Type guard to check if the param is allowed for meta storage by constructor.\n     * \n     * @param param \n     * @returns \n     */\n    static isAllowedForMetaConstructor(param: any): param is A_TYPES__MetaLinkedComponentConstructors {\n        return A_TypeGuards.isContainerConstructor(param)\n            || A_TypeGuards.isComponentConstructor(param)\n            || A_TypeGuards.isEntityConstructor(param);\n    }\n\n\n\n}","import { A_Error } from \"../A-Error/A_Error.class\";\n\nexport class A_AbstractionError extends A_Error {\n    /**\n     * This error code indicates that there was an issue extending the abstraction execution\n     */\n    static readonly AbstractionExtensionError = 'Unable to extend abstraction execution';\n\n}","import {\n    A_TYPES__AbstractionDecoratorConfig,\n    A_TYPES__AbstractionDecoratorDescriptor\n} from \"./A-Abstraction.types\";\nimport { A_Component } from \"@adaas/a-concept/global/A-Component/A-Component.class\";\nimport { A_Context } from \"@adaas/a-concept/global/A-Context/A-Context.class\";\nimport { A_Container } from \"@adaas/a-concept/global/A-Container/A-Container.class\";\nimport { A_ContainerMeta } from \"@adaas/a-concept/global/A-Container/A-Container.meta\";\nimport { A_ComponentMeta } from \"@adaas/a-concept/global/A-Component/A-Component.meta\";\nimport { A_Meta } from \"@adaas/a-concept/global/A-Meta/A-Meta.class\";\nimport { A_TYPES__ConceptAbstractions } from \"@adaas/a-concept/global/A-Concept/A-Concept.constants\";\nimport { A_TYPES__ContainerMetaKey } from \"@adaas/a-concept/global/A-Container/A-Container.constants\";\nimport { A_TYPES__ComponentMetaKey } from \"@adaas/a-concept/global/A-Component/A-Component.constants\";\nimport { A_TYPES__ConceptAbstraction } from \"@adaas/a-concept/global/A-Concept/A-Concept.types\";\nimport { A_AbstractionError } from \"./A-Abstraction.error\";\nimport { A_TypeGuards } from \"@adaas/a-concept/helpers/A_TypeGuards.helper\";\nimport { A_CommonHelper } from \"@adaas/a-concept/helpers/A_Common.helper\";\n\n\n/**\n * A-Abstraction Extend decorator allows to extends behavior of each concept abstraction execution. \n * In case some components or containers requires to extend the behavior of the abstraction like 'start', 'build' or 'deploy'\n * for example, this decorator allows to do so.    \n * \n * @param name - abstraction name \n * @param config - configuration of the abstraction extension\n * @returns \n */\nexport function A_Abstraction_Extend(\n    /**\n     * Name of the Concept Abstraction to extend\n     */\n    name: A_TYPES__ConceptAbstractions,\n    /**\n     * Configuration of the Abstraction Extension\n     * \n     */\n    config: Partial<A_TYPES__AbstractionDecoratorConfig> = {}\n) {\n    return function (\n        target: A_Container | A_Component,\n        propertyKey: string,\n        descriptor: A_TYPES__AbstractionDecoratorDescriptor\n    ) {\n        // for error messages\n        const componentName = A_CommonHelper.getComponentName(target)\n\n        if (!name)\n            throw new A_AbstractionError(\n                A_AbstractionError.AbstractionExtensionError,\n                `Abstraction name must be provided to extend abstraction for '${componentName}'.`,\n            );\n\n        //  Only Containers and Components can extend Concept Abstractions\n        if (!A_TypeGuards.isConstructorAvailableForAbstraction(target)) {\n            throw new A_AbstractionError(\n                A_AbstractionError.AbstractionExtensionError,\n                `Unable to extend Abstraction '${name}' for '${componentName}'. Only A-Containers and A-Components can extend Abstractions.`,\n            );\n        }\n\n        let metaKey;\n        const meta: A_ContainerMeta | A_ComponentMeta = A_Context.meta(target);\n\n        switch (true) {\n            case A_TypeGuards.isContainerConstructor(target) || A_TypeGuards.isContainerInstance(target):\n                metaKey = A_TYPES__ContainerMetaKey.ABSTRACTIONS\n                break;\n            case A_TypeGuards.isComponentConstructor(target) || A_TypeGuards.isComponentInstance(target):\n                metaKey = A_TYPES__ComponentMetaKey.ABSTRACTIONS\n                break;\n        }\n        const setName = `CONCEPT_ABSTRACTION::${name}`;\n\n        // Get the existed metadata or create a new one\n        const existedMeta: A_Meta<{\n            [Key: string]: A_TYPES__ConceptAbstraction[];\n        }> = meta.get(metaKey) ?\n                new A_Meta().from(meta.get(metaKey))\n                : new A_Meta();\n\n        // Set the metadata of the method to define a custom Stage with name\n        const existedMetaValue = [\n            ...(existedMeta.get(setName) || [])\n        ];\n\n        const existedIndex = existedMetaValue.findIndex(item => item.handler === propertyKey);\n\n        const abstraction = {\n            name: setName,\n            handler: propertyKey,\n            behavior: config.behavior || 'sync',\n            throwOnError: config.throwOnError !== undefined ? config.throwOnError : true,\n\n            before: A_TypeGuards.isArray(config.before)\n                ? new RegExp(`^${config.before.join('|').replace(/\\./g, '\\\\.')}$`).source\n                : config.before instanceof RegExp\n                    ? config.before.source\n                    : '',\n            after: A_TypeGuards.isArray(config.after)\n                ? new RegExp(`^${config.after.join('|').replace(/\\./g, '\\\\.')}$`).source\n                : config.after instanceof RegExp\n                    ? config.after.source\n                    : '',\n\n            override: A_TypeGuards.isArray(config.override)\n                ? new RegExp(`^${config.override.join('|').replace(/\\./g, '\\\\.')}$`).source\n                : config.after instanceof RegExp\n                    ? config.after.source\n                    : '',\n        }\n\n        if (existedIndex !== -1) {\n            // Update the existing method in the metadata\n            existedMetaValue[existedIndex] = abstraction;\n        } else {\n            // Add the new method to the metadata\n            existedMetaValue.push(abstraction);\n        }\n\n        // Set the metadata of the method to define a custom Feature with name\n        existedMeta.set(setName, existedMetaValue);\n\n        //  Update the metadata of the container with the new Stage definition\n        A_Context\n            .meta(target)\n            .set(\n                metaKey,\n                existedMeta\n            );\n    };\n}\n","import { A_Abstraction_Extend } from \"@adaas/a-concept/global/A-Abstraction/A-Abstraction-Extend.decorator\";\nimport { A_Feature } from \"../A-Feature/A-Feature.class\";\nimport { A_TYPES__Abstraction_Init } from \"./A-Abstraction.types\";\nimport { A_Scope } from \"../A-Scope/A-Scope.class\";\nimport { A_Context } from \"../A-Context/A-Context.class\";\nimport { A_TYPES__ConceptAbstractions } from \"../A-Concept/A-Concept.constants\";\n\n\n\nexport class A_Abstraction {\n\n    /**\n     * The name of the Abstraction e.g. 'deploy', 'start', 'test', etc.\n     */\n    protected _name: A_TYPES__ConceptAbstractions;\n    /**\n     * List of features that are part of this Abstraction\n     */\n    protected _features: A_Feature[] = [];\n    /**\n     * The Feature currently being processed\n     */\n    protected _current?: A_Feature;\n    /**\n     * Actual Index of the current Feature being processed\n     */\n    protected _index: number = 0;\n\n\n    /**\n     * Allows to extends A-Abstraction with additional methods\n     */\n    static get Extend(): typeof A_Abstraction_Extend {\n        return A_Abstraction_Extend;\n    }\n\n    /**\n     * A-Abstraction is an object that is common for any application. \n     * By providing components and creating abstraction extensions it's possible to create a unique behavior of the whole solution.\n     * \n     * Every application has basic abstractions like 'start', 'stop', 'deploy', 'test', etc. \n     * They can be easily extended with additional logic from both containers and components.\n     * \n     * \n     * @param params \n     */\n    constructor(\n        /**\n         * Parameters to define the A-Abstraction\n         */\n        params: A_TYPES__Abstraction_Init\n    ) {\n        this._name = params.name;\n\n        this._features = params.containers.map(container => {\n            const template = A_Context.abstractionTemplate(\n                this._name,\n                container\n            );\n            return new A_Feature({\n                name: this._name,\n                component: container,\n                template\n            })\n        });\n\n        this._current = this._features[0];\n    }\n\n    /**\n     * Returns the name of the Abstraction\n     */\n    get name(): string { return this._name; }\n    /**\n     * Returns the current Feature being processed\n     */\n    get feature(): A_Feature | undefined {\n        return this._current;\n    }\n    /**\n     * This method checks if the A-Feature is done\n     * \n     * @returns \n     */\n    get isDone(): boolean {\n        return !this.feature\n            || this._index >= this._features.length\n\n    }\n\n\n    [Symbol.iterator](): Iterator<A_Feature, any> {\n        return {\n            // Custom next method\n            next: (): IteratorResult<A_Feature, any> => {\n                if (!this.isDone) {\n\n                    this._current = this._features[this._index];\n\n                    return {\n                        value: this._current,\n                        done: false\n                    };\n                } else {\n\n                    this._current = undefined; // Reset current on end\n\n                    return {\n                        value: undefined,\n                        done: true\n                    };\n                }\n            }\n        };\n    }\n\n    /**\n     * This method moves the Abstraction processing to the next Feature in the list\n     * \n     * @param stage \n     */\n    next(stage) {\n        if (this._index >= this._features.length) {\n            return;\n        }\n\n        const stageIndex = this._features.indexOf(stage);\n\n        this._index = stageIndex + 1;\n    }\n\n\n\n    /**\n     * Allows to process all stages of the Abstraction\n     * \n     * @returns \n     */\n    async process(\n        /**\n         * Allows to override the scope in which the Abstraction will be processed\n         * \n         */\n        scope?: A_Scope\n    ) {\n        if (this.isDone)\n            return;\n\n        for (const feature of this._features) {\n\n            await feature.process(scope);\n        }\n    }\n}","import { A_Container } from \"../A-Container/A-Container.class\";\nimport { A_Abstraction } from \"../A-Abstraction/A-Abstraction.class\";\nimport { A_Abstraction_Extend } from \"@adaas/a-concept/global/A-Abstraction/A-Abstraction-Extend.decorator\";\nimport { A_Scope } from \"../A-Scope/A-Scope.class\";\nimport { A_Context } from \"../A-Context/A-Context.class\";\nimport { A_TYPES__ConceptAbstractions } from \"./A-Concept.constants\";\nimport { A_TYPES__Concept_Init } from \"./A-Concept.types\";\nimport { A_TYPES__AbstractionDecoratorConfig } from \"../A-Abstraction/A-Abstraction.types\";\nimport { A_Feature } from \"../A-Feature/A-Feature.class\";\n\n\n\nexport class A_Concept<\n    _Imports extends A_Container[] = A_Container[]\n> {\n\n    // ==============================================================================\n    // ====================  STATIC LIFECYCLE DECORATORS  ===========================\n    // ==============================================================================\n    /**\n     * Load the concept. This step runs before any other steps to ensure that all components are loaded.\n     */\n    static Load(\n        /**\n         * provide additional configuration for the abstraction extension to make it dependent on other factors\n         */\n        config?: Partial<A_TYPES__AbstractionDecoratorConfig>\n    ): ReturnType<typeof A_Abstraction_Extend> {\n        return A_Abstraction.Extend(A_TYPES__ConceptAbstractions.Load, config);\n    }\n\n    /**\n     * Publish the concept to ADAAS platform. (Or any other place defined in the concept)\n     *\n     * [!] To extend the logic just create a custom containers and override the default behavior.\n     */\n    static Publish(\n        /**\n        * provide additional configuration for the abstraction extension to make it dependent on other factors\n        */\n        config?: Partial<A_TYPES__AbstractionDecoratorConfig>\n    ): ReturnType<typeof A_Abstraction_Extend> {\n        return A_Abstraction.Extend(A_TYPES__ConceptAbstractions.Publish);\n    }\n\n    /**\n     * Deploy the concept to the environment.\n     */\n    static Deploy(\n        /**\n        * provide additional configuration for the abstraction extension to make it dependent on other factors\n        */\n        config?: Partial<A_TYPES__AbstractionDecoratorConfig>\n    ) {\n        return A_Abstraction.Extend(A_TYPES__ConceptAbstractions.Deploy, config);\n    }\n\n    /**\n     * Compiles the Concept in case there are some containers that require that. \n     * \n     * Can be used for static websites or any other concept that requires a build step.\n     * \n     */\n    static Build(\n        /**\n        * provide additional configuration for the abstraction extension to make it dependent on other factors\n        */\n        config?: Partial<A_TYPES__AbstractionDecoratorConfig>\n    ) {\n        return A_Abstraction.Extend(A_TYPES__ConceptAbstractions.Build, config);\n    }\n\n    /**\n     *  Main execution of the concept.\n     */\n    static Run(\n        /**\n        * provide additional configuration for the abstraction extension to make it dependent on other factors\n        */\n        config?: Partial<A_TYPES__AbstractionDecoratorConfig>\n    ) {\n        return A_Abstraction.Extend(A_TYPES__ConceptAbstractions.Run, config);\n    }\n\n    /**\n     *  Start the concept. Uses for servers or any other background services.\n     */\n    static Start(\n        /**\n        * provide additional configuration for the abstraction extension to make it dependent on other factors\n        */\n        config?: Partial<A_TYPES__AbstractionDecoratorConfig>\n    ) {\n        return A_Abstraction.Extend(A_TYPES__ConceptAbstractions.Start, config);\n    }\n\n    /**\n     * Stop the concept. Uses for servers or any other background services.\n     */\n    static Stop(\n        /**\n        * provide additional configuration for the abstraction extension to make it dependent on other factors\n        */\n        config?: Partial<A_TYPES__AbstractionDecoratorConfig>\n    ) {\n        return A_Abstraction.Extend(A_TYPES__ConceptAbstractions.Stop, config);\n    }\n\n\n    /**\n     * Name of the concept\n     * \n     * By default, the name of the Concept is 'a-concept'\n     */\n    private _name!: string;\n    /**\n     * A list of internally defined containers that the concept uses.\n     */\n    protected _containers!: A_Container[];\n\n\n\n    // ==============================================================================\n    // ==========================  MAIN Methods  ======================================\n    // ==============================================================================\n\n\n    /**\n     * A-Concept is a placeholder for the concept of the any program.\n     * \n     * Concept - could be any Program regardless environment and it's goal.\n     * It could be mobile, web or simple html page.\n     * All depends on Containers and Components installed and provided in the Concept.\n     * \n     * \n     * [!] Concept operates ONLY with all Components and Containers provided to achieve the goal.\n     * \n     * \n     * @param props - Initialization properties for the Concept\n     */\n    constructor(\n        protected props: A_TYPES__Concept_Init<_Imports>\n    ) {\n        this._name = props.name || A_Context.root.name;\n\n        if (props.components && props.components.length)\n            props.components.forEach(component => this.scope.register(component))\n\n        if (props.fragments && props.fragments.length)\n            props.fragments.forEach(fragment => this.scope.register(fragment))\n\n        if (props.entities && props.entities.length)\n            props.entities.forEach(entity => this.scope.register(entity as any))\n\n\n        this._containers = props.containers || [];\n    }\n\n    /**\n     * Name of the concept\n     */\n    get name() {\n        return A_Context.root.name;\n    }\n    /**\n     * The primary Root scope of the concept.\n     */\n    get scope() {\n        return A_Context.root;\n    }\n\n    /**\n     * Register a class or value in the concept scope.\n     */\n    get register(): A_Scope['register'] {\n        return this.scope.register.bind(this.scope);\n    }\n\n    /**\n     * Resolve a class or value from the concept scope.\n     */\n    get resolve(): A_Scope['resolve'] {\n        return this.scope.resolve.bind(this.scope);\n    }\n\n\n    // =======================================================================\n    // ==========================  LIFECYCLE  ================================\n    // =======================================================================\n    /**\n     * Load the concept.\n     */\n    async load(\n        scope?: A_Scope,\n    ) {\n        const abstraction = new A_Abstraction({\n            name: A_TYPES__ConceptAbstractions.Load,\n            containers: this._containers,\n        });\n\n        await abstraction.process(scope);\n    }\n    /**\n     * Run the concept.\n     */\n    async run(\n        scope?: A_Scope,\n    ) {\n        const abstraction = new A_Abstraction({\n            name: A_TYPES__ConceptAbstractions.Run,\n            containers: this._containers,\n        });\n\n        await abstraction.process(scope);\n    }\n    /**\n     * Start the concept.\n     * \n     * @param params \n     */\n    async start(\n        scope?: A_Scope,\n    ) {\n        const abstraction = new A_Abstraction({\n            name: A_TYPES__ConceptAbstractions.Start,\n            containers: this._containers,\n        });\n\n        await abstraction.process(scope);\n    }\n    /**\n     * Stop the concept.\n     * \n     * @param params \n     */\n    async stop(\n        scope?: A_Scope,\n    ) {\n        const abstraction = new A_Abstraction({\n            name: A_TYPES__ConceptAbstractions.Stop,\n            containers: this._containers,\n        });\n\n        await abstraction.process(scope);\n    }\n    /**\n     * Build the concept.\n     */\n    async build(\n        scope?: A_Scope,\n    ) {\n        const abstraction = new A_Abstraction({\n            name: A_TYPES__ConceptAbstractions.Build,\n            containers: this._containers,\n        });\n\n        await abstraction.process(scope);\n    }\n    /**\n     * Deploy the concept.\n     */\n    async deploy(\n        scope?: A_Scope,\n    ) {\n        const abstraction = new A_Abstraction({\n            name: A_TYPES__ConceptAbstractions.Deploy,\n            containers: this._containers,\n        });\n\n        await abstraction.process(scope);\n\n    }\n    /**\n     * Publish the concept.\n     */\n    async publish(\n        scope?: A_Scope,\n    ) {\n        const abstraction = new A_Abstraction({\n            name: A_TYPES__ConceptAbstractions.Publish,\n            containers: this._containers,\n        });\n\n        await abstraction.process(scope);\n    }\n\n\n    // =======================================================================\n    // ==========================  CALL  =====================================\n    // =======================================================================\n\n\n    /**\n     * Call the specific method of the concept or included modules.\n     */\n    async call<\n        K extends Record<_Imports[number]['name'], string>\n    >(\n        /**\n         * Name of the method to call\n         */\n        method: K[keyof K],\n        /**\n         * Container in which the method is located\n         */\n        container: _Imports[number],\n    ) {\n        const feature = new A_Feature({ name: method, component: container });\n\n        return await feature.process();\n    }\n}\n\n\n\n\n","\nimport { A_Container } from \"@adaas/a-concept/global/A-Container/A-Container.class\";\nimport { A_Meta } from \"../A-Meta/A-Meta.class\";\n\n\n\nexport class A_ConceptMeta extends A_Meta<any> {\n\n\n    constructor(\n        private containers: Array<A_Container>,\n    ) {\n        super();\n    }\n\n\n}","import { A_Error } from \"../A-Error/A_Error.class\";\n\nexport class A_DependencyError extends A_Error {\n\n    static readonly InvalidDependencyTarget = 'Invalid Dependency Target';\n\n    static readonly InvalidLoadTarget = 'Invalid Load Target';\n\n    static readonly InvalidLoadPath = 'Invalid Load Path';\n\n\n    static readonly InvalidDefaultTarget = 'Invalid Default Target';\n}","\nimport { A_Context } from \"@adaas/a-concept/global/A-Context/A-Context.class\";\nimport { A_Meta } from \"@adaas/a-concept/global/A-Meta/A-Meta.class\";\nimport { A_TYPES__ComponentMetaKey } from \"@adaas/a-concept/global/A-Component/A-Component.constants\";\nimport { A_TYPES__ContainerMetaKey } from \"@adaas/a-concept/global/A-Container/A-Container.constants\";\nimport { A_TypeGuards } from \"@adaas/a-concept/helpers/A_TypeGuards.helper\";\nimport { A_TYPES__A_InjectDecorator_Meta, A_TYPES__InjectableTargets } from \"../A-Inject/A-Inject.types\";\nimport { A_TYPES__A_Dependency_DefaultDecoratorReturn } from \"./A-Dependency.types\";\nimport { A_DependencyError } from \"./A-Dependency.error\";\nimport { A_CommonHelper } from \"@adaas/a-concept/helpers/A_Common.helper\";\n\n\n/**\n * Should indicate which Default is required\n */\nexport function A_Dependency_Default(\n    /**\n     * Constructor Parameters that will be used to create the default instance\n     */\n    ...args: any[]\n): A_TYPES__A_Dependency_DefaultDecoratorReturn {\n\n\n    return function (\n        target: A_TYPES__InjectableTargets,\n        methodName: string | symbol | undefined,\n        parameterIndex: number\n    ) {\n        // for Error handling purposes\n        const componentName = A_CommonHelper.getComponentName(target)\n\n        if (!A_TypeGuards.isTargetAvailableForInjection(target)) {\n            throw new A_DependencyError(\n                A_DependencyError.InvalidDefaultTarget,\n                `A-Default cannot be used on the target of type ${typeof target} (${componentName})`\n            );\n        }\n\n        // determine the method name or 'constructor' for constructor injections\n        const method = methodName ? String(methodName) : 'constructor';\n        let metaKey;\n\n        switch (true) {\n            case A_TypeGuards.isComponentConstructor(target) || A_TypeGuards.isComponentInstance(target):\n                metaKey = A_TYPES__ComponentMetaKey.INJECTIONS;\n                break;\n\n            case A_TypeGuards.isContainerInstance(target):\n                metaKey = A_TYPES__ContainerMetaKey.INJECTIONS;\n                break;\n        }\n\n        // get existing meta or create a new one\n        const existedMeta = A_Context.meta(target).get(metaKey) || new A_Meta();\n        // get existing injections for the method or create a new array\n        const paramsArray: A_TYPES__A_InjectDecorator_Meta = existedMeta.get(method) || [];\n\n        // set the parameter injection info\n        paramsArray[parameterIndex] = {\n            ...(paramsArray[parameterIndex] || {}),\n            defaultArgs: args,\n            create: true\n        }\n        // save back the updated injections array\n        existedMeta.set(method, paramsArray);\n\n        // save back the updated meta info\n        A_Context\n            .meta(target)\n            .set(\n                metaKey,\n                existedMeta\n            );\n    }\n}","\nimport { A_Context } from \"@adaas/a-concept/global/A-Context/A-Context.class\";\nimport { A_Meta } from \"@adaas/a-concept/global/A-Meta/A-Meta.class\";\nimport { A_TYPES__ComponentMetaKey } from \"@adaas/a-concept/global/A-Component/A-Component.constants\";\nimport { A_TYPES__ContainerMetaKey } from \"@adaas/a-concept/global/A-Container/A-Container.constants\";\nimport { A_TypeGuards } from \"@adaas/a-concept/helpers/A_TypeGuards.helper\";\nimport { A_TYPES__A_InjectDecorator_Meta, A_TYPES__InjectableTargets } from \"../A-Inject/A-Inject.types\";\nimport { A_TYPES__A_Dependency_LoadDecoratorReturn } from \"./A-Dependency.types\";\nimport { A_DependencyError } from \"./A-Dependency.error\";\nimport { A_CommonHelper } from \"@adaas/a-concept/helpers/A_Common.helper\";\n\n\n/**\n * Should indicate which Load is required\n */\nexport function A_Dependency_Load(\n    /**\n     * Path to load the dependency from\n     */\n    path: string\n): A_TYPES__A_Dependency_LoadDecoratorReturn {\n\n    if (!path || typeof path !== 'string') {\n        throw new A_DependencyError(\n            A_DependencyError.InvalidLoadPath,\n            `A-Load decorator requires a valid path string to the dependency`\n        );\n    }\n\n    return function (\n        target: A_TYPES__InjectableTargets,\n        methodName: string | symbol | undefined,\n        parameterIndex: number\n    ) {\n        // for Error handling purposes\n        const componentName = A_CommonHelper.getComponentName(target);\n\n        if (!A_TypeGuards.isTargetAvailableForInjection(target)) {\n            throw new A_DependencyError(\n                A_DependencyError.InvalidLoadTarget,\n                `A-Load cannot be used on the target of type ${typeof target} (${componentName})`\n            );\n        }\n\n        // determine the method name or 'constructor' for constructor injections\n        const method = methodName ? String(methodName) : 'constructor';\n        let metaKey;\n\n        switch (true) {\n            case A_TypeGuards.isComponentConstructor(target) || A_TypeGuards.isComponentInstance(target):\n                metaKey = A_TYPES__ComponentMetaKey.INJECTIONS;\n                break;\n\n            case A_TypeGuards.isContainerInstance(target):\n                metaKey = A_TYPES__ContainerMetaKey.INJECTIONS;\n                break;\n        }\n\n        // get existing meta or create a new one\n        const existedMeta = A_Context.meta(target).get(metaKey) || new A_Meta();\n        // get existing injections for the method or create a new array\n        const paramsArray: A_TYPES__A_InjectDecorator_Meta = existedMeta.get(method) || [];\n\n        // set the parameter injection info\n        paramsArray[parameterIndex] = {\n            ...(paramsArray[parameterIndex] || {}),\n            load: path\n        }\n        // save back the updated injections array\n        existedMeta.set(method, paramsArray);\n\n        // save back the updated meta info\n        A_Context\n            .meta(target)\n            .set(\n                metaKey,\n                existedMeta\n            );\n    }\n}","\nimport { A_Context } from \"@adaas/a-concept/global/A-Context/A-Context.class\";\nimport { A_Meta } from \"@adaas/a-concept/global/A-Meta/A-Meta.class\";\nimport { A_TYPES__ComponentMetaKey } from \"@adaas/a-concept/global/A-Component/A-Component.constants\";\nimport { A_TYPES__ContainerMetaKey } from \"@adaas/a-concept/global/A-Container/A-Container.constants\";\nimport { A_TypeGuards } from \"@adaas/a-concept/helpers/A_TypeGuards.helper\";\nimport { A_TYPES__A_InjectDecorator_Meta, A_TYPES__InjectableTargets } from \"../A-Inject/A-Inject.types\";\nimport { A_TYPES__A_Dependency_RequireDecoratorReturn } from \"./A-Dependency.types\";\nimport { A_DependencyError } from \"./A-Dependency.error\";\nimport { A_CommonHelper } from \"@adaas/a-concept/helpers/A_Common.helper\";\n\n\n/**\n * Should indicate which dependency is required\n */\nexport function A_Dependency_Require(): A_TYPES__A_Dependency_RequireDecoratorReturn {\n\n    return function (\n        target: A_TYPES__InjectableTargets,\n        methodName: string | symbol | undefined,\n        parameterIndex: number\n    ) {\n        // for Error handling purposes\n        const componentName = A_CommonHelper.getComponentName(target)\n\n        if (!A_TypeGuards.isTargetAvailableForInjection(target)) {\n            throw new A_DependencyError(\n                A_DependencyError.InvalidDependencyTarget,\n                `A-Dependency cannot be used on the target of type ${typeof target} (${componentName})`\n            );\n        }\n\n        // determine the method name or 'constructor' for constructor injections\n        const method = methodName ? String(methodName) : 'constructor';\n        let metaKey;\n\n        switch (true) {\n            case A_TypeGuards.isComponentConstructor(target) || A_TypeGuards.isComponentInstance(target):\n                metaKey = A_TYPES__ComponentMetaKey.INJECTIONS;\n                break;\n\n            case A_TypeGuards.isContainerInstance(target):\n                metaKey = A_TYPES__ContainerMetaKey.INJECTIONS;\n                break;\n        }\n\n        // get existing meta or create a new one\n        const existedMeta = A_Context.meta(target).get(metaKey) || new A_Meta();\n        // get existing injections for the method or create a new array\n        const paramsArray: A_TYPES__A_InjectDecorator_Meta = existedMeta.get(method) || [];\n\n        // set the parameter injection info\n        paramsArray[parameterIndex] = {\n            ...(paramsArray[parameterIndex] || {}),\n            require: true\n        }\n        // save back the updated injections array\n        existedMeta.set(method, paramsArray);\n\n        // save back the updated meta info\n        A_Context\n            .meta(target)\n            .set(\n                metaKey,\n                existedMeta\n            );\n    }\n}","import { A_Dependency_Default } from \"./A-Dependency-Default.decorator\";\nimport { A_Dependency_Load } from \"./A-Dependency-Load.decorator\";\nimport { A_Dependency_Require } from \"./A-Dependency-Require.decorator\";\n\n\nexport class A_Dependency {\n    /**\n     * Allows to indicate which Injected parameter is required\n     * \n     * [!] If parameter marked as required is not provided, an error will be thrown\n     * \n     * @returns \n     */\n    static get Required(): typeof A_Dependency_Require {\n        return A_Dependency_Require;\n    }\n    /**\n     * Allows to indicate which dependency should be loaded from a specific path\n     * \n     * @returns \n     */\n    static get Loaded(): typeof A_Dependency_Load {\n        return A_Dependency_Load;\n    }\n    /**\n     * Allows to indicate which dependency default parameters should be used\n     * \n     * @returns \n     */\n    static get Default(): typeof A_Dependency_Default {\n        return A_Dependency_Default;\n    }\n}","import { A_Error } from \"@adaas/a-concept/global/A-Error/A_Error.class\";\n\n\nexport class A_InjectError extends A_Error {\n    static readonly InvalidInjectionTarget = 'Invalid target for A-Inject decorator';\n\n    static readonly MissingInjectionTarget = 'Missing target for A-Inject decorator';\n}","import {\n    A_TYPES__A_InjectDecorator_EntityInjectionInstructions,\n    A_TYPES__A_InjectDecorator_Meta,\n    A_TYPES__A_InjectDecoratorReturn,\n    A_TYPES__InjectableConstructors,\n    A_TYPES__InjectableTargets\n} from \"./A-Inject.types\";\nimport { A_Component } from \"@adaas/a-concept/global/A-Component/A-Component.class\";\nimport { A_Fragment } from \"@adaas/a-concept/global/A-Fragment/A-Fragment.class\";\nimport { A_Context } from \"@adaas/a-concept/global/A-Context/A-Context.class\";\nimport { A_TYPES__Component_Constructor } from \"@adaas/a-concept/global/A-Component/A-Component.types\";\nimport { A_Meta } from \"@adaas/a-concept/global/A-Meta/A-Meta.class\";\nimport { A_Entity } from \"@adaas/a-concept/global/A-Entity/A-Entity.class\";\nimport { A_TYPES__Feature_Constructor } from \"@adaas/a-concept/global/A-Feature/A-Feature.types\";\nimport { A_Caller } from \"@adaas/a-concept/global/A-Caller/A_Caller.class\";\nimport { A_TYPES__ComponentMetaKey } from \"@adaas/a-concept/global/A-Component/A-Component.constants\";\nimport { A_TYPES__ContainerMetaKey } from \"@adaas/a-concept/global/A-Container/A-Container.constants\";\nimport { A_TypeGuards } from \"@adaas/a-concept/helpers/A_TypeGuards.helper\";\nimport { A_InjectError } from \"./A-Inject.error\";\nimport { A_TYPES__Entity_Constructor } from \"@adaas/a-concept/global/A-Entity/A-Entity.types\";\nimport { A_TYPES__Fragment_Constructor } from \"@adaas/a-concept/global/A-Fragment/A-Fragment.types\";\nimport { A_Scope } from \"@adaas/a-concept/global/A-Scope/A-Scope.class\";\nimport { A_TYPES__Scope_Constructor } from \"@adaas/a-concept/global/A-Scope/A-Scope.types\";\nimport { A_Feature } from \"@adaas/a-concept/global/A-Feature/A-Feature.class\";\nimport { A_CommonHelper } from \"@adaas/a-concept/helpers/A_Common.helper\";\nimport { A_TYPES__Error_Constructor } from \"../A-Error/A_Error.types\";\nimport { A_Error } from \"../A-Error/A_Error.class\";\n\n\n/**\n * A-Inject decorator\n * \n * This Decorator allows to inject dependencies into the module like \n * - Namespaces \n * - Other Concepts \n * - or maybe Components\n * \n * @param params - see overloads\n * @returns - decorator function\n */\nexport function A_Inject<T extends A_Scope>(\n    /***\n     * Provide the Scope constructor that will be associated with the injection.\n     *\n     * [!] It returns an instance of the Scope where the Entity/Component/Container is defined.\n     */\n    scope: A_TYPES__Scope_Constructor<T>\n): A_TYPES__A_InjectDecoratorReturn\nexport function A_Inject<T extends A_Error>(\n    /***\n     * Provide the Error constructor that will be associated with the injection.\n     *\n     * [!] It returns an Instance of the Error what is executed.\n     */\n    error: A_TYPES__Error_Constructor<T>\n): A_TYPES__A_InjectDecoratorReturn\nexport function A_Inject<T extends A_Feature>(\n    /**\n     * Provide the Feature constructor that will be associated with the injection.\n     * \n     * [!] It returns an Instance of the Feature what is executed. \n     */\n    feature: A_TYPES__Feature_Constructor<T>\n): A_TYPES__A_InjectDecoratorReturn\nexport function A_Inject<T extends A_Component>(\n    /**\n     * Provide the Component constructor that will be associated with the injection.\n     * \n     * [!] It returns an Instance of the Component from current Scope or from Parent Scopes.\n     */\n    component: A_TYPES__Component_Constructor<T>\n): A_TYPES__A_InjectDecoratorReturn\n//  Allows to inject just one A_FeatureCaller\nexport function A_Inject(\n    /**\n     * Provide the A_Caller constructor to inject the Caller instance\n     *\n     * [!] It returns initiator of the call, e.g. Container/Component/Command who called Feature \n     */\n    caller: typeof A_Caller\n): A_TYPES__A_InjectDecoratorReturn\n// Allows to inject just one Context Fragment\nexport function A_Inject<T extends A_Fragment>(\n    /**\n     * Provide the Fragment constructor to inject the Fragment instance\n     *\n     * [!] It returns the Fragment instance from current Scope or from Parent Scopes.\n     */\n    fragment: A_TYPES__Fragment_Constructor<T>\n): A_TYPES__A_InjectDecoratorReturn\nexport function A_Inject<T extends A_Entity>(\n    /**\n     * Provide the Entity constructor to inject the Entity instance\n     * \n     * [!] Note: It returns the Entity instance from current Scope or from Parent Scopes.\n     * [!] Note: If instance has more than one Entity of the same type It returns FIRST found Entity\n     * [!] Note: Use 'config' to specify to inject specific one or even Array of Entities\n     */\n    entity: A_TYPES__Entity_Constructor<T>,\n    /**\n     * Provide additional instructions on how to perform the injection\n     * \n     * [!] Default Pagination is 1 if it's necessary to get multiple Entities please customize it in the instructions\n     */\n    config?: Partial<A_TYPES__A_InjectDecorator_EntityInjectionInstructions<T>>\n): A_TYPES__A_InjectDecoratorReturn<T>\nexport function A_Inject<T extends A_Component>(\n    /**\n     * Provide the name of Component constructor to inject the Component instance\n     * \n     * [!] You can use both customized one or original depending on your overriding strategy\n     */\n    ctor: string\n): A_TYPES__A_InjectDecoratorReturn\nexport function A_Inject(\n    param1: A_TYPES__InjectableConstructors,\n    param2?: Partial<A_TYPES__A_InjectDecorator_EntityInjectionInstructions>\n): A_TYPES__A_InjectDecoratorReturn {\n\n    //  pre call checks\n    if (!param1) {\n        throw new A_InjectError(\n            A_InjectError.MissingInjectionTarget,\n            `A-Inject decorator is missing the target to inject`\n        );\n    }\n\n\n    return function (\n        target: A_TYPES__InjectableTargets,\n        methodName: string | symbol | undefined,\n        parameterIndex: number\n    ) {\n        // for Error handling purposes\n        const componentName = A_CommonHelper.getComponentName(target)\n\n        if (!A_TypeGuards.isTargetAvailableForInjection(target)) {\n            throw new A_InjectError(\n                A_InjectError.InvalidInjectionTarget,\n                `A-Inject cannot be used on the target of type ${typeof target} (${componentName})`\n            );\n        }\n\n        // determine the method name or 'constructor' for constructor injections\n        const method = methodName ? String(methodName) : 'constructor';\n        let metaKey;\n\n        switch (true) {\n            case A_TypeGuards.isComponentConstructor(target) || A_TypeGuards.isComponentInstance(target):\n                metaKey = A_TYPES__ComponentMetaKey.INJECTIONS;\n                break;\n\n            case A_TypeGuards.isContainerInstance(target):\n                metaKey = A_TYPES__ContainerMetaKey.INJECTIONS;\n                break;\n        }\n\n        // get existing meta or create a new one\n        const existedMeta = A_Context.meta(target).get(metaKey) || new A_Meta();\n        // get existing injections for the method or create a new array\n        const paramsArray: A_TYPES__A_InjectDecorator_Meta = existedMeta.get(method) || [];\n\n        // set the parameter injection info\n        paramsArray[parameterIndex] = {\n            target: param1,\n            instructions: param2\n        }\n        // save back the updated injections array\n        existedMeta.set(method, paramsArray);\n\n        // save back the updated meta info\n        A_Context\n            .meta(target)\n            .set(\n                metaKey,\n                existedMeta\n            );\n    }\n}"]}